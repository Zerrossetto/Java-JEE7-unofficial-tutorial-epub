<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="BNADR"></a><a id="JEETT00066"></a>

    <h1 class="chapter"><span class="secnum">6</span> <a id="sthref187"></a><a id="sthref188"></a>Getting Started with Web Applications</h1>

    <p>This chapter introduces web applications, which typically use JavaServer Faces technology and/or Java Servlet technology. A <span class="glossaryterm">web application</span> is a dynamic extension of a web or application server. Web applications are of the following types:</p>

    <ul>
      <li>
        <p><a id="sthref189"></a><span class="bold">Presentation-oriented</span>: A <span class="glossaryterm">presentation-oriented web application</span> generates interactive web pages containing various types of markup language (HTML, XHTML, XML, and so on) and dynamic content in response to requests. Development of presentation-oriented web applications is covered in <a href="../Text/jsf-intro.xhtml#BNAPH">Chapter 7, "JavaServer Faces Technology,"</a> through <a href="../Text/servlets.xhtml#BNAFD">Chapter 17, "Java Servlet Technology."</a></p>
      </li>

      <li>
        <p><a id="sthref190"></a><span class="bold">Service-oriented</span>: A <span class="glossaryterm">service-oriented web application</span> implements the endpoint of a web service. Presentation-oriented applications are often clients of service-oriented web applications. Development of service-oriented web applications is covered in <a href="../Text/jaxws.xhtml#BNAYL">Chapter 28, "Building Web Services with JAX-WS,"</a> and <a href="../Text/jaxrs.xhtml#GIEPU">Chapter 29, "Building RESTful Web Services with JAX-RS,"</a> in <a href="../Text/partwebsvcs.xhtml#BNAYK">Part VI, "Web Services."</a></p>
      </li>
    </ul>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/webapp.xhtml#GEYSJ">Web Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/webapp.xhtml#BNADU">Web Application Lifecycle</a></p>
      </li>

      <li>
        <p><a href="../Text/webapp.xhtml#BNADX">A Web Module That Uses JavaServer Faces Technology: The hello1 Example</a></p>
      </li>

      <li>
        <p><a href="../Text/webapp.xhtml#BNAEO">A Web Module That Uses Java Servlet Technology: The hello2 Example</a></p>
      </li>

      <li>
        <p><a href="../Text/webapp.xhtml#CHDHGJIA">Configuring Web Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/webapp.xhtml#BNAFC">Further Information about Web Applications</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="GEYSJ"></a><a id="JEETT00325"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_953"><span class="secnum">6.1</span> <a id="sthref191"></a>Web Applications</h1>

      <p>In the Java EE platform, <span class="glossaryterm">web components</span> provide the dynamic extension capabilities for a web server. Web components can be Java servlets, web pages implemented with JavaServer Faces technology, web service endpoints, or JSP pages. <a href="../Text/webapp.xhtml#BNADS">Figure 6-1</a> illustrates the interaction between a web client and a web application that uses a servlet. The client sends an HTTP request to the web server. A web server that implements Java Servlet and JavaServer Pages technology converts the request into an <code>HTTPServletRequest</code> object. This object is delivered to a web component, which can interact with JavaBeans components or a database to generate dynamic content. The web component can then generate an <code>HTTPServletResponse</code> or can pass the request to another web component. A web component eventually generates a <code>HTTPServletResponse</code> object. The web server converts this object to an HTTP response and returns it to the client.</p>

      <div class="figure">
        <a id="BNADS"></a><a id="JEETT00011"></a>

        <p class="titleinfigure">Figure 6-1 Java Web Application Request Handling</p><br />
        <a href="../Text/img_text/jeett_dt_.xhtml#img_text/jeett_dt_013.htm" id="sthref192">Description of "Figure 6-1 Java Web Application Request Handling"</a><br />
        <br />
      </div>

      <p>Servlets are Java programming language classes that dynamically process requests and construct responses. Java technologies, such as JavaServer Faces and Facelets, are used for building interactive web applications. (Frameworks can also be used for this purpose.) Although servlets and JavaServer Faces and Facelets pages can be used to accomplish similar things, each has its own strengths. Servlets are best suited for service-oriented applications (web service endpoints can be implemented as servlets) and the control functions of a presentation-oriented application, such as dispatching requests and handling nontextual data. JavaServer Faces and Facelets pages are more appropriate for generating text-based markup, such as XHTML, and are generally used for presentation-oriented applications.</p>

      <p><a id="sthref193"></a>Web components are supported by the services of a runtime platform called a <span class="glossaryterm">web container</span>. A web container provides such services as request dispatching, security, concurrency, and lifecycle management. A web container also gives web components access to such APIs as naming, transactions, and email.</p>

      <p><a id="sthref194"></a><a id="sthref195"></a><a id="sthref196"></a>Certain aspects of web application behavior can be configured when the application is installed, or <span class="italic">deployed</span>, to the web container. The configuration information can be specified using Java EE annotations or can be maintained in a text file in XML format called a web application deployment descriptor (DD). A web application DD must conform to the schema described in the Java Servlet specification.</p>

      <p>This chapter gives a brief overview of the activities involved in developing web applications. First, it summarizes the web application lifecycle and explains how to package and deploy very simple web applications on GlassFish Server. The chapter then moves on to configuring web applications and discusses how to specify the most commonly used configuration parameters.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BNADU"></a><a id="JEETT00326"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_954"><span class="secnum">6.2</span> Web Application Lifecycle</h1>

      <p>A web application consists of web components; static resource files, such as images and cascading style sheets (CSS); and helper classes and libraries. The web container provides many supporting services that enhance the capabilities of web components and make them easier to develop. However, because a web application must take these services into account, the process for creating and running a web application is different from that of traditional stand-alone Java classes.</p>

      <p>The process for creating, deploying, and executing a web application can be summarized as follows:</p>

      <ol>
        <li>
          <p>Develop the web component code.</p>
        </li>

        <li>
          <p>Develop the web application deployment descriptor, if necessary.</p>
        </li>

        <li>
          <p>Compile the web application components and helper classes referenced by the components.</p>
        </li>

        <li>
          <p>Optionally, package the application into a deployable unit.</p>
        </li>

        <li>
          <p>Deploy the application into a web container.</p>
        </li>

        <li>
          <p>Access a URL that references the web application.</p>
        </li>
      </ol>

      <p>Developing web component code is covered in the later chapters. Steps 2 through 4 are expanded on in the following sections and illustrated with a Hello, World&ndash;style, presentation-oriented application. This application allows a user to enter a name into an HTML form and then displays a greeting after the name is submitted.</p>

      <p>The Hello application contains two web components that generate the greeting and the response. This chapter discusses the following simple applications:</p>

      <ul>
        <li>
          <p><code>hello1</code>, a JavaServer Faces technology&ndash;based application that uses two XHTML pages and a managed bean</p>
        </li>

        <li>
          <p><code>hello2</code>, a servlet-based web application in which the components are implemented by two servlet classes</p>
        </li>
      </ul>

      <p>The applications are used to illustrate tasks involved in packaging, deploying, configuring, and running an application that contains web components.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BNADX"></a><a id="JEETT00327"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_955"><span class="secnum">6.3</span> A Web Module That Uses JavaServer Faces Technology: The hello1 Example</h1>

      <p>The <code>hello1</code> application is a web module that uses JavaServer Faces technology to display a greeting and response. You can use a text editor to view the application files, or you can use NetBeans IDE.</p>

      <p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/web/jsf/hello1/</code> directory.</p><a id="GJWTV"></a><a id="JEETT00145"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_956"><span class="secnum">6.3.1</span> To View the hello1 Web Module Using NetBeans IDE</h2>

        <ol>
          <li>
            <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
          </li>

          <li>
            <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
            <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/jsf
</pre>
          </li>

          <li>
            <p>Select the <code>hello1</code> folder and click <span class="gui-object-action">Open Project</span>.</p>
          </li>

          <li>
            <p>Expand the <span class="gui-object-action">Web Pages</span> node and double-click the <code>index.xhtml</code> file to view it in the editor.</p>

            <p>The <code>index.xhtml</code> file is the default landing page for a Facelets application. In a typical Facelets application, web pages are created in XHTML. For this application, the page uses simple tag markup to display a form with a graphic image, a header, a field, and two command buttons:</p>
            <pre class="oac_no_warn" xml:space="preserve">
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"&gt;
    &lt;h:head&gt;
        &lt;title&gt;Facelets Hello Greeting&lt;/title&gt;
    &lt;/h:head&gt;
    &lt;h:body&gt;
        &lt;h:form&gt;
            &lt;h:graphicImage url="#{resource['images:duke.waving.gif']}"
                            alt="Duke waving his hand"/&gt;
            &lt;h2&gt;Hello, my name is Duke. What's yours?&lt;/h2&gt;
            &lt;h:inputText id="username"
                         title="My name is: "
                         value="#{hello.name}"
                         required="true"
                         requiredMessage="Error: A name is required."
                         maxlength="25" /&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;h:commandButton id="submit" value="Submit" action="response"&gt;
            &lt;/h:commandButton&gt;
            &lt;h:commandButton id="reset" value="Reset" type="reset"&gt;
            &lt;/h:commandButton&gt;
        &lt;/h:form&gt;
        ...
    &lt;/h:body&gt;
&lt;/html&gt;
</pre>

            <p>The most complex element on the page is the <code>inputText</code> field. The <code>maxlength</code> attribute specifies the maximum length of the field. The <code>required</code> attribute specifies that the field must be filled out; the <code>requiredMessage</code> attribute provides the error message to be displayed if the field is left empty. The <code>title</code> attribute provides the text to be used by screen readers for the visually disabled. Finally, the <code>value</code> attribute contains an expression that will be provided by the <code>Hello</code> managed bean.</p>

            <p><a id="sthref197"></a>The web page connects to the <code>Hello</code> managed bean through the Expression Language (EL) value expression <code>#{hello.name}</code>, which retrieves the value of the <code>name</code> property from the managed bean. Note the use of <code>hello</code> to reference the managed bean <code>Hello</code>. If no name is specified in the <code>@Named</code> annotation of the managed bean, the managed bean is always accessed with the first letter of the class name in lowercase.</p>

            <p>The Submit <code>commandButton</code> element specifies the action as <code>response</code>, meaning that when the button is clicked, the <code>response.xhtml</code> page is displayed.</p>
          </li>

          <li>
            <p>Double-click the <code>response.xhtml</code> file to view it.</p>

            <p>The response page appears. Even simpler than the greeting page, the response page contains a graphic image, a header that displays the expression provided by the managed bean, and a single button whose <code>action</code> element transfers you back to the <code>index.xhtml</code> page:</p>
            <pre class="oac_no_warn" xml:space="preserve">
&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;
&lt;html lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html"&gt;
    &lt;h:head&gt;
        &lt;title&gt;Facelets Hello Response&lt;/title&gt;
    &lt;/h:head&gt;
    &lt;h:body&gt;
        &lt;h:form&gt;
            &lt;h:graphicImage url="#{resource['images:duke.waving.gif']}"
                            alt="Duke waving his hand"/&gt;
            &lt;h2&gt;Hello, #{hello.name}!&lt;/h2&gt;
            &lt;p&gt;&lt;/p&gt;
            &lt;h:commandButton id="back" value="Back" action="index" /&gt;
        &lt;/h:form&gt;
    &lt;/h:body&gt;
&lt;/html&gt;
</pre>
          </li>

          <li>
            <p>Expand the <span class="gui-object-action">Source Packages</span> node, then the <code>javaeetutorial.hello1</code> node.</p>
          </li>

          <li>
            <a id="CHDCABHC"></a>

            <p>Double-click the <code>Hello.java</code> file to view it.</p>

            <p>The <code>Hello</code> class, called a managed bean class, provides getter and setter methods for the <code>name</code> property used in the Facelets page expressions. By default, the expression language refers to the class name, with the first letter in lowercase (<code>hello.name</code>).</p>
            <pre class="oac_no_warn" xml:space="preserve">
package javaeetutorial.hello1;

import javax.enterprise.context.RequestScoped;
import javax.inject.Named;

@Named
@RequestScoped
public class Hello {

    private String name;

    public Hello() {
    }

    public String getName() {
        return name;
    }

    public void setName(String user_name) {
        this.name = user_name;
    }
}
</pre>

            <p>If you use the default name for the bean class, you can specify <code>@Model</code> as the annotation instead of having to specify both <code>@Named</code> and <code>@RequestScoped</code>. The <code>@Model</code> annotation is called a <span class="glossaryterm">stereotype</span>, a term for an annotation that encapsulates other annotations. It is described later in <a href="../Text/cdi-adv.xhtml#GKHQC">Using Stereotypes in CDI Applications</a>. Some examples will use <code>@Model</code> where it is appropriate.</p>
          </li>

          <li>
            <p>Under the <span class="gui-object-action">Web Pages</span> node, expand the <span class="gui-object-action">WEB-INF</span> node and double-click the <code>web.xml</code> file to view it.</p>

            <p>The <code>web.xml</code> file contains several elements that are required for a Facelets application. All of the following are created automatically when you use NetBeans IDE to create an application.</p>

            <ul>
              <li>
                <p>A context parameter specifying the project stage:</p>
                <pre class="oac_no_warn" xml:space="preserve">
    &lt;context-param&gt;
        &lt;param-name&gt;javax.faces.PROJECT_STAGE&lt;/param-name&gt;
        &lt;param-value&gt;Development&lt;/param-value&gt;
    &lt;/context-param&gt;
</pre>

                <p><a id="sthref198"></a>A context parameter provides configuration information needed by a web application. An application can define its own context parameters. In addition, JavaServer Faces technology and Java Servlet technology define context parameters that an application can use.</p>
              </li>

              <li>
                <p>A <code>servlet</code> element and its <code>servlet-mapping</code> element specifying the <code>FacesServlet</code>. All files with the <code>.xhtml</code> suffix will be matched:</p>
                <pre class="oac_no_warn" xml:space="preserve">
    &lt;servlet&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;servlet-class&gt;javax.faces.webapp.FacesServlet&lt;/servlet-class&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;Faces Servlet&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.xhtml&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
</pre>
              </li>

              <li>
                <p>A <code>welcome-file-list</code> element specifying the location of the landing page:</p>
                <pre class="oac_no_warn" xml:space="preserve">
    &lt;welcome-file-list&gt;
        &lt;welcome-file&gt;index.xhtml&lt;/welcome-file&gt;
    &lt;/welcome-file-list&gt;
</pre>
              </li>
            </ul>
          </li>
        </ol><a id="GLQLK"></a><a id="JEETT00585"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.1.1</span> <a id="sthref199"></a>Introduction to Scopes</h3>

          <p>In the <code>Hello.java</code> class, the annotations <code>javax.inject.Named</code> and <code>javax.enterprise.context.RequestScoped</code> identify the class as a managed bean using request scope. Scope defines how application data persists and is shared.</p>

          <p>The most commonly used scopes in JavaServer Faces applications are the following:</p>

          <ul>
            <li>
              <p><a id="sthref200"></a><span class="bold">Request (</span><code>@RequestScoped</code><span class="bold">)</span>: Request scope persists during a single HTTP request in a web application. In an application like <code>hello1</code>, in which the application consists of a single request and response, the bean uses request scope.</p>
            </li>

            <li>
              <p><a id="sthref201"></a><span class="bold">Session (</span><code>@SessionScoped</code><span class="bold">)</span>: Session scope persists across multiple HTTP requests in a web application. When an application consists of multiple requests and responses where data needs to be maintained, beans use session scope.</p>
            </li>

            <li>
              <p><a id="sthref202"></a><span class="bold">Application (</span><code>@ApplicationScoped</code><span class="bold">)</span>: Application scope persists across all users' interactions with a web application.</p>
            </li>
          </ul>

          <p>For more information on scopes in JavaServer Faces technology, see <a href="../Text/jsf-configure.xhtml#GIRCR">Using Managed Bean Scopes</a>.</p>
        </div>
      </div><a id="BNADZ"></a><a id="JEETT00892"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_957"><span class="secnum">6.3.2</span> <a id="sthref203"></a>Packaging and Deploying the hello1 Web Module</h2>

        <p>A web module must be packaged into a WAR in certain deployment scenarios and whenever you want to distribute the web module. You can package a web module into a WAR file by using Maven or by using the IDE tool of your choice. This tutorial shows you how to use NetBeans IDE or Maven to build, package, and deploy the <code>hello1</code> sample application.</p>

        <p>You can deploy a WAR file to GlassFish Server by:</p>

        <ul>
          <li>
            <p>Using NetBeans IDE</p>
          </li>

          <li>
            <p>Using the <code>asadmin</code> command</p>
          </li>

          <li>
            <p>Using the Administration Console</p>
          </li>

          <li>
            <p>Copying the WAR file into the <span class="variable">domain-dir</span><code>/autodeploy/</code> directory</p>
          </li>
        </ul>

        <p>Throughout the tutorial, you will use NetBeans IDE or Maven for packaging and deploying.</p><a id="GJRGN"></a><a id="JEETT00147"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.2.1</span> To Build and Package the hello1 Web Module Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Start GlassFish Server as described in <a href="../Text/usingexamples.xhtml#CHDCACDI">To Start GlassFish Server Using NetBeans IDE</a>, if you have not already done so.</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/jsf
</pre>
            </li>

            <li>
              <p>Select the <code>hello1</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>hello1</code> project and select <span class="gui-object-action">Build</span>. This command deploys the project to the server.</p>
            </li>
          </ol>
        </div><a id="GJRKN"></a><a id="JEETT00148"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.2.2</span> To Build and Package the hello1 Web Module Using Maven</h3>

          <ol>
            <li>
              <p>Start GlassFish Server as described in <a href="../Text/usingexamples.xhtml#CHDBDDAF">To Start GlassFish Server Using the Command Line</a>, if you have not already done so.</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/jsf/hello1/
</pre>
            </li>

            <li>
              <p>Enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>

              <p>This command spawns any necessary compilations and creates the WAR file in <span class="variable">tut-install</span><code>/examples/web/jsf/hello1/target/</code>. It then deploys the project to the server.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNAEI"></a><a id="JEETT00894"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_958"><span class="secnum">6.3.3</span> <a id="sthref204"></a>Viewing Deployed Web Modules</h2>

        <p>GlassFish Server provides two ways to view the deployed web modules: the Administration Console and the <code>asadmin</code> command. You can also use NetBeans IDE to view deployed modules.</p><a id="GJSGR"></a><a id="JEETT00152"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.3.1</span> To View Deployed Web Modules Using the Administration Console</h3>

          <ol>
            <li>
              <p>Open the URL <code>http://localhost:4848/</code> in a browser.</p>
            </li>

            <li>
              <p>Select the <span class="gui-object-action">Applications</span> node.</p>

              <p>The deployed web modules appear in the <span class="gui-object-action">Deployed Applications</span> table.</p>
            </li>
          </ol>
        </div><a id="GJSEW"></a><a id="JEETT00153"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.3.2</span> To View Deployed Web Modules Using the asadmin Command</h3>

          <p>Enter the following command:</p>
          <pre class="oac_no_warn" xml:space="preserve">
asadmin list-applications
</pre>
        </div>

        <div class="sect3">
          <a id="sthref205"></a>

          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.3.3</span> To View Deployed Web Modules Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>In the <span class="gui-object-action">Services</span> tab, expand the <span class="gui-object-action">Servers</span> node, then expand the <span class="gui-object-action">GlassFish Server</span> node.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Applications</span> node to view the deployed modules.</p>
            </li>
          </ol>
        </div>
      </div>

      <div class="sect2">
        <a id="sthref206"></a>

        <h2 class="sect2" id="sigil_toc_id_959"><span class="secnum">6.3.4</span> Running the Deployed hello1 Web Module</h2>

        <p>Now that the web module is deployed, you can view it by opening the application in a web browser. By default, the application is deployed to host <code>localhost</code> on port 8080. The context root of the web application is <code>hello1</code>.</p>

        <ol>
          <li>
            <p>Open a web browser.</p>
          </li>

          <li>
            <p>Enter the following URL:</p>
            <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/hello1/
</pre>
          </li>

          <li>
            <p>In the field, enter your name and click <span class="gui-object-action">Submit</span>.</p>

            <p>The response page displays the name you submitted. Click <span class="gui-object-action">Back</span> to try again.</p>
          </li>
        </ol><a id="BNAEM"></a><a id="JEETT00896"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.4.1</span> Dynamic Reloading of Deployed Modules</h3>

          <p><a id="sthref207"></a>If dynamic reloading is enabled, you do not have to redeploy an application or module when you change its code or deployment descriptors. All you have to do is copy the changed pages or class files into the deployment directory for the application or module. The deployment directory for a web module named <span class="variable">context-root</span> is <span class="variable">domain-dir</span><code>/applications/</code><span class="variable">context-root</span>. The server checks for changes periodically and redeploys the application, automatically and dynamically, with the changes.</p>

          <p>This capability is useful in a development environment because it allows code changes to be tested quickly. Dynamic reloading is not recommended for a production environment, however, because it may degrade performance. In addition, whenever a reload takes place, the sessions at that time become invalid, and the client must restart the session.</p>

          <p>In GlassFish Server, dynamic reloading is enabled by default.</p>
        </div>
      </div><a id="BNAEN"></a><a id="JEETT00897"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_960"><span class="secnum">6.3.5</span> <a id="sthref208"></a><a id="sthref209"></a><a id="sthref210"></a>Undeploying the hello1 Web Module</h2>

        <p>You can undeploy web modules and other types of enterprise applications by using either NetBeans IDE or Maven.</p><a id="GJSEJ"></a><a id="JEETT00156"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.5.1</span> To Undeploy the hello1 Web Module Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>In the <span class="gui-object-action">Services</span> tab, expand the <span class="gui-object-action">Servers</span> node, then expand the <span class="gui-object-action">GlassFish Server</span> node.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Applications</span> node.</p>
            </li>

            <li>
              <p>Right-click the <code>hello1</code> module and select <span class="gui-object-action">Undeploy</span>.</p>
            </li>

            <li>
              <p>To delete the class files and other build artifacts, go back to the <span class="gui-object-action">Projects</span> tab, right-click the project, and select <span class="gui-object-action">Clean</span>.</p>
            </li>
          </ol>
        </div><a id="GJSHH"></a><a id="JEETT00157"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.3.5.2</span> To Undeploy the hello1 Web Module Using Maven</h3>

          <ol>
            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/jsf/hello1/
</pre>
            </li>

            <li>
              <p>Enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn cargo:undeploy
</pre>
            </li>

            <li>
              <p>To delete the class files and other build artifacts, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn clean
</pre>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNAEO"></a><a id="JEETT00328"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_961"><span class="secnum">6.4</span> <a id="sthref211"></a><a id="sthref212"></a>A Web Module That Uses Java Servlet Technology: The hello2 Example</h1>

      <p>The <code>hello2</code> application is a web module that uses Java Servlet technology to display a greeting and response. You can use a text editor to view the application files, or you can use NetBeans IDE.</p>

      <p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/web/servlet/hello2/</code> directory.</p><a id="BNAEP"></a><a id="JEETT00898"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_962"><span class="secnum">6.4.1</span> Mapping URLs to Web Components</h2>

        <p><a id="sthref213"></a><a id="sthref214"></a>When it receives a request, the web container must determine which web component should handle the request. The web container does so by mapping the <span class="bold">URL path</span> contained in the request to a web application and a web component. A URL path contains the context root and, optionally, a URL pattern:</p>
        <pre class="oac_no_warn" xml:space="preserve">
http://<span class="variable">host</span>:<span class="variable">port</span>/<span class="variable">context-root</span>[/<span class="variable">url-pattern</span>]
</pre>

        <p><a id="sthref215"></a>You set the URL pattern for a servlet by using the <code>@WebServlet</code> annotation in the servlet source file. For example, the <code>GreetingServlet.java</code> file in the <code>hello2</code> application contains the following annotation, specifying the URL pattern as <code>/greeting</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve">
@WebServlet("/greeting")
public class GreetingServlet extends HttpServlet {
    ...
</pre>

        <p>This annotation indicates that the URL pattern <code>/greeting</code> follows the context root. Therefore, when the servlet is deployed locally, it is accessed with the following URL:</p>
        <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/hello2/greeting
</pre>

        <p>To access the servlet by using only the context root, specify <code>"/"</code> as the URL pattern.</p>
      </div><a id="GJWWG"></a><a id="JEETT00899"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_963"><span class="secnum">6.4.2</span> Examining the hello2 Web Module</h2>

        <p>The <code>hello2</code> application behaves almost identically to the <code>hello1</code> application, but it is implemented using Java Servlet technology instead of JavaServer Faces technology. You can use a text editor to view the application files, or you can use NetBeans IDE.</p><a id="GJWWA"></a><a id="JEETT00158"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.4.2.1</span> To View the hello2 Web Module Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/servlet
</pre>
            </li>

            <li>
              <p>Select the <code>hello2</code> folder and click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Source Packages</span> node, then expand the <code>javaeetutorial.hello2</code> node.</p>
            </li>

            <li>
              <p>Double-click the <code>GreetingServlet.java</code> file to view it.</p>

              <p>This servlet overrides the <code>doGet</code> method, implementing the <code>GET</code> method of HTTP. The servlet displays a simple HTML greeting form whose <span class="gui-object-action">Submit</span> button, like that of <code>hello1</code>, specifies a response page for its action. The following excerpt begins with the <code>@WebServlet</code> annotation, which specifies the URL pattern relative to the context root:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@WebServlet("/greeting")
public class GreetingServlet extends HttpServlet {

    @Override
    public void doGet(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html");
        response.setBufferSize(8192);
        try (PrintWriter out = response.getWriter()) {
            out.println("&lt;html lang=\"en\"&gt;"
                    + "&lt;head&gt;&lt;title&gt;Servlet Hello&lt;/title&gt;&lt;/head&gt;");

            // then write the data of the response
            out.println("&lt;body  bgcolor=\"#ffffff\"&gt;"
                + "&lt;img src=\"duke.waving.gif\" "
                + "alt=\"Duke waving his hand\"&gt;"
                + "&lt;form method=\"get\"&gt;"
                + "&lt;h2&gt;Hello, my name is Duke. What's yours?&lt;/h2&gt;"
                + "&lt;input title=\"My name is: \"type=\"text\" "
                + "name=\"username\" size=\"25\"&gt;"
                + "&lt;p&gt;&lt;/p&gt;"
                + "&lt;input type=\"submit\" value=\"Submit\"&gt;"
                + "&lt;input type=\"reset\" value=\"Reset\"&gt;"
                + "&lt;/form&gt;");

            String username = request.getParameter("username");
            if (username != null &amp;&amp; username.length()&gt; 0) {
                RequestDispatcher dispatcher =
                    getServletContext().getRequestDispatcher("/response");

                if (dispatcher != null) {
                    dispatcher.include(request, response);
                }
            }
            out.println("&lt;/body&gt;&lt;/html&gt;");
        }
    }
    ...
</pre>
            </li>

            <li>
              <p>Double-click the <code>ResponseServlet.java</code> file to view it.</p>

              <p>This servlet also overrides the <code>doGet</code> method, displaying only the response. The following excerpt begins with the <code>@WebServlet</code> annotation, which specifies the URL pattern relative to the context root:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@WebServlet("/response")
public class ResponseServlet extends HttpServlet {

    @Override
    public void doGet(HttpServletRequest request,
            HttpServletResponse response)
            throws ServletException, IOException {
        try (PrintWriter out = response.getWriter()) {

            // then write the data of the response
            String username = request.getParameter("username");
            if (username != null &amp;&amp; username.length()&gt; 0) {
                out.println("&lt;h2&gt;Hello, " + username + "!&lt;/h2&gt;");
            }
        }
    }
    ...
</pre>
            </li>
          </ol>
        </div>
      </div><a id="GKBLH"></a><a id="JEETT00900"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_964"><span class="secnum">6.4.3</span> Running the hello2 Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>hello2</code> example.</p><a id="GJSED"></a><a id="JEETT00159"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.4.3.1</span> To Run the hello2 Example Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Start GlassFish Server as described in <a href="../Text/usingexamples.xhtml#CHDCACDI">To Start GlassFish Server Using NetBeans IDE</a>, if you have not already done so.</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/servlet
</pre>
            </li>

            <li>
              <p>Select the <code>hello2</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>hello2</code> project and select <span class="gui-object-action">Build</span> to package and deploy the project.</p>
            </li>

            <li>
              <p>In a web browser, open the following URL:</p>
              <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/hello2/greeting
</pre>

              <p>The URL specifies the context root, followed by the URL pattern.</p>

              <p>The application looks much like the <code>hello1</code> application. The major difference is that after you click <span class="gui-object-action">Submit</span> the response appears below the greeting, not on a separate page.</p>
            </li>
          </ol>
        </div><a id="GJSHX"></a><a id="JEETT00160"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.4.3.2</span> To Run the hello2 Example Using Maven</h3>

          <ol>
            <li>
              <p>Start GlassFish Server as described in <a href="../Text/usingexamples.xhtml#CHDBDDAF">To Start GlassFish Server Using the Command Line</a>, if you have not already done so.</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/web/servlet/hello2/
</pre>
            </li>

            <li>
              <p>Enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>

              <p>This target builds the WAR file, copies it to the <span class="variable">tut-install</span><code>/examples/web/hello2/target/</code> directory, and deploys it.</p>
            </li>

            <li>
              <p>In a web browser, open the following URL:</p>
              <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/hello2/greeting
</pre>

              <p>The URL specifies the context root, followed by the URL pattern.</p>

              <p>The application looks much like the <code>hello1</code> application. The major difference is that after you click <span class="gui-object-action">Submit</span> the response appears below the greeting, not on a separate page.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="CHDHGJIA"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_965"><span class="secnum">6.5</span> Configuring Web Applications</h1>

      <p>This section describes the following tasks involved with configuring web applications:</p>

      <ul>
        <li>
          <p>Setting context parameters</p>
        </li>

        <li>
          <p>Declaring welcome files</p>
        </li>

        <li>
          <p>Mapping errors to error screens</p>
        </li>

        <li>
          <p>Declaring resource references</p>
        </li>
      </ul><a id="BNAES"></a><a id="JEETT00902"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_966"><span class="secnum">6.5.1</span> Setting Context Parameters</h2>

        <p>The web components in a web module share an object that represents their application context. You can pass context parameters to the context, or you can pass initialization parameters to a servlet. Context parameters are available to the entire application. For information on initialization parameters, see <a href="../Text/servlets.xhtml#BNAFU">Creating and Initializing a Servlet</a>.</p><a id="GJSFJ"></a><a id="JEETT00161"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.5.1.1</span> <a id="sthref216"></a><a id="sthref217"></a>To Add a Context Parameter Using NetBeans IDE</h3>

          <p>These steps apply generally to web applications but do not apply specifically to the examples in this chapter.</p>

          <ol>
            <li>
              <p>Open the project.</p>
            </li>

            <li>
              <p>Expand the project's node in the <span class="gui-object-action">Projects</span> tree.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Web Pages</span> node and then the <span class="gui-object-action">WEB-INF</span> node.</p>
            </li>

            <li>
              <p>Double-click <code>web.xml</code>.</p>

              <p>If the project does not have a <code>web.xml</code> file, create one by following the steps in <a href="../Text/webapp.xhtml#GKIHH">To Create a web.xml File Using NetBeans IDE</a>.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">General</span> at the top of the editor window.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Context Parameters</span> node.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Add</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Add Context Parameter</span> dialog box, in the <span class="gui-object-action">Parameter Name</span> field, enter the name that specifies the context object.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Parameter Value</span> field, enter the parameter to pass to the context object.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">OK</span>.</p>
            </li>
          </ol>
        </div><a id="GKIHH"></a><a id="JEETT00162"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.5.1.2</span> To Create a web.xml File Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">New File</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">New File</span> wizard, select the <span class="gui-object-action">Web</span> category, then select <span class="gui-object-action">Standard Deployment Descriptor</span> under <span class="gui-object-action">File Types</span>.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Next</span>.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Finish</span>.</p>

              <p>A basic <code>web.xml</code> file appears in <code>web/WEB-INF/</code>.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNAER"></a><a id="JEETT00901"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_967"><span class="secnum">6.5.2</span> Declaring Welcome Files</h2>

        <p><a id="sthref218"></a><a id="sthref219"></a>The <span class="glossaryterm">welcome files</span> mechanism allows you to specify a list of files that the web container can append to a request for a URL (called a valid partial request) that is not mapped to a web component. For example, suppose that you define a welcome file <code>welcome.html</code>. When a client requests a URL such as <span class="variable">host</span><code>:</code><span class="variable">port</span><code>/</code><span class="variable">webapp</span><code>/</code><span class="variable">directory</span>, where <span class="variable">directory</span> is not mapped to a servlet or XHTML page, the file <span class="variable">host</span><code>:</code><span class="variable">port</span><code>/</code><span class="variable">webapp</span><code>/</code><span class="variable">directory</span><code>/welcome.html</code> is returned to the client.</p>

        <p>If a web container receives a valid partial request, the web container examines the welcome file list, appends to the partial request each welcome file in the order specified, and checks whether a static resource or servlet in the WAR is mapped to that request URL. The web container then sends the request to the first resource that matches in the WAR.</p>

        <p>If no welcome file is specified, GlassFish Server will use a file named <code>index.html</code> as the default welcome file. If there is no welcome file and no file named <code>index.html</code>, GlassFish Server returns a directory listing.</p>

        <p>You specify welcome files in the <code>web.xml</code> file. The welcome file specification for the <code>hello1</code> example looks like this:</p>
        <pre class="oac_no_warn" xml:space="preserve">
&lt;welcome-file-list&gt;
    &lt;welcome-file&gt;index.xhtml&lt;/welcome-file&gt;
&lt;/welcome-file-list&gt;
</pre>

        <p>A specified welcome file must not have a leading or trailing slash (<code>/</code>).</p>

        <p>The <code>hello2</code> example does not specify a welcome file, because the URL request is mapped to the <code>GreetingServlet</code> web component through the URL pattern <code>/greeting</code>.</p>
      </div><a id="GKBKW"></a><a id="JEETT00903"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_968"><span class="secnum">6.5.3</span> <a id="sthref220"></a><a id="sthref221"></a><a id="sthref222"></a>Mapping Errors to Error Screens</h2>

        <p>When an error occurs during execution of a web application, you can have the application display a specific error screen according to the type of error. In particular, you can specify a mapping between the status code returned in an HTTP response or a Java programming language exception returned by any web component and any type of error screen.</p>

        <p>You can have multiple <code>error-page</code> elements in your deployment descriptor. Each element identifies a different error that causes an error page to open. This error page can be the same for any number of <code>error-page</code> elements.</p><a id="BNAET"></a><a id="JEETT00164"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.5.3.1</span> To Set Up Error Mapping Using NetBeans IDE</h3>

          <p>These steps apply generally to web applications but do not apply specifically to the examples in this chapter.</p>

          <ol>
            <li>
              <p>Open the project.</p>
            </li>

            <li>
              <p>Expand the project's node in the <span class="gui-object-action">Projects</span> tab.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Web Pages</span> node and then the <span class="gui-object-action">WEB-INF</span> node.</p>
            </li>

            <li>
              <p>Double-click <code>web.xml</code>.</p>

              <p>If the project does not have a <code>web.xml</code> file, create one by following the steps in <a href="../Text/webapp.xhtml#GKIHH">To Create a web.xml File Using NetBeans IDE</a>.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Pages</span> at the top of the editor window.</p>
            </li>

            <li>
              <p>Expand the <span class="gui-object-action">Error Pages</span> node.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Add</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Add Error Page</span> dialog box, click <span class="gui-object-action">Browse</span> to locate the page that you want to act as the error page.</p>
            </li>

            <li>
              <p>Specify either an error code or an exception type.</p>

              <ul>
                <li>
                  <p>To specify an error code, in the <span class="gui-object-action">Error Code</span> field enter the HTTP status code that will cause the error page to be opened, or leave the field blank to include all error codes.</p>
                </li>

                <li>
                  <p>To specify an exception type, in the <span class="gui-object-action">Exception Type</span> field enter the exception that will cause the error page to load. To specify all throwable errors and exceptions, enter <code>java.lang.Throwable</code>.</p>
                </li>
              </ul>
            </li>

            <li>
              <p>Click <span class="gui-object-action">OK</span>.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNAEU"></a><a id="JEETT00904"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_969"><span class="secnum">6.5.4</span> Declaring Resource References</h2>

        <p>If your web component uses such objects as enterprise beans, data sources, or web services, you use Java EE annotations to inject these resources into your application. Annotations eliminate a lot of the boilerplate lookup code and configuration elements that previous versions of Java EE required.</p>

        <p>Although resource injection using annotations can be more convenient for the developer, there are some restrictions on using it in web applications. First, you can inject resources only into container-managed objects, because a container must have control over the creation of a component so that it can perform the injection into a component. As a result, you cannot inject resources into such objects as simple JavaBeans components. However, managed beans are managed by the container; therefore, they can accept resource injections.</p>

        <p>Components that can accept resource injections are listed in <a href="../Text/webapp.xhtml#BNAEV">Table 6-1</a>.</p>

        <p>This section explains how to use a couple of the annotations supported by a web container to inject resources. <a href="../Text/persistence-basicexamples.xhtml#GIJST">Chapter 38, "Running the Persistence Examples"</a>, explains how web applications use annotations supported by the Java Persistence API. <a href="../Text/security-webtier.xhtml#BNCAS">Chapter 48, "Getting Started Securing Web Applications"</a>, explains how to use annotations to specify information about securing web applications. See <a href="../Text/resources.xhtml#BNCJH">Chapter 52, "Resource Adapters and Contracts"</a>, for more information on resources.</p>

        <div class="tblhruleformal">
          <a id="sthref223"></a><a id="BNAEV"></a>

          <p class="titleintable">Table 6-1 Web Components That Accept Resource Injections</p>

          <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists the name and the class or interface of each web component that accepts resource injections." title="Web Components That Accept Resource Injections" width="100%">
            <col width="23%" />
            <col width="*" />

            <thead>
              <tr align="left" valign="top">
                <th align="left" id="r1c1-t2" valign="bottom">Component</th>

                <th align="left" id="r1c2-t2" valign="bottom">Interface/Class</th>
              </tr>
            </thead>

            <tbody>
              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t2" id="r2c1-t2">
                  <p>Servlets</p>
                </td>

                <td align="left" headers="r2c1-t2 r1c2-t2">
                  <p><code>javax.servlet.Servlet</code></p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t2" id="r3c1-t2">
                  <p>Servlet filters</p>
                </td>

                <td align="left" headers="r3c1-t2 r1c2-t2">
                  <p><code>javax.servlet.ServletFilter</code></p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t2" id="r4c1-t2">
                  <p>Event listeners</p>
                </td>

                <td align="left" headers="r4c1-t2 r1c2-t2">
                  <p><code>javax.servlet.ServletContextListener</code></p>

                  <p><code>javax.servlet.ServletContextAttributeListener</code></p>

                  <p><code>javax.servlet.ServletRequestListener</code></p>

                  <p><code>javax.servlet.ServletRequestAttributeListener</code></p>

                  <p><code>javax.servlet.http.HttpSessionListener</code></p>

                  <p><code>javax.servlet.http.HttpSessionAttributeListener</code></p>

                  <p><code>javax.servlet.http.HttpSessionBindingListener</code></p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t2" id="r5c1-t2">
                  <p>Managed beans</p>
                </td>

                <td align="left" headers="r5c1-t2 r1c2-t2">
                  <p>Plain Old Java Objects</p>
                </td>
              </tr>
            </tbody>
          </table><br />
        </div><a id="BNAEW"></a><a id="JEETT00586"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.5.4.1</span> <a id="sthref224"></a>Declaring a Reference to a Resource</h3>

          <p>The <code>@Resource</code> annotation is used to declare a reference to a resource, such as a data source, an enterprise bean, or an environment entry.</p>

          <p>The <code>@Resource</code> annotation is specified on a class, a method, or a field. The container is responsible for injecting references to resources declared by the <code>@Resource</code> annotation and mapping it to the proper JNDI resources.</p>

          <p>In the following example, the <code>@Resource</code> annotation is used to inject a data source into a component that needs to make a connection to the data source, as is done when using JDBC technology to access a relational database:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@Resource javax.sql.DataSource catalogDS;
public getProductsByCategory() {
    // get a connection and execute the query
    Connection conn = catalogDS.getConnection();
    ...
}
</pre>

          <p>The container injects this data source prior to the component's being made available to the application. The data source JNDI mapping is inferred from the field name, <code>catalogDS</code>, and the type, <code>javax.sql.DataSource</code>.</p>

          <p>If you have multiple resources that you need to inject into one component, you need to use the <code>@Resources</code> annotation to contain them, as shown by the following example:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@Resources ({
    @Resource(name="myDB" type=javax.sql.DataSource.class),
    @Resource(name="myMQ" type=javax.jms.ConnectionFactory.class)
})
</pre>

          <p>The web application examples in this tutorial use the Java Persistence API to access relational databases. This API does not require you to explicitly create a connection to a data source. Therefore, the examples do not use the <code>@Resource</code> annotation to inject a data source. However, this API supports the <code>@PersistenceUnit</code> and <code>@PersistenceContext</code> annotations for injecting <code>EntityManagerFactory</code> and <code>EntityManager</code> instances, respectively. <a href="../Text/persistence-basicexamples.xhtml#GIJST">Chapter 38, "Running the Persistence Examples"</a> describes these annotations and the use of the Java Persistence API in web applications.</p>
        </div><a id="BNAEX"></a><a id="JEETT00587"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">6.5.4.2</span> <a id="sthref225"></a><a id="sthref226"></a>Declaring a Reference to a Web Service</h3>

          <p>The <code>@WebServiceRef</code> annotation provides a reference to a web service. The following example shows uses the <code>@WebServiceRef</code> annotation to declare a reference to a web service. <code>WebServiceRef</code> uses the <code>wsdlLocation</code> element to specify the URI of the deployed service's WSDL file:</p>
          <pre class="oac_no_warn" xml:space="preserve">
...
import javax.xml.ws.WebServiceRef;
...
public class ResponseServlet extends HTTPServlet {
@WebServiceRef(wsdlLocation="http://localhost:8080/helloservice/hello?wsdl")
static HelloService service;
</pre>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNAFC"></a><a id="JEETT00329"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_970"><span class="secnum">6.6</span> Further Information about Web Applications</h1>

      <p>For more information on web applications, see</p>

      <ul>
        <li>
          <p>JavaServer Faces 2.2 specification:</p>

          <p><code><a href="../Text/http://jcp.org/en/jsr/detail?id=.xhtml#http://jcp.org/en/jsr/detail?id=344">http://jcp.org/en/jsr/detail?id=344</a></code></p>
        </li>

        <li>
          <p>Java Servlet 3.1 specification:</p>

          <p><code><a href="../Text/http://jcp.org/en/jsr/detail?id=.xhtml#http://jcp.org/en/jsr/detail?id=340">http://jcp.org/en/jsr/detail?id=340</a></code></p>
        </li>
      </ul>
    </div>
  </div>
</body>
</html>
