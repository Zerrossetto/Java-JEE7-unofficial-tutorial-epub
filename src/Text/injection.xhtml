<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="GKJIQ3"></a>

    <h1 class="chapter"><span class="secnum">4</span> Injection</h1>

    <p>This chapter provides an overview of injection in Java EE and describes the two injection mechanisms provided by the platform: resource injection and dependency injection.</p>

    <p>Java EE provides injection mechanisms that enable your objects to obtain references to resources and other dependencies without having to instantiate them directly. You declare the required resources and other dependencies in your classes by decorating fields or methods with one of the annotations that mark the field as an injection point. The container then provides the required instances at runtime. Injection simplifies your code and decouples it from the implementations of its dependencies.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/injection.xhtml#BABHDCAI">Resource Injection</a></p>
      </li>

      <li>
        <p><a href="../Text/injection.xhtml#BABDJGIE">Dependency Injection</a></p>
      </li>

      <li>
        <p><a href="../Text/injection.xhtml#BABHFECJ">The Main Differences between Resource Injection and Dependency Injection</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="BABHDCAI"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">4.1</span> Resource Injection</h1>

      <p><span class="glossaryterm">Resource injection</span> enables you to inject any resource available in the JNDI namespace into any container-managed object, such as a servlet, an enterprise bean, or a managed bean. For example, you can use resource injection to inject data sources, connectors, or custom resources available in the JNDI namespace.</p>

      <p>The type you use for the reference to the injected instance is usually an interface, which decouples your code from the implementation of the resource.</p>

      <p>For example, the following code injects a data source object that provides connections to the default Java DB database shipped with GlassFish Server:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"></pre>
      <pre class="oac_no_warn" xml:space="preserve">public class MyServlet extends HttpServlet {
    @Resource(name="java:comp/DefaultDataSource")
    private javax.sql.DataSource dsc;
    ...
}</pre>

      <p>In addition to field-based injection as in the preceding example, you can inject resources using method-based injection:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"></pre>
      <pre class="oac_no_warn" xml:space="preserve">public class MyServlet extends HttpServlet {
    private javax.sql.DataSource dsc;
    ...
    @Resource(name="java:comp/DefaultDataSource")
    public void setDsc(java.sql.DataSource ds) {
        dsc = ds;
    }
}</pre>

      <p>To use method-based injection, the setter method must follow the JavaBeans conventions for property names: The method name must begin with <code>set</code>, have a <code>void</code> return type, and have only one parameter.</p>

      <p><a id="sthref155"></a>The <code>@Resource</code> annotation is in the <code>javax.annotation</code> package and is defined in JSR 250 (Common Annotations for the Java Platform). Resource injection resolves by name, so it is not typesafe: the type of the resource object is not known at compile time, so you can get runtime errors if the types of the object and its reference do not match.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BABDJGIE"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">4.2</span> Dependency Injection</h1>

      <p><span class="glossaryterm">Dependency injection</span> enables you to turn regular Java classes into managed objects and to inject them into any other managed object. Using dependency injection, your code can declare dependencies on any managed object. The container automatically provides instances of these dependencies at the injection points at runtime, and it also manages the lifecycle of these instances for you.</p>

      <p>Dependency injection in Java EE defines scopes, which determine the lifecycle of the objects that the container instantiates and injects. For example, a managed object that is only needed to respond to a single client request (such as a currency converter) has a different scope than a managed object that is needed to process multiple client requests within a session (such as a shopping cart).</p>

      <p>You can define managed objects (also called <span class="glossaryterm">managed beans</span>) that you can later inject by assigning a scope to a regular class:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"></pre>
      <pre class="oac_no_warn" xml:space="preserve">@javax.enterprise.context.RequestScoped
public class CurrencyConverter { ... }</pre>

      <p>Use the <code>javax.inject.Inject</code> annotation to inject managed beans; for example:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"></pre>
      <pre class="oac_no_warn" xml:space="preserve">public class MyServlet extends HttpServlet {
    @Inject CurrencyConverter cc;
    ...
}</pre>

      <p>As opposed to resource injection, dependency injection is typesafe because it resolves by type. To decouple your code from the implementation of the managed bean, you can reference the injected instances using an interface type and have your managed bean implement that interface.</p>

      <p>For more information about dependency injection, see <a href="../Text/cdi-basic.xhtml#GIWHB">Chapter 23, "Introduction to Contexts and Dependency Injection for Java EE"</a> and JSR 299 (Contexts and Dependency Injection for the Java EE Platform).</p>
    </div>
  </div>

  <div class="ind">
    <a id="BABHFECJ"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">4.3</span> The Main Differences between Resource Injection and Dependency Injection</h1>

      <p><a href="../Text/injection.xhtml#BABCEJEE">Table 4-1</a> lists the main differences between resource injection and dependency injection.</p>

      <div class="tblhruleformalwide">
        <a id="sthref156"></a><a id="BABCEJEE"></a>

        <p class="titleintable">Table 4-1 Differences between Resource Injection and Dependency Injection</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormalWide" dir="ltr" frame="hsides" rules="rows" summary="The table compares resource injection with dependency injection." title="Differences between Resource Injection and Dependency Injection" width="100%">
          <col width="*" />
          <col width="22%" />
          <col width="20%" />
          <col width="18%" />
          <col width="15%" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t2" valign="bottom">Injection Mechanism</th>

              <th align="left" id="r1c2-t2" valign="bottom">Can Inject JNDI Resources Directly</th>

              <th align="left" id="r1c3-t2" valign="bottom">Can Inject Regular Classes Directly</th>

              <th align="left" id="r1c4-t2" valign="bottom">Resolves By</th>

              <th align="left" id="r1c5-t2" valign="bottom">Typesafe</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r2c1-t2">
                <p>Resource Injection</p>
              </td>

              <td align="left" headers="r2c1-t2 r1c2-t2">
                <p>Yes</p>
              </td>

              <td align="left" headers="r2c1-t2 r1c3-t2">
                <p>No</p>
              </td>

              <td align="left" headers="r2c1-t2 r1c4-t2">
                <p>Resource name</p>
              </td>

              <td align="left" headers="r2c1-t2 r1c5-t2">
                <p>No</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r3c1-t2">
                <p>Dependency Injection</p>
              </td>

              <td align="left" headers="r3c1-t2 r1c2-t2">
                <p>No</p>
              </td>

              <td align="left" headers="r3c1-t2 r1c3-t2">
                <p>Yes</p>
              </td>

              <td align="left" headers="r3c1-t2 r1c4-t2">
                <p>Type</p>
              </td>

              <td align="left" headers="r3c1-t2 r1c5-t2">
                <p>Yes</p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>
    </div>
  </div>
</body>
</html>
