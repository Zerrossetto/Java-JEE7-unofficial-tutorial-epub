<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="GKIDZ"></a><a id="JEETT00090"></a>

    <h1 class="chapter"><span class="secnum">36</span> <a id="sthref1812"></a>Using Asynchronous Method Invocation in Session Beans</h1>

    <p>This chapter discusses how to implement asynchronous business methods in session beans and call them from enterprise bean clients.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/ejb-async.xhtml#GKKQG">Asynchronous Method Invocation</a></p>
      </li>

      <li>
        <p><a href="../Text/ejb-async.xhtml#GKIEZ">The async Example Application</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="GKKQG"></a><a id="JEETT00460"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_176"><span class="secnum">36.1</span> Asynchronous Method Invocation</h1>

      <p>Session beans can implement <span class="glossaryterm">asynchronous methods</span>, business methods where control is returned to the client by the enterprise bean container before the method is invoked on the session bean instance. Clients may then use the Java SE concurrency API to retrieve the result, cancel the invocation, and check for exceptions. Asynchronous methods are typically used for long-running operations, for processor-intensive tasks, for background tasks, to increase application throughput, or to improve application response time if the method invocation result isn't required immediately.</p>

      <p><a id="sthref1813"></a>When a session bean client invokes a typical non-asynchronous business method, control is not returned to the client until the method has completed. Clients calling asynchronous methods, however, immediately have control returned to them by the enterprise bean container. This allows the client to perform other tasks while the method invocation completes. If the method returns a result, the result is an implementation of the <code>java.util.concurrent.Future&lt;V&gt;</code> interface, where "V" is the result value type. The <code>Future&lt;V&gt;</code> interface defines methods the client may use to check whether the computation is completed, wait for the invocation to complete, retrieve the final result, and cancel the invocation.</p><a id="GKIFJ"></a><a id="JEETT01120"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_177"><span class="secnum">36.1.1</span> <a id="sthref1814"></a><a id="sthref1815"></a>Creating an Asynchronous Business Method</h2>

        <p>Annotate a business method with <code>javax.ejb.Asynchronous</code> to mark that method as an asynchronous method, or apply <code>@Asynchronous</code> at the class level to mark all the business methods of the session bean as asynchronous methods. Session bean methods that expose web services can't be asynchronous.</p>

        <p>Asynchronous methods must return either <code>void</code> or an implementation of the <code>Future&lt;V&gt;</code> interface. Asynchronous methods that return <code>void</code> can't declare application exceptions, but if they return <code>Future&lt;V&gt;</code>, they may declare application exceptions. For example:</p>
        <pre class="oac_no_warn" xml:space="preserve">
@Asynchronous
public Future&lt;String&gt; processPayment(Order order) throws PaymentException { ... }
</pre>

        <p>This method will attempt to process the payment of an order, and return the status as a <code>String</code>. Even if the payment processor takes a long time, the client can continue working, and display the result when the processing finally completes.</p>

        <p>The <code>javax.ejb.AsyncResult&lt;V&gt;</code> class is a concrete implementation of the <code>Future&lt;V&gt;</code> interface provided as a helper class for returning asynchronous results. <code>AsyncResult</code> has a constructor with the result as a parameter, making it easy to create <code>Future&lt;V&gt;</code> implementations. For example, the <code>processPayment</code> method would use <code>AsyncResult</code> to return the status as a <code>String</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve">
@Asynchronous
public Future&lt;String&gt; processPayment(Order order) throws PaymentException {
    ...
    String status = ...;
    return new AsyncResult&lt;String&gt;(status);
}
</pre>

        <p>The result is returned to the enterprise bean container, not directly to the client, and the enterprise bean container makes the result available to the client. The session bean can check whether the client requested that the invocation be cancelled by calling the <code>javax.ejb.SessionContext.wasCancelled</code> method. For example:</p>
        <pre class="oac_no_warn" xml:space="preserve">
@Asynchronous
public Future&lt;String&gt; processPayment(Order order) throws PaymentException {
    ...
    if (SessionContext.wasCancelled()) {
        // clean up
    } else {
        // process the payment
    }
    ...
}
</pre>
      </div><a id="GKIEM"></a><a id="JEETT01121"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_178"><span class="secnum">36.1.2</span> <a id="sthref1816"></a>Calling Asynchronous Methods from Enterprise Bean Clients</h2>

        <p>Session bean clients call asynchronous methods just like non-asynchronous business methods. If the asynchronous method returns a result, the client receives a <code>Future&lt;V&gt;</code> instance as soon as the method is invoked. This instance can be used to retrieve the final result, cancel the invocation, check whether the invocation has completed, check whether any exceptions were thrown during processing, and check whether the invocation was cancelled.</p><a id="GKICM"></a><a id="JEETT00663"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">36.1.2.1</span> <a id="sthref1817"></a>Retrieving the Final Result from an Asynchronous Method Invocation</h3>

          <p>The client may retrieve the result using one of the <code>Future&lt;V&gt;.get</code> methods. If processing hasn't been completed by the session bean handling the invocation, calling one of the <code>get</code> methods will result in the client halting execution until the invocation completes. Use the <code>Future&lt;V&gt;.isDone</code> method to determine whether processing has completed before calling one of the <code>get</code> methods.</p>

          <p>The <code>get()</code> method returns the result as the type specified in the type value of the <code>Future&lt;V&gt;</code> instance. For example, calling <code>Future&lt;String&gt;.get()</code> will return a <code>String</code> object. If the method invocation was cancelled, calls to <code>get()</code> result in a <code>java.util.concurrent.CancellationException</code> being thrown. If the invocation resulted in an exception during processing by the session bean, calls to <code>get()</code> result in a <code>java.util.concurrent.ExecutionException</code> being thrown. The cause of the <code>ExecutionException</code> may be retrieved by calling the <code>ExecutionException.getCause</code> method.</p>

          <p>The <code>get(long timeout, java.util.concurrent.TimeUnit unit)</code> method is similar to the <code>get()</code> method, but allows the client to set a timeout value. If the timeout value is exceeded, a <code>java.util.concurrent.TimeoutException</code> is thrown. See the Javadoc for the <code>TimeUnit</code> class for the available units of time to specify the timeout value.</p>
        </div><a id="GKIDB"></a><a id="JEETT00664"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">36.1.2.2</span> <a id="sthref1818"></a>Cancelling an Asynchronous Method Invocation</h3>

          <p>Call the <code>cancel(boolean mayInterruptIfRunning)</code> method on the <code>Future&lt;V&gt;</code> instance to attempt to cancel the method invocation. The <code>cancel</code> method returns <code>true</code> if the cancellation was successful and <code>false</code> if the method invocation cannot be cancelled.</p>

          <p>When the invocation cannot be cancelled, the <code>mayInterruptIfRunning</code> parameter is used to alert the session bean instance on which the method invocation is running that the client attempted to cancel the invocation. If <code>mayInterruptIfRunning</code> is set to <code>true</code>, calls to <code>SessionContext.wasCancelled</code> by the session bean instance will return <code>true</code>. If <code>mayInterruptIfRunning</code> is to set <code>false</code>, calls to <code>SessionContext.wasCancelled</code> by the session bean instance will return <code>false</code>.</p>

          <p>The <code>Future&lt;V&gt;.isCancelled</code> method is used to check whether the method invocation was cancelled before the asynchronous method invocation completed by calling <code>Future&lt;V&gt;.cancel</code>. The <code>isCancelled</code> method returns <code>true</code> if the invocation was cancelled.</p>
        </div><a id="GKIEV"></a><a id="JEETT00665"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">36.1.2.3</span> <a id="sthref1819"></a>Checking the Status of an Asynchronous Method Invocation</h3>

          <p>The <code>Future&lt;V&gt;.isDone</code> method returns <code>true</code> if the session bean instance completed processing the method invocation. The <code>isDone</code> method returns <code>true</code> if the asynchronous method invocation completed normally, was cancelled, or resulted in an exception. That is, <code>isDone</code> indicates only whether the session bean has completed processing the invocation.</p>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="GKIEZ"></a><a id="JEETT00461"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_179"><span class="secnum">36.2</span> <a id="sthref1820"></a><a id="sthref1821"></a>The async Example Application</h1>

      <p>The <code>async</code> example demonstrates how to define an asynchronous business method on a session bean and call it from a web client. This example contains two modules.</p>

      <ul>
        <li>
          <p>A web application (<code>async-war</code>) that contains a stateless session bean and a JavaServer Faces interface. The <code>MailerBean</code> stateless session bean defines an asynchronous method, <code>sendMessage</code>, which uses the JavaMail API to send an email to an specified email address.</p>
        </li>

        <li>
          <p>An auxiliary Java SE program (<code>async-smtpd</code>) that simulates an SMTP server. This program listens on TCP port 3025 for SMTP requests and prints the email messages to the standard output (instead of delivering them).</p>
        </li>
      </ul>

      <p>The following section describes the architecture of the <code>async-war</code> module.</p><a id="GKIQJ"></a><a id="JEETT01122"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_180"><span class="secnum">36.2.1</span> Architecture of the async-war Module</h2>

        <p>The <code>async-war</code> module consists of a single stateless session bean, <code>MailerBean</code>, and a JavaServer Faces web application front end that uses Facelets tags in XHTML files to display a form for users to enter the email address for the recipient of an email. The status of the email is updated when the email is finally sent.</p>

        <p>The <code>MailerBean</code> session bean injects a JavaMail resource used to send an email message to an address specified by the user. The message is created, modified, and sent using the JavaMail API. The session bean looks like this:</p>
        <pre class="oac_no_warn" xml:space="preserve">
@Named
@Stateless
public class MailerBean {
    @Resource(name="mail/myExampleSession")
    private Session session;
    private static final Logger logger = 
            Logger.getLogger(MailerBean.class.getName());

    @Asynchronous
    public Future&lt;String&gt; sendMessage(String email) {
        String status;
        try {
            Properties properties = new Properties();            properties.put("mail.smtp.port", "3025");            session = Session.getInstance(properties);                        Message message = new MimeMessage(session);
            message.setFrom();
            message.setRecipients(Message.RecipientType.TO,
                    InternetAddress.parse(email, false));
            message.setSubject("Test message from async example");
            message.setHeader("X-Mailer", "JavaMail");
            DateFormat dateFormatter = DateFormat
                    .getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT);
            Date timeStamp = new Date();
            String messageBody = "This is a test message from the async "
                    + "example of the Java EE Tutorial. It was sent on "
                    + dateFormatter.format(timeStamp)
                    + ".";
            message.setText(messageBody);
            message.setSentDate(timeStamp);
            Transport.send(message);
            status = "Sent";
            logger.log(Level.INFO, "Mail sent to {0}", email);
        } catch (MessagingException ex) {
            logger.severe("Error in sending message.");
            status = "Encountered an error: " + ex.getMessage();
            logger.severe(ex.getMessage());
        }
        return new AsyncResult&lt;&gt;(status);
    }
}
</pre>

        <p>The injected JavaMail resource can be configured through the GlassFish Server Administration Console, through a GlassFish Server administrative command, or through a resource configuration file packaged with the application. The resource configuration can be modified at runtime by the GlassFish Server administrator to use a different mail server or transport protocol.</p>

        <p>The web client consists of a Facelets template, <code>template.xhtml</code>; two Facelets clients, <code>index.xhtml</code> and <code>response.xhtml</code>; and a JavaServer Faces managed bean, <code>MailerManagedBean</code>. The <code>index.xhtml</code> file contains a form for the target email address. When the user submits the form, the <code>MailerManagedBean.send</code> method is called. This method uses an injected instance of the <code>MailerBean</code> session bean to call <code>MailerBean.sendMessage</code>. The result is sent to the <code>response.xhtml</code> Facelets view.</p>
      </div>

      <div class="sect2">
        <a id="sthref1822"></a>

        <h2 class="sect2" id="sigil_toc_id_181"><span class="secnum">36.2.2</span> Running the async Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>async</code> example.</p><a id="GKINW"></a><a id="JEETT00211"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">36.2.2.1</span> To Run the async Example Application Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/ejb
</pre>
            </li>

            <li>
              <p>Select the <code>async</code> folder, select <span class="bold">Open Required Projects</span>, and click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="bold">Projects</span> tab, right-click the <code>async-smtpd</code> project and select <span class="bold">Run</span>.</p>

              <p>The SMTP server simulator starts accepting connections. The <span class="bold">async-smptd</span> output tab shows the following message:</p>
              <pre class="oac_no_warn" xml:space="preserve">
[Test SMTP server listening on port 3025]
</pre>
            </li>

            <li>
              <p>In the <span class="bold">Projects</span> tab, right-click the <code>async-war</code> project and select <span class="bold">Build</span>.</p>

              <p>This command configures the JavaMail resource using a GlassFish Server administrative command and builds, packages, and deploys the <code>async-war</code> module.</p>
            </li>

            <li>
              <p>Open the following URL in a web browser window:</p>
              <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/async-war
</pre>
            </li>

            <li>
              <p>In the web browser window, enter an email address and click <span class="bold">Send email</span>.</p>

              <p>The <code>MailerBean</code> stateless bean uses the JavaMail API to deliver an email to the SMTP server simulator. The <span class="bold">async-smptd</span> output window in NetBeans IDE shows the resulting email message, including its headers.</p>
            </li>

            <li>
              <p>To stop the SMTP server simulator, click the X button on the right side of the status bar in NetBeans IDE.</p>
            </li>

            <li>
              <p>Delete the JavaMail session resource.</p>

              <ol>
                <li>
                  <p>In the <span class="bold">Services</span> tab, expand the <span class="bold">Servers</span> node, then expand the <span class="bold">GlassFish Server</span> server node.</p>
                </li>

                <li>
                  <p>Expand the <span class="bold">Resources</span> node, then expand the <span class="bold">JavaMail Sessions</span> node.</p>
                </li>

                <li>
                  <p>Right-click <span class="bold">mail/myExampleSession</span> and select <span class="bold">Unregister</span>.</p>
                </li>
              </ol>
            </li>
          </ol>
        </div><a id="GKRFB"></a><a id="JEETT00212"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">36.2.2.2</span> To Run the async Example Application Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/ejb/async/async-smtpd/
</pre>
            </li>

            <li>
              <p>Enter the following command to build and package the SMTP server simulator:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>
            </li>

            <li>
              <p>Enter the following command to start the STMP server simulator:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn exec:java
</pre>

              <p>The following message appears:</p>
              <pre class="oac_no_warn" xml:space="preserve">
[Test SMTP server listening on port 3025]
</pre>

              <p>Keep this terminal window open.</p>
            </li>

            <li>
              <p>In a new terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/ejb/async/async-war
</pre>
            </li>

            <li>
              <p>Enter the following command to configure the JavaMail resource and to build, package, and deploy the <code>async-war</code> module:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>
            </li>

            <li>
              <p>Open the following URL in a web browser window:</p>
              <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/async-war
</pre>
            </li>

            <li>
              <p>In the web browser window, enter an email address and click <span class="bold">Send email</span>.</p>

              <p>The <code>MailerBean</code> stateless bean uses the JavaMail API to deliver an email to the SMTP server simulator. The resulting email message appears on the first terminal window, including its headers.</p>
            </li>

            <li>
              <p>To stop the SMTP server simulator, close the terminal window in which you issued the command to start the STMP server simulator.</p>
            </li>

            <li>
              <p>To delete the JavaMail session resource, type the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
asadmin delete-javamail-resource mail/myExampleSession
</pre>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
