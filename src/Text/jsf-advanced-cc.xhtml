<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="GKHXA"></a><a id="JEETT00075"></a>

    <h1 class="chapter"><span class="secnum">14</span> <a id="sthref844"></a><a id="sthref845"></a>Composite Components: Advanced Topics and an Example</h1>

    <p>This chapter describes the advanced features of composite components in JavaServer Faces technology.</p>

    <p>A composite component is a special type of JavaServer Faces template that acts as a component. If you are new to composite components, see <a href="../Text/jsf-facelets.xhtml#GIQZR">Composite Components</a> before you proceed with this chapter.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/jsf-advanced-cc.xhtml#GKHWV">Attributes of a Composite Component</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-advanced-cc.xhtml#GKHUO">Invoking a Managed Bean</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-advanced-cc.xhtml#GKHWO">Validating Composite Component Values</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-advanced-cc.xhtml#GKHVN">The compositecomponentexample Example Application</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="GKHWV"></a><a id="JEETT00374"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">14.1</span> <a id="sthref846"></a>Attributes of a Composite Component</h1>

      <p>You define an attribute of a composite component by using the <code>composite:attribute</code> tag. <a href="../Text/jsf-advanced-cc.xhtml#GKHVF">Table 14-1</a> lists the commonly used attributes of this tag.</p>

      <div class="tblhruleformal">
        <a id="sthref847"></a><a id="GKHVF"></a>

        <p class="titleintable">Table 14-1 Commonly Used Attributes of the composite:attribute Tag</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the commonly used attributes of the composite:attribute tag." title="Commonly Used Attributes of the composite:attribute Tag" width="100%">
          <col width="26%" />
          <col width="*" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t2" valign="bottom">Attribute</th>

              <th align="left" id="r1c2-t2" valign="bottom">Description</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r2c1-t2">
                <p><a id="sthref848"></a><code>name</code></p>
              </td>

              <td align="left" headers="r2c1-t2 r1c2-t2">
                <p>Specifies the name of the composite component attribute to be used in the using page. Alternatively, the <code>name</code> attribute can specify standard event handlers such as <code>action</code>, <code>actionListener</code>, and managed bean.</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r3c1-t2">
                <p><a id="sthref849"></a><code>default</code></p>
              </td>

              <td align="left" headers="r3c1-t2 r1c2-t2">
                <p>Specifies the default value of the composite component attribute.</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r4c1-t2">
                <p><a id="sthref850"></a><code>required</code></p>
              </td>

              <td align="left" headers="r4c1-t2 r1c2-t2">
                <p>Specifies whether it is mandatory to provide a value for the attribute.</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r5c1-t2">
                <p><a id="sthref851"></a><code>method-signature</code></p>
              </td>

              <td align="left" headers="r5c1-t2 r1c2-t2">
                <p>Specifies a subclass of <code>java.lang.Object</code> as the type of the composite component's attribute. The <code>method-signature</code> element declares that the composite component attribute is a method expression. The <code>type</code> attribute and the <code>method-signature</code> attribute are mutually exclusive. If you specify both, <code>method-signature</code> is ignored. The default type of an attribute is <code>java.lang.Object.</code></p>

                <p><span class="bold">Note:</span> Method expressions are similar to value expressions, but rather than supporting the dynamic retrieval and setting of properties, method expressions support the invocation of a method of an arbitrary object, passing a specified set of parameters and returning the result from the called method (if any).</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r6c1-t2">
                <p><a id="sthref852"></a><code>type</code></p>
              </td>

              <td align="left" headers="r6c1-t2 r1c2-t2">
                <p>Specifies a fully qualified class name as the type of the attribute. The <code>type</code> attribute and the <code>method-signature</code> attribute are mutually exclusive. If you specify both, <code>method-signature</code> is ignored. The default type of an attribute is <code>java.lang.Object.</code></p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>

      <p>The following code snippet defines a composite component attribute and assigns it a default value:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;composite:attribute name="username" default="admin"/&gt;</pre>

      <p>The following code snippet uses the <code>method-signature</code> element:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;composite:attribute name="myaction"
                     method-signature="java.lang.String action()"/&gt;</pre>

      <p>The following code snippet uses the <code>type</code> element:</p>
      <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;composite:attribute name="dateofjoining" type="java.util.Date"/&gt;</pre>
    </div>
  </div>

  <div class="ind">
    <a id="GKHUO"></a><a id="JEETT00375"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">14.2</span> <a id="sthref853"></a><a id="sthref854"></a>Invoking a Managed Bean</h1>

      <p>To enable a composite component to handle server-side data, you can invoke a managed bean in one of the following ways.</p>

      <ul>
        <li>
          <p>Pass the reference of the managed bean to the composite component.</p>
        </li>

        <li>
          <p>Directly use the properties of the managed bean.</p>
        </li>
      </ul>

      <p>The example application described in <a href="../Text/jsf-advanced-cc.xhtml#GKHVN">The compositecomponentexample Example Application</a> shows how to use a managed bean with a composite component by passing the reference of the managed bean to the component.</p>
    </div>
  </div>

  <div class="ind">
    <a id="GKHWO"></a><a id="JEETT00376"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">14.3</span> <a id="sthref855"></a><a id="sthref856"></a>Validating Composite Component Values</h1>

      <p>JavaServer Faces provides the following tags for validating values of input components. These tags can be used with the <code>composite:valueHolder</code> or the <code>composite:editableValueHolder</code> tag.</p>

      <p><a href="../Text/jsf-advanced-cc.xhtml#GKHVG">Table 14-2</a> lists commonly used validator tags. See <a href="../Text/jsf-page-core.xhtml#BNATC">Using the Standard Validators</a> for details and a complete list.</p>

      <div class="tblhruleformal">
        <a id="sthref857"></a><a id="GKHVG"></a>

        <p class="titleintable">Table 14-2 Validator Tags</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the validator tags available for composite components." title="Validator Tags" width="100%">
          <col width="27%" />
          <col width="*" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t3" valign="bottom">Tag Name</th>

              <th align="left" id="r1c2-t3" valign="bottom">Description</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r2c1-t3">
                <p><a id="sthref858"></a><code>f:validateBean</code></p>
              </td>

              <td align="left" headers="r2c1-t3 r1c2-t3">
                <p>Delegates the validation of the local value to the Bean Validation API.</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r3c1-t3">
                <p><a id="sthref859"></a><code>f:validateRegex</code></p>
              </td>

              <td align="left" headers="r3c1-t3 r1c2-t3">
                <p>Uses the <code>pattern</code> attribute to validate the wrapping component. The entire pattern is matched against the <code>String</code> value of the component. If it matches, it is valid.</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r4c1-t3">
                <p><a id="sthref860"></a><code>f:validateRequired</code></p>
              </td>

              <td align="left" headers="r4c1-t3 r1c2-t3">
                <p>Enforces the presence of a value. Has the same effect as setting the <code>required</code> element of a composite component's attribute to <code>true</code>.</p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="GKHVN"></a><a id="JEETT00377"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">14.4</span> <a id="sthref861"></a><a id="sthref862"></a>The compositecomponentexample Example Application</h1>

      <p>The <code>compositecomponentexample</code> application creates a composite component that accepts a name (or any other string). The component interacts with a managed bean that calculates whether the letters in the name, if converted to numeric values, add up to a prime number. The component displays the sum of the letter values and reports whether it is or is not prime.</p>

      <p>The <code>compositecomponentexample</code> application has a composite component file, a using page, and a managed bean.</p>

      <p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/web/jsf/compositecomponentexample/</code> directory.</p><a id="GKHUU"></a><a id="JEETT00974"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">14.4.1</span> The Composite Component File</h2>

        <p>The composite component file is an XHTML file, <code>/web/resources/ezcomp/PrimePanel.xhtml</code>. It has a <code>composite:interface</code> section that declares the labels for the name and a command button. It also declares a managed bean, which defines properties for the name.</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;composite:interface&gt;
    &lt;composite:attribute name="namePrompt" 
                         default="Name, word, or phrase: "/&gt;
    &lt;composite:attribute name="calcButtonText" default="Calculate"/&gt;
    &lt;composite:attribute name="calcAction"
                         method-signature="java.lang.String action()"/&gt;
    &lt;composite:attribute name="primeBean"/&gt;
    &lt;composite:editableValueHolder name="nameVal" targets="form:name"/&gt;
&lt;/composite:interface&gt;</pre>

        <p>The composite component implementation accepts the input value for the <code>name</code> property of the managed bean. The <code>h:outputStylesheet</code> tag specifies the stylesheet as a relocatable resource. The implementation then specifies the format of the output, using properties of the managed bean, as well as the format of error messages. The sum value is rendered only after it has been calculated, and the report of whether the sum is prime or not is rendered only if the input value is validated.</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;composite:implementation&gt;
    &lt;h:form id="form"&gt;
        &lt;h:outputStylesheet library="css" name="default.css" 
                            target="head"/&gt;
        &lt;h:panelGrid columns="2" role="presentation"&gt;
            &lt;h:outputLabel for="name"
                           value="#{cc.attrs.namePrompt}"/&gt;
            &lt;h:inputText id="name"
                         size="45"
                         value="#{cc.attrs.primeBean.name}" 
                         required="true"/&gt;
        &lt;/h:panelGrid&gt;        
        &lt;p&gt;
            &lt;h:commandButton id="calcButton" 
                             value="#{cc.attrs.calcButtonText}"
                             action="#{cc.attrs.calcAction}"&gt;
                &lt;f:ajax execute="name" render="outputGroup"/&gt;
            &lt;/h:commandButton&gt;
        &lt;/p&gt;
       
       &lt;h:panelGroup id="outputGroup" layout="block"&gt;
            &lt;p&gt;
                &lt;h:outputText id="result" style="color:blue"
                              rendered="#{cc.attrs.primeBean.totalSum gt 0}"
                              value="Sum is #{cc.attrs.primeBean.totalSum}" /&gt;
            &lt;/p&gt;
            &lt;p&gt;
                &lt;h:outputText id="response" style="color:blue"
                              value="#{cc.attrs.primeBean.response}"
                              rendered="#{!facesContext.validationFailed}"/&gt;
                &lt;h:message id="errors1" 
                           showSummary="true" 
                           showDetail="false"
                           style="color: #d20005;
                           font-family: 'New Century Schoolbook', serif;
                           font-style: oblique;
                           text-decoration: overline" 
                           for="name"/&gt;
            &lt;/p&gt;
        &lt;/h:panelGroup&gt;
    &lt;/h:form&gt;
&lt;/composite:implementation&gt;</pre>
      </div><a id="GKHVX"></a><a id="JEETT00975"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">14.4.2</span> The Using Page</h2>

        <p>The using page in this example application, <code>web/index.xhtml</code>, is an XHTML file that invokes the <code>PrimePanel.xhtml</code> composite component file along with the managed bean. It validates the user's input.</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;div id="compositecomponent"&gt;
    &lt;ez:PrimePanel primeBean="#{primeBean}"  
                   calcAction="#{primeBean.calculate}"&gt;
    &lt;/ez:PrimePanel&gt;
&lt;/div&gt;</pre>
      </div><a id="GKHVQ"></a><a id="JEETT00976"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">14.4.3</span> The Managed Bean</h2>

        <p>The managed bean, <code>PrimeBean.java</code>, defines a method called <code>calculate</code>, which performs the calculations on the input string and sets properties accordingly. The bean first creates an array of prime numbers. It calculates the sum of the letters in the string, with <code>'a'</code> equal to 1 and <code>'z'</code> equal to 26, and determines whether the value can be found in the array of primes. An uppercase letter in the input string has the same value as its lowercase equivalent.</p>

        <p>The bean specifies the minimum and maximum size of the <code>name</code> string, which is enforced by the Bean Validation <code>@Size</code> constraint. The bean uses the <code>@Model</code> annotation, a shortcut for <code>@Named</code> and <code>@RequestScoped</code>, as described in Step <a href="../Text/webapp.xhtml#CHDCABHC">7</a> of <a href="../Text/webapp.xhtml#GJWTV">To View the hello1 Web Module Using NetBeans IDE</a>.</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Model
public class PrimeBean implements Serializable {
    ...
    @Size(min=1, max=45)
    private String name;
    ...

    public String calculate() {
        ...
    }
}</pre>
      </div><a id="GLECV"></a><a id="JEETT00977"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">14.4.4</span> Running the compositecomponentexample Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>compositecomponentexample</code> example.</p><a id="GKHVC"></a><a id="JEETT00173"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">14.4.4.1</span> To Build, Package, and Deploy the compositecomponentexample Example Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/web/jsf</pre>
            </li>

            <li>
              <p>Select the <code>compositecomponentexample</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>compositecomponentexample</code> project and select <span class="gui-object-action">Build</span>.</p>

              <p>This command builds and deploys the application.</p>
            </li>
          </ol>
        </div><a id="GLEAE"></a><a id="JEETT00174"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">14.4.4.2</span> To Build, Package, and Deploy the compositecomponentexample Example Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/web/jsf/compositecomponentexample/</pre>
            </li>

            <li>
              <p>Enter the following command to build and deploy the application:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>
          </ol>
        </div><a id="GLEEU"></a><a id="JEETT00175"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">14.4.4.3</span> To Run the compositecomponentexample Example</h3>

          <ol>
            <li>
              <p>In a web browser, enter the following URL:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">http://localhost:8080/compositecomponentexample</pre>
            </li>

            <li>
              <p>On the page that appears, enter a string in the <span class="gui-object-action">Name, word, or phrase</span> field, then click <span class="gui-object-action">Calculate</span>.</p>

              <p>The page reports the sum of the letters and whether the sum is prime. A validation error is reported if no value is entered or if the string contains more than 45 characters.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
