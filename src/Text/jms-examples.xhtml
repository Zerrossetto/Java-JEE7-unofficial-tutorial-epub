<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="BNCGV"></a><a id="JEETT00111"></a>

    <h1 class="chapter"><span class="secnum">46</span> <a id="sthref2375"></a>Java Message Service Examples</h1>

    <p>This chapter provides examples that show how to use the JMS API in various kinds of Java EE applications. It covers the following topics:</p>

    <ul>
      <li>
        <p><a href="../Text/jms-examples.xhtml#BABEFBHJ">Overview of the JMS Examples</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BNCFA">Writing Simple JMS Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#GIWFH">Writing More Advanced JMS Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BABGEFHC">Writing High Performance and Scalable JMS Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BABBABFC">Sending and Receiving Messages Using a Simple Web Application</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BNCGW">Sending Messages from a Session Bean to an MDB</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BNCHF">Using an Entity to Join Messages from Two MDBs</a></p>
      </li>

      <li>
        <p><a href="../Text/jms-examples.xhtml#BABDFDJC">Using NetBeans IDE to Create JMS Resources</a></p>
      </li>
    </ul>

    <p>A final section covers <a href="../Text/jms-examples.xhtml#BABDFDJC">Using NetBeans IDE to Create JMS Resources</a>.</p>

    <p>The examples are in the <span class="variable">tut-install</span><code>/examples/jms/</code> directory.</p>

    <p>The steps to build and run each example are as follows.</p>

    <ol>
      <li>
        <p>Use NetBeans IDE or Maven to compile, package, and in some cases deploy the example.</p>
      </li>

      <li>
        <p>Use NetBeans IDE, Maven, or the <code>appclient</code> command to run the application client, or use the browser to run the web application examples.</p>
      </li>
    </ol>

    <p>Before you deploy or run the examples, you need to create resources for them. Some examples have a <code>glassfish-resources.xml</code> file that is used to create resources for that example and others. You can use the <code>asadmin</code> command to create the resources.</p>

    <p>To use the <code>asadmin</code> and <code>appclient</code> commands, you need to put the GlassFish Server <code>bin</code> directories in your command path, as described in <a href="../Text/usingexamples.xhtml#GEXBC">SDK Installation Tips</a>.</p>
  </div>

  <div class="ind">
    <a id="BABEFBHJ"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.1</span> Overview of the JMS Examples</h1>

      <p>The following tables list the examples used in this chapter, describe what they do, and link to the section that describes them fully. The example directory for each example is relative to the <span class="variable">tut-install</span><code>/examples/jms/</code> directory.</p>

      <div class="tblhruleformal">
        <a id="sthref2376"></a><a id="sthref2377"></a>

        <p class="titleintable">Table 46-1 JMS Examples That Show the Use of Java EE Application Clients</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the JMS examples that use application clients." title="JMS Examples That Show the Use of Java EE Application Clients" width="100%">
          <col width="37%" />
          <col width="*" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t2" valign="bottom">Example Directory</th>

              <th align="left" id="r1c2-t2" valign="bottom">Description</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r2c1-t2">
                <p><code>simple/producer</code></p>
              </td>

              <td align="left" headers="r2c1-t2 r1c2-t2">
                <p>Using an application client to send messages; see <a href="../Text/jms-examples.xhtml#BABIHCAE">Sending Messages</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r3c1-t2">
                <p><code>simple/synchconsumer</code></p>
              </td>

              <td align="left" headers="r3c1-t2 r1c2-t2">
                <p>Using an application client to receive messages synchronously; see <a href="../Text/jms-examples.xhtml#BNCFB">Receiving Messages Synchronously</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r4c1-t2">
                <p><code>simple/asynchconsumer</code></p>
              </td>

              <td align="left" headers="r4c1-t2 r1c2-t2">
                <p>Using an application client to receive messages asynchronously; see <a href="../Text/jms-examples.xhtml#BNCFH">Using a Message Listener for Asynchronous Message Delivery</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r5c1-t2">
                <p><code>simple/messagebrowser</code></p>
              </td>

              <td align="left" headers="r5c1-t2 r1c2-t2">
                <p>Using an application client to use a <code>QueueBrowser</code> to browse a queue; see <a href="../Text/jms-examples.xhtml#BNCFL">Browsing Messages on a Queue</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r6c1-t2">
                <p><code>simple/clientackconsumer</code></p>
              </td>

              <td align="left" headers="r6c1-t2 r1c2-t2">
                <p>Using an application client to acknowledge messages received synchronously; see <a href="../Text/jms-examples.xhtml#BNCFX">Acknowledging Messages</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r7c1-t2">
                <p><code>durablesubscriptionexample</code></p>
              </td>

              <td align="left" headers="r7c1-t2 r1c2-t2">
                <p>Using an application client to create a durable subscription on a topic; see <a href="../Text/jms-examples.xhtml#BNCGG">Using Durable Subscriptions</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r8c1-t2">
                <p><code>transactedexample</code></p>
              </td>

              <td align="left" headers="r8c1-t2 r1c2-t2">
                <p>Using an application client to send and receive messages in local transactions (also uses request-reply messaging); see <a href="../Text/jms-examples.xhtml#BNCGJ">Using Local Transactions</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r9c1-t2">
                <p><code>shared/sharedconsumer</code></p>
              </td>

              <td align="left" headers="r9c1-t2 r1c2-t2">
                <p>Using an application client to create shared nondurable topic subscriptions; see <a href="../Text/jms-examples.xhtml#BABIBEAC">Using Shared Nondurable Subscriptions</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r10c1-t2">
                <p><code>shared/shareddurableconsumer</code></p>
              </td>

              <td align="left" headers="r10c1-t2 r1c2-t2">
                <p>Using an application client to create shared durable topic subscriptions; see <a href="../Text/jms-examples.xhtml#BABEJBHA">Using Shared Durable Subscriptions</a></p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>

      <div class="tblhruleformal">
        <a id="sthref2378"></a><a id="sthref2379"></a>

        <p class="titleintable">Table 46-2 JMS Examples That Show the Use of Java EE Web and EJB Components</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the JMS examples that use Java EE Web and EJB components." title="JMS Examples That Show the Use of Java EE Web and EJB Components" width="100%">
          <col width="27%" />
          <col width="*" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t3" valign="bottom">Example Directory</th>

              <th align="left" id="r1c2-t3" valign="bottom">Description</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r2c1-t3">
                <p><code>websimplemessage</code></p>
              </td>

              <td align="left" headers="r2c1-t3 r1c2-t3">
                <p>Using managed beans to send messages and to receive messages synchronously; see <a href="../Text/jms-examples.xhtml#BABBABFC">Sending and Receiving Messages Using a Simple Web Application</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r3c1-t3">
                <p><code>simplemessage</code></p>
              </td>

              <td align="left" headers="r3c1-t3 r1c2-t3">
                <p>Using an application client to send messages, and using a message-driven bean to receive messages asynchronously; see <a href="../Text/jms-examples.xhtml#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r4c1-t3">
                <p><code>clientsessionmdb</code></p>
              </td>

              <td align="left" headers="r4c1-t3 r1c2-t3">
                <p>Using a session bean to send messages, and using a message-driven bean to receive messages; see <a href="../Text/jms-examples.xhtml#BNCGW">Sending Messages from a Session Bean to an MDB</a></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t3" id="r5c1-t3">
                <p><code>clientmdbentity</code></p>
              </td>

              <td align="left" headers="r5c1-t3 r1c2-t3">
                <p>Using an application client, two message-driven beans, and JPA persistence to create a simple HR application; see <a href="../Text/jms-examples.xhtml#BNCHF">Using an Entity to Join Messages from Two MDBs</a></p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNCFA"></a><a id="JEETT00554"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.2</span> <a id="sthref2380"></a><a id="sthref2381"></a>Writing Simple JMS Applications</h1>

      <p>This section shows how to create, package, and run simple JMS clients that are packaged as application clients. The clients demonstrate the basic tasks a JMS application must perform:</p>

      <ul>
        <li>
          <p>Creating a <code>JMSContext</code></p>
        </li>

        <li>
          <p>Creating message producers and consumers</p>
        </li>

        <li>
          <p>Sending and receiving messages</p>
        </li>
      </ul>

      <p>Each example uses two clients: one that sends messages and one that receives them. You can run the clients in two terminal windows.</p>

      <p>When you write a JMS client to run in an enterprise bean application, you use many of the same methods in much the same sequence as for an application client. However, there are some significant differences. <a href="../Text/jms-cocepts.xhtml#BNCGL">Using the JMS API in Java EE Applications</a> describes these differences, and this chapter provides examples that illustrate them.</p>

      <p>The examples for this section are in the <span class="variable">tut-install</span><code>/examples/jms/simple/</code> directory, under the following subdirectories:</p><br />
      <code>producer/</code><br />
      <code>synchconsumer/</code><br />
      <code>asynchconsumer/</code><br />
      <code>messagebrowser/</code><br />
      <code>clientackconsumer/</code><br />

      <p>Before running the examples, you need to start GlassFish Server and create administered objects.</p><a id="BNCFD"></a><a id="JEETT00823"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.1</span> Starting the JMS Provider</h2>

        <p>When you use GlassFish Server, your JMS provider is GlassFish Server. Start the server as described in <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>.</p>
      </div><a id="GKTJS"></a><a id="JEETT00824"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.2</span> <a id="sthref2382"></a><a id="sthref2383"></a>Creating JMS Administered Objects</h2>

        <p>This example uses the following JMS administered objects:</p>

        <ul>
          <li>
            <p>A connection factory</p>
          </li>

          <li>
            <p>Two destination resources: a topic and a queue</p>
          </li>
        </ul>

        <p>Before you run the applications, you can use the <code>asadmin add-resources</code> command to create needed JMS resources, specifying as the argument a file named <code>glassfish-resources.xml</code>. This file can be created in any project using NetBeans IDE, although you can also create it by hand. A file for the needed resources is present in the <code>jms/simple/producer/src/main/setup/</code> directory.</p>

        <p>The JMS examples use a connection factory with the logical JNDI lookup name <code>java:comp/DefaultJMSConnectionFactory</code>, which is preconfigured in GlassFish Server.</p>

        <p>You can also use the <code>asadmin create-jms-resource</code> command to create resources, the <code>asadmin list-jms-resources</code> command to display their names, and the <code>asadmin delete-jms-resource</code> command to remove them.</p><a id="BABHEFCB"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.2.1</span> To Create Resources for the Simple Examples</h3>

          <p>A <code>glassfish-resources.xml</code> file in one of the Maven projects can create all the resources needed for the simple examples.</p>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a command window, go to the <code>Producer</code> example.</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/simple/producer</pre>
            </li>

            <li>
              <p>Create the resources using the <code>asadmin add-resources</code> command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin add-resources src/main/setup/glassfish-resources.xml</pre>
            </li>

            <li>
              <p>Verify the creation of the resources:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin list-jms-resources</pre>

              <p>The command lists the two destinations and connection factory specified in the <code>glassfish-resources.xml</code> file in addition to the platform default connection factory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">jms/MyQueue
jms/MyTopic
jms/__defaultConnectionFactory
Command list-jms-resources executed successfully.</pre>

              <p>In GlassFish Server, the Java EE <code>java:comp/DefaultJMSConnectionFactory</code> resource is mapped to a connection factory named <code>jms/__defaultConnectionFactory</code>.</p>
            </li>
          </ol>
        </div>
      </div><a id="BABEEABE"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.3</span> Building All the Simple Examples</h2>

        <p><a id="sthref2384"></a>To run the simple examples using GlassFish Server, package each example in an application client JAR file. The application client JAR file requires a manifest file, located in the <code>src/main/java/META-INF/</code> directory for each example, along with the <code>.class</code> file.</p>

        <p>The <code>pom.xml</code> file for each example specifies a plugin that creates an application client JAR file. You can build the examples using either NetBeans IDE or Maven.</p>

        <div class="sect3">
          <a id="sthref2385"></a>

          <h3 class="sect3"><span class="secnum">46.2.3.1</span> To Build All the Simple Examples Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms</pre>
            </li>

            <li>
              <p>Expand the <code>jms</code> node and select the <code>simple</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span> to open all the simple examples.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>simple</code> project and select <span class="gui-object-action">Build</span> to build all the examples.</p>

              <p>This command places the application client JAR files in the <code>target</code> directories for the examples.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2386"></a>

          <h3 class="sect3"><span class="secnum">46.2.3.2</span> To Build All the Simple Examples Using Maven</h3>

          <ol>
            <li>
              <p>In a terminal window, go to the <code>simple</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/simple/</pre>
            </li>

            <li>
              <p>Enter the following command to build all the projects:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>

              <p>This command places the application client JAR files in the <code>target</code> directories for the examples.</p>
            </li>
          </ol>
        </div>
      </div><a id="BABIHCAE"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.4</span> <a id="sthref2387"></a><a id="sthref2388"></a>Sending Messages</h2>

        <p>This section describes how to use a client to send messages. The <code>Producer.java</code> client will send messages in all of these examples.</p>

        <p>The general steps this example performs are as follows.</p>

        <ol>
          <li>
            <p>Inject resources for the administered objects used by the example.</p>
          </li>

          <li>
            <p>Accept and verify command-line arguments. You can use this example to send any number of messages to either a queue or a topic, so you specify the destination type and the number of messages on the command line when you run the program.</p>
          </li>

          <li>
            <p>Create a <code>JMSContext</code>, then send the specified number of text messages in the form of strings, as described in <a href="../Text/jms-concepts.xhtml#BNCEW">Message Bodies</a>.</p>
          </li>

          <li>
            <p>Send a final message of type <code>Message</code> to indicate that the consumer should expect no more messages.</p>
          </li>

          <li>
            <p>Catch any exceptions.</p>
          </li>
        </ol>

        <div class="sect3">
          <a id="sthref2389"></a>

          <h3 class="sect3"><span class="secnum">46.2.4.1</span> The Producer.java Client</h3>

          <p>The sending client, <code>Producer.java</code>, performs the following steps.</p>

          <ol>
            <li>
              <p>Injects resources for a connection factory, queue, and topic:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;
@Resource(lookup = "jms/MyQueue")
private static Queue queue;
@Resource(lookup = "jms/MyTopic")
private static Topic topic;</pre>
            </li>

            <li>
              <p>Retrieves and verifies command-line arguments that specify the destination type and the number of arguments:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">final int NUM_MSGS;
String destType = args[0];
System.out.println("Destination type is " + destType);
if ( ! ( destType.equals("queue") || destType.equals("topic") ) ) { 
    System.err.println("Argument must be \"queue\" or " + "\"topic\"");
    System.exit(1);
}
if (args.length == 2){ 
    NUM_MSGS = (new Integer(args[1])).intValue();
} else { 
    NUM_MSGS = 1;
}
</pre>

              <div>
                <br />
              </div>
            </li>

            <li>
              <p>Assigns either the queue or the topic to a destination object, based on the specified destination type:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination dest = null;
try { 
    if (destType.equals("queue")) { 
        dest = (Destination) queue; 
    } else { 
        dest = (Destination) topic; 
    }
} catch (Exception e) {
    System.err.println("Error setting destination: " + e.toString()); 
    System.exit(1);
}</pre>
            </li>

            <li>
              <p>Within a <code>try</code>-with-resources block, creates a <code>JMSContext</code>:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">try (JMSContext context = connectionFactory.createContext();) {</pre>
            </li>

            <li>
              <p>Sets the message count to zero, then creates a <code>JMSProducer</code> and sends one or more messages to the destination and increments the count. Messages in the form of strings are of the <code>TextMessage</code> message type:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">    int count = 0;
    for (int i = 0; i &lt; NUM_MSGS; i++) { 
        String message = "This is message " + (i + 1) 
                + " from producer";
        // Comment out the following line to send many messages
        System.out.println("Sending message: " + message); 
        context.createProducer().send(dest, message);
        count += 1;
    }
    System.out.println("Text messages sent: " + count);</pre>
            </li>

            <li>
              <p>Sends an empty control message to indicate the end of the message stream:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">    context.createProducer().send(dest, context.createMessage());</pre>

              <p>Sending an empty message of no specified type is a convenient way for an application to indicate to the consumer that the final message has arrived.</p>
            </li>

            <li>
              <p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">} catch (Exception e) {
    System.err.println("Exception occurred: " + e.toString());
    System.exit(1);
}
System.exit(0);</pre>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2390"></a>

          <h3 class="sect3"><span class="secnum">46.2.4.2</span> To Run the Producer Client</h3>

          <p>You can run the client using the <code>appclient</code> command. The <code>Producer</code> client takes one or two command-line arguments: a destination type and, optionally, a number of messages. If you do not specify a number of messages, the client sends one message.</p>

          <p>You will use the client to send three messages to a queue.</p>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>) and that you have created resources and built the simple JMS examples (see <a href="../Text/jms-examples.xhtml#GKTJS">Creating JMS Administered Objects</a> and <a href="../Text/jms-examples.xhtml#BABEEABE">Building All the Simple Examples</a>).</p>
            </li>

            <li>
              <p>In a terminal window, go to the <code>producer</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd producer</pre>
            </li>

            <li>
              <p>Run the <code>Producer</code> program, sending three messages to the queue:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar queue 3</pre>

              <p>The output of the program looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3</pre>

              <p>The messages are now in the queue, waiting to be received.</p>

              <div align="center">
                <div class="inftblnote">
                  <br />

                  <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
                    <tbody>
                      <tr>
                        <td align="left">
                          <p class="notep1">Note:</p>

                          <p>When you run an application client, the command may take a long time to complete.</p>
                        </td>
                      </tr>
                    </tbody>
                  </table><br />
                </div>
              </div>
            </li>
          </ol>
        </div>
      </div><a id="BNCFB"></a><a id="JEETT01291"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.5</span> <a id="sthref2391"></a><a id="sthref2392"></a><a id="sthref2393"></a>Receiving Messages Synchronously</h2>

        <p>This section describes the receiving client, which uses the <code>receive</code> method to consume messages synchronously. This section then explains how to run the clients using GlassFish Server.</p><a id="BNCFC"></a><a id="JEETT00822"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.5.1</span> The SynchConsumer.java Client</h3>

          <p>The receiving client, <code>SynchConsumer.java</code>, performs the following steps.</p>

          <ol>
            <li>
              <p>Injects resources for a connection factory, queue, and topic.</p>
            </li>

            <li>
              <p>Assigns either the queue or the topic to a destination object, based on the specified destination type.</p>
            </li>

            <li>
              <p>Within a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
            </li>

            <li>
              <p>Creates a <code>JMSConsumer</code>, starting message delivery:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">consumer = context.createConsumer(dest);</pre>
            </li>

            <li>
              <p>Receives the messages sent to the destination until the end-of-message-stream control message is received:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">int count = 0;
while (true) {
    Message m = consumer.receive(1000); 
    if (m != null) { 
        if (m instanceof TextMessage) { 
            System.out.println(
                    "Reading message: " + m.getBody(String.class));
            count += 1; 
        } else { 
            break; 
        } 
    }
}
System.out.println("Messages received: " + count);</pre>

              <p>Because the control message is not a <code>TextMessage</code>, the receiving client terminates the <code>while</code> loop and stops receiving messages after the control message arrives.</p>
            </li>

            <li>
              <p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed.</p>
            </li>
          </ol>

          <p>The <code>SynchConsumer</code> client uses an indefinite <code>while</code> loop to receive messages, calling <code>receive</code> with a timeout argument.</p>
        </div><a id="BNCFG"></a><a id="JEETT00825"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.5.2</span> To Run the SynchConsumer and Producer Clients</h3>

          <p>You can run the client using the <code>appclient</code> command. The <code>SynchConsumer</code> client takes one command-line argument, the destination type.</p>

          <p>These steps show how to receive and send messages synchronously using both a queue and a topic. The steps assume you already ran the <code>Producer</code> client and have three messages waiting in the queue.</p>

          <ol>
            <li>
              <p>In the same terminal window where you ran <code>Producer</code>, go to the <code>synchconsumer</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd ../synchconsumer</pre>
            </li>

            <li>
              <p>Run the <code>SynchConsumer</code> client, specifying the queue:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar queue</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Messages received: 3</pre>
            </li>

            <li>
              <p>Now try running the clients in the opposite order. Run the <code>SynchConsumer</code> client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar queue</pre>

              <p>The client displays the destination type and then waits for messages.</p>
            </li>

            <li>
              <p>Open a new terminal window and run the <code>Producer</code> client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd tut-install/jms/simple/producer
appclient -client target/producer.jar queue 3<br /></pre>

              <p>When the messages have been sent, the <code>SynchConsumer</code> client receives them and exits.</p>
            </li>

            <li>
              <p>Now run the <code>Producer</code> client using a topic instead of a queue:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 3</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is topic
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3</pre>
            </li>

            <li>
              <p>Now, in the other terminal window, run the <code>SynchConsumer</code> client using the topic:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar topic</pre>

              <p>The result, however, is different. Because you are using a subscription on a topic, messages that were sent before you created the subscription on the topic will not be added to the subscription and delivered to the consumer. (See <a href="../Text/jms-concepts.xhtml#BNCED">Publish/Subscribe Messaging Style</a> and <a href="../Text/jms-concepts.xhtml#BABEEJJJ">Consuming Messages from Topics</a> for details.) Instead of receiving the messages, the client waits for messages to arrive.</p>
            </li>

            <li>
              <p>Leave the <code>SynchConsumer</code> client running and run the <code>Producer</code> client again:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 3</pre>

              <p>Now the <code>SynchConsumer</code> client receives the messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is topic
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Messages received: 3</pre>

              <p>Because these messages were sent after the consumer was started, the client receives them.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNCFH"></a><a id="JEETT01292"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.6</span> <a id="sthref2394"></a><a id="sthref2395"></a><a id="sthref2396"></a>Using a Message Listener for Asynchronous Message Delivery</h2>

        <p>This section describes the receiving clients in an example that uses a message listener for asynchronous message delivery. This section then explains how to compile and run the clients using GlassFish Server.</p>

        <div align="center">
          <div class="inftblnote">
            <br />

            <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
              <tbody>
                <tr>
                  <td align="left">
                    <p class="notep1">Note:</p>

                    <p>In the Java EE platform, message listeners can be used only in application clients, as in this example. To allow asynchronous message delivery in a web or enterprise bean application, you use a message-driven bean, shown in later examples in this chapter.</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>
        </div><a id="BNCFI"></a><a id="JEETT00826"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.6.1</span> Writing the AsynchConsumer.java and TextListener.java Clients</h3>

          <p>The sending client is <code>Producer.java</code>, the same client used in <a href="../Text/jms-examples.xhtml#BABIHCAE">Sending Messages</a> and <a href="../Text/jms-examples.xhtml#BNCFB">Receiving Messages Synchronously</a>.</p>

          <p>An asynchronous consumer normally runs indefinitely. This one runs until the user types the character <code>q</code> or <code>Q</code> to stop the client.</p>

          <p>The client, <code>AsynchConsumer.java</code>, performs the following steps.</p>

          <ol>
            <li>
              <p>Injects resources for a connection factory, queue, and topic.</p>
            </li>

            <li>
              <p>Assigns either the queue or the topic to a destination object, based on the specified destination type.</p>
            </li>

            <li>
              <p>In a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
            </li>

            <li>
              <p>Creates a <code>JMSConsumer</code>.</p>
            </li>

            <li>
              <p>Creates an instance of the <code>TextListener</code> class and registers it as the message listener for the <code>JMSConsumer</code>:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">listener = new TextListener();
consumer.setMessageListener(listener);</pre>
            </li>

            <li>
              <p>Listens for the messages sent to the destination, stopping when the user types the character <code>q</code> or <code>Q</code> (it uses a <code>java.io.InputStreamReader</code> to do this).</p>
            </li>

            <li>
              <p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed, thus stopping delivery of messages to the message listener.</p>
            </li>
          </ol>

          <p><a id="sthref2397"></a>The message listener, <code>TextListener.java</code>, follows these steps:</p>

          <ol>
            <li>
              <p>When a message arrives, the <code>onMessage</code> method is called automatically.</p>
            </li>

            <li>
              <p>If the message is a <code>TextMessage</code>, the <code>onMessage</code> method displays its content as a string value. If the message is not a text message, it reports this fact:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">public void onMessage(Message m) { 
    try { 
        if (m instanceof TextMessage) { 
            System.out.println(
                    "Reading message: " + m.getBody(String.class)); 
        } else { 
             System.out.println("Message is not a TextMessage"); 
        } 
    } catch (JMSException | JMSRuntimeException e) {
        System.err.println("JMSException in onMessage(): " + e.toString());
    }
}</pre>
            </li>
          </ol>

          <p>For this example, you will use the same connection factory and destinations you created in <a href="../Text/jms-examples.xhtml#BABHEFCB">To Create Resources for the Simple Examples</a>.</p>

          <p>The steps assume that you have already built and packaged all the examples using NetBeans IDE or Maven.</p>
        </div><a id="BNCFK"></a><a id="JEETT00268"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.6.2</span> <a id="sthref2398"></a>To Run the AsynchConsumer and Producer Clients</h3>

          <p>You will need two terminal windows, as you did in <a href="../Text/jms-examples.xhtml#BNCFB">Receiving Messages Synchronously</a>.</p>

          <ol>
            <li>
              <p>In the terminal window where you ran the <code>SynchConsumer</code> client, go to the <code>asynchconsumer</code> example directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/simple/asynchconsumer</pre>
            </li>

            <li>
              <p>Run the <code>AsynchConsumer</code> client, specifying the <code>topic</code> destination type:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/asynchconsumer.jar topic</pre>

              <p>The client displays the following lines (along with some additional output) and then waits for messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is topic
To end program, enter Q or q, then &lt;return&gt;</pre>
            </li>

            <li>
              <p>In the terminal window where you ran the <code>Producer</code> client previously, run the client again, sending three messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 3</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is topic
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3</pre>

              <p>In the other window, the <code>AsynchConsumer</code> client displays the following (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is topic
To end program, enter Q or q, then &lt;return&gt;
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Message is not a TextMessage</pre>

              <p>The last line appears because the client has received the non-text control message sent by the <code>Producer</code> client.</p>
            </li>

            <li>
              <p>Enter <code>Q</code> or <code>q</code> and press <span class="gui-object-action">Return</span> to stop the <code>AsynchConsumer</code> client.</p>
            </li>

            <li>
              <p>Now run the clients using a queue.</p>

              <p>In this case, as with the synchronous example, you can run the <code>Producer</code> client first, because there is no timing dependency between the sender and receiver:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar queue 3</pre>

              <p>The output of the client looks like this:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
Sending message: This is message 1 from producer
Sending message: This is message 2 from producer
Sending message: This is message 3 from producer
Text messages sent: 3</pre>
            </li>

            <li>
              <p>In the other window, run the <code>AsynchConsumer</code> client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/asynchconsumer.jar queue</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
To end program, enter Q or q, then &lt;return&gt;
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Reading message: This is message 3 from producer
Message is not a TextMessage</pre>
            </li>

            <li>
              <p>Enter <code>Q</code> or <code>q</code> and press <span class="gui-object-action">Return</span> to stop the client.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNCFL"></a><a id="JEETT01293"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.7</span> <a id="sthref2399"></a><a id="sthref2400"></a><a id="sthref2401"></a>Browsing Messages on a Queue</h2>

        <p>This section describes an example that creates a <code>QueueBrowser</code> object to examine messages on a queue, as described in <a href="../Text/jms-concepts.xhtml#BNCEY">JMS Queue Browsers</a>. This section then explains how to compile, package, and run the example using GlassFish Server.</p><a id="BNCFM"></a><a id="JEETT00827"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.7.1</span> The MessageBrowser.java Client</h3>

          <p><a id="sthref2402"></a>To create a <code>QueueBrowser</code> for a queue, you call the <code>JMSContext.createBrowser</code> method with the queue as the argument. You obtain the messages in the queue as an <code>Enumeration</code> object. You can then iterate through the <code>Enumeration</code> object and display the contents of each message.</p>

          <p>The <code>MessageBrowser.java</code> client performs the following steps.</p>

          <ol>
            <li>
              <p>Injects resources for a connection factory and a queue.</p>
            </li>

            <li>
              <p>In a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
            </li>

            <li>
              <p>Creates a <code>QueueBrowser</code>:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">QueueBrowser browser = context.createBrowser(queue);</pre>
            </li>

            <li>
              <p>Retrieves the <code>Enumeration</code> that contains the messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Enumeration msgs = browser.getEnumeration();</pre>
            </li>

            <li>
              <p>Verifies that the <code>Enumeration</code> contains messages, then displays the contents of the messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">if ( !msgs.hasMoreElements() ) { 
    System.out.println("No messages in queue");
} else { 
    while (msgs.hasMoreElements()) { 
        Message tempMsg = (Message)msgs.nextElement(); 
        System.out.println("Message: " + tempMsg); 
    }
}</pre>
            </li>

            <li>
              <p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed.</p>
            </li>
          </ol>

          <p>Dumping the message contents to standard output retrieves the message body and properties in a format that depends on the implementation of the <code>toString</code> method. In GlassFish Server, the message format looks something like this:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Text:   This is message 3 from producer
Class:                  com.sun.messaging.jmq.jmsclient.TextMessageImpl
getJMSMessageID():      ID:8-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1129061034355
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}</pre>

          <p>Instead of displaying the message contents this way, you can call some of the <code>Message</code> interface's getter methods to retrieve the parts of the message you want to see.</p>

          <p>For this example, you will use the connection factory and queue you created for <a href="../Text/jms-examples.xhtml#BNCFB">Receiving Messages Synchronously</a>. It is assumed that you have already built and packaged all the examples.</p>
        </div><a id="BNCFN"></a><a id="JEETT00270"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.7.2</span> To Run the QueueBrowser Client</h3>

          <p>To run the <code>MessageBrowser</code> example using the <code>appclient</code> command, follow these steps.</p>

          <p>You also need the <code>Producer</code> example to send the message to the queue, and one of the consumer clients to consume the messages after you inspect them.</p>

          <p>To run the clients, you need two terminal windows.</p>

          <ol>
            <li>
              <p>In a terminal window, go to the <code>producer</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/simple/producer/</pre>
            </li>

            <li>
              <p>Run the <code>Producer</code> client, sending one message to the queue, along with the non-text control message:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar queue</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
Sending message: This is message 1 from producer
Text messages sent: 1</pre>
            </li>

            <li>
              <p>In another terminal window, go to the <code>messagebrowser</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/simple/messagebrowser</pre>
            </li>

            <li>
              <p>Run the <code>MessageBrowser</code> client using the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/messagebrowser.jar</pre>

              <p>The output of the client looks something like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Message: 
Text:   This is message 1 from producer
Class:                  com.sun.messaging.jmq.jmsclient.TextMessageImpl
getJMSMessageID():      ID:9-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1363100335526
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}

Message: 
Class:                  com.sun.messaging.jmq.jmsclient.MessageImpl
getJMSMessageID():      ID:10-10.152.23.26(bf:27:4:e:e7:ec)-55645-1363100335526
getJMSTimestamp():      1363100335526
getJMSCorrelationID():  null
JMSReplyTo:             null
JMSDestination:         PhysicalQueue
getJMSDeliveryMode():   PERSISTENT
getJMSRedelivered():    false
getJMSType():           null
getJMSExpiration():     0
getJMSPriority():       4
Properties:             {JMSXDeliveryCount=0}</pre>

              <p>The first message is the <code>TextMessage</code>, and the second is the non-text control message.</p>
            </li>

            <li>
              <p>Go to the <code>synchconsumer</code> directory.</p>
            </li>

            <li>
              <p>Run the <code>SynchConsumer</code> client to consume the messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar queue</pre>

              <p>The output of the client looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Destination type is queue
Reading message: This is message 1 from producer
Messages received: 1</pre>
            </li>
          </ol>
        </div>
      </div><a id="BABDDHHC"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.8</span> Running Multiple Consumers on the Same Destination</h2>

        <p>To illustrate further the way point-to-point and publish/subscribe messaging works, you can use the <code>Producer</code> and <code>SynchConsumer</code> examples to send messages that are then consumed by two clients running simultaneously.</p>

        <ol>
          <li>
            <p>Open three command windows. In one, go to the <code>producer</code> directory. In the other two, go to the <code>synchconsumer</code> directory.</p>
          </li>

          <li>
            <p>In each of the <code>synchconsumer</code> windows, start running the client, receiving messages from a queue:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar queue</pre>

            <p>Wait until you see the "Destination type is queue" message in both windows.</p>
          </li>

          <li>
            <p>In the <code>producer</code> window, run the client, sending 20 or so messages to the queue:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar queue 20</pre>
          </li>

          <li>
            <p>Look at the output in the <code>synchconsumer</code> windows. In point-to-point messaging, each message can have only one consumer. Therefore, each of the clients receives some of the messages. One of the clients receives the non-text control message, reports the number of messages received, and exits.</p>
          </li>

          <li>
            <p>In the window of the client that did not receive the non-text control message, enter Control-C to exit the program.</p>
          </li>

          <li>
            <p>Next, run the <code>synchconsumer</code> clients using a topic. In each window, run the following command:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/synchconsumer.jar topic</pre>

            <p>Wait until you see the "Destination type is topic" message in both windows.</p>
          </li>

          <li>
            <p>In the <code>producer</code> window, run the client, sending 20 or so messages to the topic:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 20</pre>
          </li>

          <li>
            <p>Again, look at the output in the <code>synchconsumer</code> windows. In publish/subscribe messaging, a copy of every message is sent to each subscription on the topic. Therefore, each of the clients receives all 20 text messages as well as the non-text control message.</p>
          </li>
        </ol>
      </div><a id="BNCFX"></a><a id="JEETT01296"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.2.9</span> <a id="sthref2403"></a><a id="sthref2404"></a>Acknowledging Messages</h2>

        <p>JMS provides two alternative ways for a consuming client to ensure that a message is not acknowledged until the application has finished processing the message:</p>

        <ul>
          <li>
            <p>Using a synchronous consumer in a <code>JMSContext</code> that has been configured to use the <code>CLIENT_ACKNOWLEDGE</code> setting</p>
          </li>

          <li>
            <p>Using a message listener for asynchronous message delivery in a <code>JMSContext</code> that has been configured to use the default <code>AUTO_ACKNOWLEDGE</code> setting</p>
          </li>
        </ul>

        <div align="center">
          <div class="inftblnote">
            <br />

            <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
              <tbody>
                <tr>
                  <td align="left">
                    <p class="notep1">Note:</p>

                    <p>In the Java EE platform, <code>CLIENT_ACKNOWLEDGE</code> sessions can be used only in application clients, as in this example.</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>
        </div>

        <p>The <code>clientackconsumer</code> example demonstrates the first alternative, in which a synchronous consumer uses client acknowledgment. The <code>asynchconsumer</code> example described in <a href="../Text/jms-examples.xhtml#BNCFH">Using a Message Listener for Asynchronous Message Delivery</a> demonstrates the second alternative.</p>

        <p>For information about message acknowledgment, see <a href="../Text/jms-concepts.xhtml#BNCFW">Controlling Message Acknowledgment</a>.</p>

        <p>The following table describes four possible interactions between types of consumers and types of acknowledgment.</p>

        <div class="tblhruleformal">
          <a id="sthref2405"></a><a id="sthref2406"></a>

          <p class="titleintable">Table 46-3 Message Acknowledgment with Synchronous and Asynchronous Consumers</p>

          <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table describes the behavior of synchronous and asynchronous consumers with client and auto acknowledgment." title="Message Acknowledgment with Synchronous and Asynchronous Consumers" width="100%">
            <col width="21%" />
            <col width="29%" />
            <col width="*" />

            <thead>
              <tr align="left" valign="top">
                <th align="left" id="r1c1-t7" valign="bottom">Consumer Type</th>

                <th align="left" id="r1c2-t7" valign="bottom">Acknowledgment Type</th>

                <th align="left" id="r1c3-t7" valign="bottom">Behavior</th>
              </tr>
            </thead>

            <tbody>
              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t7" id="r2c1-t7">
                  <p>Synchronous</p>
                </td>

                <td align="left" headers="r2c1-t7 r1c2-t7">
                  <p>Client</p>
                </td>

                <td align="left" headers="r2c1-t7 r1c3-t7">
                  <p>Client acknowledges message after processing is complete</p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t7" id="r3c1-t7">
                  <p>Asynchronous</p>
                </td>

                <td align="left" headers="r3c1-t7 r1c2-t7">
                  <p>Client</p>
                </td>

                <td align="left" headers="r3c1-t7 r1c3-t7">
                  <p>Client acknowledges message after processing is complete</p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t7" id="r4c1-t7">
                  <p>Synchronous</p>
                </td>

                <td align="left" headers="r4c1-t7 r1c2-t7">
                  <p>Auto</p>
                </td>

                <td align="left" headers="r4c1-t7 r1c3-t7">
                  <p>Acknowledgment happens immediately after <code>receive</code> call; message cannot be redelivered if any subsequent processing steps fail</p>
                </td>
              </tr>

              <tr align="left" valign="top">
                <td align="left" headers="r1c1-t7" id="r5c1-t7">
                  <p>Asynchronous</p>
                </td>

                <td align="left" headers="r5c1-t7 r1c2-t7">
                  <p>Auto</p>
                </td>

                <td align="left" headers="r5c1-t7 r1c3-t7">
                  <p>Message is automatically acknowledged when <code>onMessage</code> method returns</p>
                </td>
              </tr>
            </tbody>
          </table><br />
        </div>

        <p>The example is under the <span class="variable">tut-install</span><code>/examples/jms/simple/clientackconsumer/</code> directory.</p>

        <p>The example client, <code>ClientAckConsumer.java</code>, creates a <code>JMSContext</code> that specifies client acknowledgment:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">try (JMSContext context =
      connectionFactory.createContext(JMSContext.CLIENT_ACKNOWLEDGE);) {
    ...</pre>

        <p>The client uses a <code>while</code> loop almost identical to that used by <code>SynchConsumer.java</code>, with the exception that after processing each message, it calls the <code>acknowledge</code> method on the <code>JMSContext</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">context.acknowledge();</pre>

        <p>The example uses the following objects:</p>

        <ul>
          <li>
            <p>The <code>jms/MyQueue</code> resource that you created for <a href="../Text/jms-examples.xhtml#BNCFB">Receiving Messages Synchronously</a>.</p>
          </li>

          <li>
            <p><code>java:comp/DefaultJMSConnectionFactory</code>, the platform default connection factory preconfigured with GlassFish Server</p>
          </li>
        </ul><a id="GJSCG"></a><a id="JEETT00277"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.2.9.1</span> To Run the ClientAckConsumer Client</h3>

          <ol>
            <li>
              <p>In a terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/simple/producer/</pre>
            </li>

            <li>
              <p>Run the <code>Producer</code> client, sending some messages to the queue:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar queue 3</pre>
            </li>

            <li>
              <p>In another terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/simple/clientackconsumer/</pre>
            </li>

            <li>
              <p>To run the client, use the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/clientackconsumer.jar</pre>

              <p>The client output looks like this (along with some additional output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Created client-acknowledge JMSContext
Reading message: This is message 1 from producer
Acknowledging TextMessage
Reading message: This is message 2 from producer
Acknowledging TextMessage
Reading message: This is message 3 from producer
Acknowledging TextMessage
Acknowledging non-text control message</pre>

              <p>The client acknowledges each message explicitly after processing it, just as a <code>JMSContext</code> configured to use <code>AUTO_ACKNOWLEDGE</code> does automatically after a <code>MessageListener</code> returns successfully from processing a message received asynchronously.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="GIWFH"></a><a id="JEETT00555"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.3</span> Writing More Advanced JMS Applications</h1>

      <p>The following examples show how to use some of the more advanced features of the JMS API: durable subscriptions and transactions.</p><a id="BNCGG"></a><a id="JEETT01297"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.3.1</span> <a id="sthref2407"></a><a id="sthref2408"></a>Using Durable Subscriptions</h2>

        <p>The <code>durablesubscriptionexample</code> example shows how unshared durable subscriptions work. It demonstrates that a durable subscription continues to exist and accumulate messages even when there is no active consumer on it.</p>

        <p>The example consists of two modules, a <code>durableconsumer</code> application that creates a durable subscription and consumes messages, and an <code>unsubscriber</code> application that enables you to unsubscribe from the durable subscription after you have finished running the <code>durableconsumer</code> application.</p>

        <p>For information on durable subscriptions, see <a href="../Text/jms-concepts.xhtml#BNCGD">Creating Durable Subscriptions</a>.</p>

        <p>The main client, <code>DurableConsumer.java</code>, is under the <span class="variable">tut-install</span><code>/examples/jms/durablesubscriptionexample/durableconsumer</code>/ directory.</p>

        <p>The example uses a connection factory, j<code>ms/DurableConnectionFactory</code>, that has a client ID.</p>

        <p>The <code>DurableConsumer</code> client creates a <code>JMSContext</code> using the connection factory. It then stops the <code>JMSContext</code>, calls <code>createDurableConsumer</code> to create a durable subscription and a consumer on the topic by specifying a subscription name, registers a message listener, and starts the <code>JMSContext</code> again. The subscription is created only if it does not already exist, so the example can be run repeatedly:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">try (JMSContext context = durableConnectionFactory.createContext();) {
    context.stop();
    consumer = context.createDurableConsumer(topic, "MakeItLast");
    listener = new TextListener();
    consumer.setMessageListener(listener);
    context.start();
    ...</pre>

        <p>To send messages to the topic, you run the <code>producer</code> client.</p>

        <p>The <code>unsubscriber</code> example contains a very simple <code>Unsubscriber</code> client, which creates a <code>JMSContext</code> on the same connection factory and then calls the <code>unsubscribe</code> method, specifying the subscription name:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">try (JMSContext context = durableConnectionFactory.createContext();) {
    System.out.println("Unsubscribing from durable subscription");
    context.unsubscribe("MakeItLast");
} ...</pre>

        <div class="sect3">
          <a id="sthref2409"></a>

          <h3 class="sect3"><span class="secnum">46.3.1.1</span> To Create Resources for the Durable Subscription Example</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a command window, go to the <code>durableconsumer</code> example.</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/durablesubscriptionexample/durableconsumer</pre>
            </li>

            <li>
              <p>Create the resources using the <code>asadmin add-resources</code> command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin add-resources src/main/setup/glassfish-resources.xml</pre>

              <p>The command output reports the creation of a connector connection pool and a connector resource.</p>
            </li>

            <li>
              <p>Verify the creation of the resources:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin list-jms-resources</pre>

              <p>In addition to the resources you created for the simple examples, the command lists the new connection factory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">jms/MyQueue
jms/MyTopic
jms/__defaultConnectionFactory
jms/DurableConnectionFactory
Command list-jms-resources executed successfully.</pre>
            </li>
          </ol>
        </div><a id="GJSCI"></a><a id="JEETT00279"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.3.1.2</span> To Run the Durable Subscription Example</h3>

          <ol>
            <li>
              <p>In a terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/durablesubscriptionexample/</pre>
            </li>

            <li>
              <p>Build the <code>durableconsumer</code> and <code>unsubscriber</code> examples:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>

            <li>
              <p>Go to the <code>durableconsumer</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd durableconsumer</pre>
            </li>

            <li>
              <p>To run the client, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/durableconsumer.jar</pre>

              <p>The client creates the durable consumer and then waits for messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Creating consumer for topic
Starting consumer
To end program, enter Q or q, then &lt;return&gt;</pre>
            </li>

            <li>
              <p>In another terminal window, run the <code>Producer</code> client, sending some messages to the topic:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd tut-install/examples/jms/simple/producer
appclient -client target/producer.jar topic 3<br /></pre>
            </li>

            <li>
              <p>After the <code>DurableConsumer</code> client receives the messages, enter <code>q</code> or <code>Q</code> to exit the program. At this point, the client has behaved like any other asynchronous consumer.</p>
            </li>

            <li>
              <p>Now, while the <code>DurableConsumer</code> client is not running, use the <code>Producer</code> client to send more messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 2</pre>

              <p>If a durable subscription did not exist, these messages would be lost, because no consumer on the topic is currently running. However, the durable subscription is still active, and it retains the messages.</p>
            </li>

            <li>
              <p>Run the <code>DurableConsumer</code> client again. It immediately receives the messages that were sent while it was inactive:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Creating consumer for topic
Starting consumer
To end program, enter Q or q, then &lt;return&gt;
Reading message: This is message 1 from producer
Reading message: This is message 2 from producer
Message is not a TextMessage</pre>
            </li>

            <li>
              <p>Enter <code>q</code> or <code>Q</code> to exit the program.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2410"></a>

          <h3 class="sect3"><span class="secnum">46.3.1.3</span> To Run the unsubscriber Example</h3>

          <p>After you have finished running the <code>DurableConsumer</code> client, run the <code>unsubscriber</code> example to unsubscribe from the durable subscription.</p>

          <ol>
            <li>
              <p>In a terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/durablesubscriptionexample/unsubscriber</pre>
            </li>

            <li>
              <p>To run the <code>Unsubscriber</code> client, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/unsubscriber.jar</pre>

              <p>The client reports that it is unsubscribing from the durable subscription.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNCGJ"></a><a id="JEETT01298"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.3.2</span> <a id="sthref2411"></a><a id="sthref2412"></a>Using Local Transactions</h2>

        <p>The <code>transactedexample</code> example demonstrates the use of local transactions in a JMS client application. It also demonstrates the use of the request/reply messaging pattern described in <a href="../Text/jms-concepts.xhtml#BNCGB">Creating Temporary Destinations</a>, although it uses permanent rather than temporary destinations. The example consists of three modules, <code>genericsupplier</code>, <code>retailer</code>, and <code>vendor</code>, which can be found under the <span class="variable">tut-install</span><code>/examples/jms/transactedexample/</code> directory. The source code can be found in the <code>src/main/java/javaeetutorial</code> trees for each module. The <code>genericsupplier</code> and <code>retailer</code> modules each contain a single class, <code>genericsupplier/GenericSupplier.java</code> and <code>retailer/Retailer.java</code>, respectively. The <code>vendor</code> module is more complex, containing four classes: <code>vendor/Vendor.java</code>, <code>vendor/VendorMessageListener.java</code>, <code>vendor/Order.java</code>, and <code>vendor/SampleUtilities.java</code>.</p>

        <p>The example shows how to use a queue and a topic in a single transaction as well as how to pass a <code>JMSContext</code> to a message listener's constructor function. The example represents a highly simplified e-commerce application in which the following actions occur.</p>

        <ol>
          <li>
            <p>A retailer (<code>retailer/src/main/java/javaeetutorial/retailer/Retailer.java</code>) sends a <code>MapMessage</code> to a vendor order queue, ordering a quantity of computers, and waits for the vendor's reply:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">outMessage = context.createMapMessage();
outMessage.setString("Item", "Computer(s)");
outMessage.setInt("Quantity", quantity);
outMessage.setJMSReplyTo(retailerConfirmQueue);
context.createProducer().send(vendorOrderQueue, outMessage);
System.out.println("Retailer: ordered " + quantity + " computer(s)");
orderConfirmReceiver = context.createConsumer(retailerConfirmQueue);</pre>
          </li>

          <li>
            <p>The vendor (<code>vendor/src/main/java/javaeetutorial/retailer/Vendor.java</code>) receives the retailer's order message and sends an order message to the supplier order topic in one transaction. This JMS transaction uses a single session, so you can combine a receive from a queue with a send to a topic. Here is the code that uses the same session to create a consumer for a queue:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">vendorOrderReceiver = session.createConsumer(vendorOrderQueue);</pre>

            <p>The following code receives the incoming message, sends an outgoing message, and commits the <code>JMSContext</code>. The message processing has been removed to keep the sequence simple:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">inMessage = vendorOrderReceiver.receive();
// Process the incoming message and format the outgoing 
// message
...
context.createProducer().send(supplierOrderTopic, orderMessage);
...
context.commit();</pre>

            <p>For simplicity, there are only two suppliers, one for CPUs and one for hard drives.</p>
          </li>

          <li>
            <p>Each supplier (<code>genericsupplier/src/main/java/javaeetutorial/retailer/GenericSupplier.java</code>) receives the order from the order topic, checks its inventory, and then sends the items ordered to the queue named in the order message's <code>JMSReplyTo</code> field. If it does not have enough of the item in stock, the supplier sends what it has. The synchronous receive from the topic and the send to the queue take place in one JMS transaction:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">receiver = context.createConsumer(SupplierOrderTopic);
...
inMessage = receiver.receive();
if (inMessage instanceof MapMessage) {
    orderMessage = (MapMessage) inMessage;
} ...
// Process message
outMessage = context.createMapMessage();
// Add content to message
context.createProducer().send(
         (Queue) orderMessage.getJMSReplyTo(),
         outMessage);
// Display message contents
context.commit();</pre>
          </li>

          <li>
            <p>The vendor receives the suppliers' replies from its confirmation queue and updates the state of the order. Messages are processed by an asynchronous message listener, <code>VendorMessageListener</code>; this step shows the use of JMS transactions with a message listener:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">MapMessage component = (MapMessage) message;
...
int orderNumber = component.getInt("VendorOrderNumber");
Order order = Order.getOrder(orderNumber).processSubOrder(component);
context.commit();</pre>
          </li>

          <li>
            <p>When all outstanding replies are processed for a given order, the vendor message listener sends a message notifying the retailer whether it can fulfill the order:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Queue replyQueue = (Queue) order.order.getJMSReplyTo();
MapMessage retailerConfirmMessage = context.createMapMessage();
// Format the message
context.createProducer().send(replyQueue, retailerConfirmMessage);
context.commit();</pre>
          </li>

          <li>
            <p>The retailer receives the message from the vendor:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">inMessage = (MapMessage) orderConfirmReceiver.receive();</pre>

            <p>The retailer then places a second order for twice as many computers as in the first order, so these steps are executed twice.</p>
          </li>
        </ol>

        <p><a href="../Text/jms-examples.xhtml#BNCGK">Figure 46-1</a> illustrates these steps.</p>

        <div class="figure">
          <a id="BNCGK"></a><a id="JEETT00056"></a>

          <p class="titleinfigure">Figure 46-1 Transactions: JMS Client Example</p>

          <div style="text-align: center;"><img alt="Description of Figure 46-1 follows" longdesc="img_text/jeett_dt_034.htm" src="../Images/jeett_dt_034.png" style="line-height: 1.6em;" title="Description of Figure 46-1 follows" /></div>
        </div>

        <div class="figure">
          Description of "Figure 46-1 Transactions: JMS Client Example"<br />
          <br />
        </div>

        <p>All the messages use the <code>MapMessage</code> message type. Synchronous receives are used for all message reception except when the vendor processes the replies of the suppliers. These replies are processed asynchronously and demonstrate how to use transactions within a message listener.</p>

        <p>At random intervals, the <code>Vendor</code> client throws an exception to simulate a database problem and cause a rollback.</p>

        <p>All clients except <code>Retailer</code> use transacted contexts.</p>

        <p>The example uses three queues named <code>jms/AQueue</code>, <code>jms/BQueue</code>, and <code>jms/CQueue</code>, and one topic named <code>jms/OTopic</code>.</p>

        <div class="sect3">
          <a id="sthref2414"></a>

          <h3 class="sect3"><span class="secnum">46.3.2.1</span> To Create Resources for the transactedexample Example</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a command window, go to the <code>genericsupplier</code> example:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/jms/transactedexample/genericsupplier</pre>
            </li>

            <li>
              <p>Create the resources using the <code>asadmin add-resources</code> command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin add-resources src/main/setup/glassfish-resources.xml</pre>
            </li>

            <li>
              <p>Verify the creation of the resources:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin list-jms-resources</pre>

              <p>In addition to the resources you created for the simple examples and the durable subscription example, the command lists the four new destinations:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">jms/MyQueue
jms/MyTopic
jms/AQueue
jms/BQueue
jms/CQueue
jms/OTopic
jms/__defaultConnectionFactory
jms/DurableConnectionFactory
Command list-jms-resources executed successfully.</pre>
            </li>
          </ol>
        </div><a id="GJSHA"></a><a id="JEETT00281"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.3.2.2</span> To Run the transactedexample Clients</h3>

          <p>You will need four terminal windows to run the clients. Make sure that you start the clients in the correct order.</p>

          <ol>
            <li>
              <p>In a terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/transactedexample/</pre>
            </li>

            <li>
              <p>To build and package all the modules, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>

            <li>
              <p>Go to the <code>genericsupplier</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd genericsupplier</pre>
            </li>

            <li>
              <a id="BABFCGBI"></a>

              <p>Use the following command to start the CPU supplier client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target\genericsupplier.jar CPU</pre>

              <p>After some initial output, the client reports the following:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Starting CPU supplier</pre>
            </li>

            <li>
              <p>In a second terminal window, go to the <code>genericsupplier</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/transactedexample/genericsupplier</pre>
            </li>

            <li>
              <p>Use the following command to start the hard drive supplier client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target\genericsupplier.jar HD</pre>

              <p>After some initial output, the client reports the following:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Starting Hard Drive supplier</pre>
            </li>

            <li>
              <p>In a third terminal window, go to the <code>vendor</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/transactedexample/vendor</pre>
            </li>

            <li>
              <p>Use the following command to start the <code>Vendor</code> client:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target\vendor.jar</pre>

              <p>After some initial output, the client reports the following:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Starting vendor</pre>
            </li>

            <li>
              <p>In another terminal window, go to the <code>retailer</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/transactedexample/retailer</pre>
            </li>

            <li>
              <a id="BABBIHCE"></a>

              <p>Use a command like the following to run the <code>Retailer</code> client. The argument specifies the number of computers to order:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/retailer.jar 4</pre>

              <p>After some initial output, the <code>Retailer</code> client reports something like the following. In this case, the first order is filled, but the second is not:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Retailer: Quantity to be ordered is 4
Retailer: Ordered 4 computer(s)
Retailer: Order filled
Retailer: Placing another order
Retailer: Ordered 8 computer(s)
Retailer: Order not filled</pre>

              <p>The <code>Vendor</code> client reports something like the following, stating in this case that it is able to send all the computers in the first order, but not in the second:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Vendor: Retailer ordered 4 Computer(s)
Vendor: Ordered 4 CPU(s) and hard drive(s)
  Vendor: Committed transaction 1
Vendor: Completed processing for order 1
Vendor: Sent 4 computer(s)
  Vendor: committed transaction 2
Vendor: Retailer ordered 8 Computer(s)
Vendor: Ordered 8 CPU(s) and hard drive(s)
  Vendor: Committed transaction 1
Vendor: Completed processing for order 2
Vendor: Unable to send 8 computer(s)
  Vendor: Committed transaction 2</pre>

              <p>The CPU supplier reports something like the following. In this case, it is able to send all the CPUs for both orders:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">CPU Supplier: Vendor ordered 4 CPU(s)
CPU Supplier: Sent 4 CPU(s)
  CPU Supplier: Committed transaction
CPU Supplier: Vendor ordered 8 CPU(s)
CPU Supplier: Sent 8 CPU(s)
  CPU Supplier: Committed transaction</pre>

              <p>The hard drive supplier reports something like the following. In this case, it has a shortage of hard drives for the second order:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Hard Drive Supplier: Vendor ordered 4 Hard Drive(s)
Hard Drive Supplier: Sent 4 Hard Drive(s)
  Hard Drive Supplier: Committed transaction
Hard Drive Supplier: Vendor ordered 8 Hard Drive(s)
Hard Drive Supplier: Sent 1 Hard Drive(s)
  Hard Drive Supplier: Committed transaction</pre>
            </li>

            <li>
              <p>Repeat steps <a href="../Text/jms-examples.xhtml#BABFCGBI">4</a> through <a href="../Text/jms-examples.xhtml#BABBIHCE">10</a> as many times as you wish. Occasionally, the vendor will report an exception that causes a rollback:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Vendor: JMSException occurred: javax.jms.JMSException: Simulated 
database concurrent access exception
  Vendor: Rolled back transaction 1</pre>
            </li>

            <li>
              <p>After you finish running the clients, you can delete the destination resources by using the following commands:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">asadmin delete-jms-resource jms/AQueue
asadmin delete-jms-resource jms/BQueue
asadmin delete-jms-resource jms/CQueue
asadmin delete-jms-resource jms/OTopic</pre>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BABGEFHC"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.4</span> Writing High Performance and Scalable JMS Applications</h1>

      <p>This section describes how to use the JMS API to write applications that can handle high volumes of messages robustly. These examples use both nondurable and durable shared consumers.</p><a id="BABIBEAC"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.4.1</span> Using Shared Nondurable Subscriptions</h2>

        <p>This section describes the receiving clients in an example that shows how to use a shared consumer to distribute messages sent to a topic among different consumers. This section then explains how to compile and run the clients using GlassFish Server.</p>

        <p>You may wish to compare this example to the results of <a href="../Text/jms-examples.xhtml#BABDDHHC">Running Multiple Consumers on the Same Destination</a> using an unshared consumer. In that example, messages are distributed among the consumers on a queue, but each consumer on the topic receives all the messages because each consumer on the topic is using a separate topic subscription.</p>

        <p>In this example, however, messages are distributed among multiple consumers on a topic, because all the consumers are sharing the same subscription. Each message added to the topic subscription is received by only one consumer, similarly to the way in which each message added to a queue is received by only one consumer.</p>

        <p>A topic may have multiple subscriptions. Each message sent to the topic will be added to each topic subscription. However, if there are multiple consumers on a particular subscription, each message added to that subscription will be delivered to only one of those consumers.</p>

        <div class="sect3">
          <a id="sthref2415"></a>

          <h3 class="sect3"><span class="secnum">46.4.1.1</span> Writing the Clients for the Shared Consumer Example</h3>

          <p>The sending client is <code>Producer.java</code>, the same client used in previous examples.</p>

          <p>The receiving client is <code>SharedConsumer.java</code>. It is very similar to <code>AsynchConsumer.java</code>, except that it always uses a topic. It performs the following steps.</p>

          <ol>
            <li>
              <p>Injects resources for a connection factory and topic.</p>
            </li>

            <li>
              <p>In a <code>try</code>-with-resources block, creates a <code>JMSContext</code>.</p>
            </li>

            <li>
              <p>Creates a consumer on a shared nondurable subscription, specifying a subscription name:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">consumer = context.createSharedConsumer(topic, "SubName");</pre>
            </li>

            <li>
              <p>Creates an instance of the <code>TextListener</code> class and registers it as the message listener for the shared consumer.</p>
            </li>

            <li>
              <p>Listens for the messages published to the destination, stopping when the user types the character <code>q</code> or <code>Q</code>.</p>
            </li>

            <li>
              <p>Catches and handles any exceptions. The end of the <code>try</code>-with-resources block automatically causes the <code>JMSContext</code> to be closed.</p>
            </li>
          </ol>

          <p>The <code>TextListener.java</code> class is identical to the one for the <code>asynchconsumer</code> example.</p>

          <p>For this example, you will use the default connection factory and the topic you created in <a href="../Text/jms-examples.xhtml#BABHEFCB">To Create Resources for the Simple Examples</a>.</p>
        </div>

        <div class="sect3">
          <a id="sthref2416"></a>

          <h3 class="sect3"><span class="secnum">46.4.1.2</span> To Run the SharedConsumer and Producer Clients</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>Open three command windows. In the first, go to the <code>simple/producer/</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/simple/producer/</pre>
            </li>

            <li>
              <p>In the second and third command windows, go to the <code>shared/sharedconsumer/</code> directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/shared/sharedconsumer/</pre>
            </li>

            <li>
              <p>In one of the <code>sharedconsumer</code> windows, build the example:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>

            <li>
              <p>In each of the two <code>sharedconsumer</code> windows, start running the client. You do not need to specify a <code>topic</code> argument:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/sharedconsumer.jar</pre>

              <p>Wait until you see the following output in both windows:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Waiting for messages on topic
To end program, enter Q or q, then &lt;return&gt;</pre>
            </li>

            <li>
              <p>In the <code>producer</code> window, run the client, specifying the topic and a number of messages:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 20</pre>

              <p>Each consumer client receives some of the messages. Only one of the clients receives the non-text message that signals the end of the message stream.</p>
            </li>

            <li>
              <p>Enter <code>Q</code> or <code>q</code> and press <span class="gui-object-action">Return</span> to stop each client and see a report of the number of text messages received.</p>
            </li>
          </ol>
        </div>
      </div><a id="BABEJBHA"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.4.2</span> <a id="sthref2417"></a><a id="sthref2418"></a>Using Shared Durable Subscriptions</h2>

        <p>The <code>shareddurableconsumer</code> client shows how to use shared durable subscriptions. It shows how shared durable subscriptions combine the advantages of durable subscriptions (the subscription remains active when the client is not) with those of shared consumers (the message load can be divided among multiple clients).</p>

        <p>The example is much more similar to the <code>sharedconsumer</code> example than to the <code>DurableConsumer.java</code> client. It uses two classes, <code>SharedDurableConsumer.java</code> and <code>TextListener.java</code>, which can be found under the <span class="variable">tut-install</span><code>/examples/jms/shared/shareddurableconsumer/</code> directory.</p>

        <p>The client uses <code>java:comp/DefaultJMSConnectionFactory</code>, the connection factory that does not have a client identifier, as is recommended for shared durable subscriptions. It uses the <code>createSharedDurableConsumer</code> method with a subscription name to establish the subscription:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">consumer = context.createSharedDurableConsumer(topic, "MakeItLast");</pre>

        <p>You run the example in combination with the <code>Producer.java</code> client.</p>

        <div class="sect3">
          <a id="sthref2419"></a>

          <h3 class="sect3"><span class="secnum">46.4.2.1</span> To Run the SharedDurableConsumer and Producer Clients</h3>

          <ol>
            <li>
              <p>In a terminal window, go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/shared/shareddurableconsumer</pre>
            </li>

            <li>
              <p>To compile and package the client, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>

            <li>
              <p>Run the client first to establish the durable subscription:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/shareddurableconsumer.jar</pre>
            </li>

            <li>
              <p>The client displays the following and pauses:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Waiting for messages on topic
To end program, enter Q or q, then &lt;return&gt;</pre>
            </li>

            <li>
              <p>In the <code>shareddurableconsumer</code> window, enter <code>q</code> or <code>Q</code> to exit the program. The subscription remains active, although the client is not running.</p>
            </li>

            <li>
              <p>Open another terminal window and go to the <code>producer</code> example directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">cd <span class="variable">tut-install</span>/examples/jms/simple/producer</pre>
            </li>

            <li>
              <p>Run the <code>producer</code> example, sending a number of messages to the topic:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 6</pre>
            </li>

            <li>
              <p>After the producer has sent the messages, open a third terminal window and go to the <code>shareddurableconsumer</code> directory.</p>
            </li>

            <li>
              <p>Run the client in both the first and third terminal windows. Whichever client starts first will receive all the messages that were sent when there was no active subscriber:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/shareddurableconsumer.jar</pre>
            </li>

            <li>
              <p>With both <code>shareddurableconsumer</code> clients still running, go to the <code>producer</code> window and send a larger number of messages to the topic:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">appclient -client target/producer.jar topic 25</pre>

              <p>Now the messages will be shared by the two consumer clients. If you continue sending groups of messages to the topic, each client receives some of the messages. If you exit one of the clients and send more messages, the other client will receive all the messages.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BABBABFC"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.5</span> <a id="sthref2420"></a><a id="sthref2421"></a><a id="sthref2422"></a>Sending and Receiving Messages Using a Simple Web Application</h1>

      <p>Web applications can use the JMS API to send and receive messages, as noted in <a href="../Text/jms-concepts.xhtml#BNCGN">Using Java EE Components to Produce and to Synchronously Receive Messages</a>. This section describes the components of a very simple web application that uses the JMS API.</p>

      <p>This section assumes that you are familiar with the basics of JavaServer Faces technology, described in <a href="../Text/partwebtier.xhtml#BNADP">Part III, "The Web Tier."</a></p>

      <p>The example, <code>websimplemessage</code>, is under the <span class="variable">tut-install</span><code>/jms/examples/</code> directory. It uses sending and receiving Facelets pages as well as corresponding backing beans. When a user enters a message in the text field of the sending page and clicks a button, the backing bean for the page sends the message to a queue and displays it on the page. When the user goes to the receiving page and clicks another button, the backing bean for that page receives the message synchronously and displays it.</p>

      <div class="figure">
        <a id="sthref2423"></a>

        <p class="titleinfigure">Figure 46-2 The websimplemessage Application</p>

        <div style="text-align: center;"><img alt="Description of Figure 46-2 follows" longdesc="img_text/jeett_dt_035.htm" src="../Images/jeett_dt_035.png" style="line-height: 1.6em;" title="Description of Figure 46-2 follows" /></div>
      </div>

      <div class="figure">
        Description of "Figure 46-2 The websimplemessage Application"<br />
        <br />
      </div>

      <div class="sect2">
        <a id="sthref2425"></a>

        <h2 class="sect2"><span class="secnum">46.5.1</span> The websimplemessage Facelets Pages</h2>

        <p>The Facelets pages for the example are as follows.</p>

        <ul>
          <li>
            <p><code>sender.xhtml</code>, which provides a labeled <code>h:InputText</code> tag where the user enters the message, along with two command buttons. When the user clicks the Send Message button, the <code>senderBean.sendMessage</code> method is called to send the message to the queue and display its contents. When the user clicks the Go to Receive Page button, the <code>receiver.xhtml</code> page appears.</p>
          </li>

          <li>
            <p><code>receiver.xhtml</code>, which also provides two command buttons. When the user clicks the Receive Message button, the <code>receiverBean.getMessage</code> method is called to fetch the message from the queue and display its contents. When the user clicks the Send Another Message button, the sender.xhtml page appears again.</p>
          </li>
        </ul>
      </div>

      <div class="sect2">
        <a id="sthref2426"></a>

        <h2 class="sect2"><span class="secnum">46.5.2</span> The websimplemessage Managed Beans</h2>

        <p>The two managed beans for the example are as follows.</p>

        <ul>
          <li>
            <p><code>SenderBean.java</code>, a CDI managed bean with one property, <code>messageText</code>, and one business method, <code>sendMessage</code>. The class is annotated with <code>@JMSDestinationDefinition</code> to create a component-private queue:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@JMSDestinationDefinition(
        name = "java:comp/jms/webappQueue",
        interfaceName = "javax.jms.Queue",
        destinationName = "PhysicalWebappQueue")
@Named
@RequestScoped
public class SenderBean {</pre>

            <p>The <code>sendMessage</code> method injects a <code>JMSContext</code> (using the default connection factory) and the queue, creates a producer, sends the message the user typed on the Facelets page, and creates a <code>FacesMessage</code> to display on the Facelets page:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Inject
private JMSContext context;
@Resource(lookup = "java:comp/jms/webappQueue")
private Queue queue;
private String messageText;
...
public void sendMessage() {
    try {
        String text = "Message from producer: " + messageText;
        context.createProducer().send(queue, text);

        FacesMessage facesMessage = 
                new FacesMessage("Sent message: " + text);
        FacesContext.getCurrentInstance().addMessage(null, facesMessage);
    } catch (Throwable t) {
        logger.log(Level.SEVERE,
                "SenderBean.sendMessage: Exception: {0}",
                t.toString());
    }
}</pre>
          </li>

          <li>
            <p><code>ReceiverBean.java</code>, a CDI managed bean with one business method, <code>getMessage</code>. The method injects a <code>JMSContext</code> (using the default connection factory) and the queue that was defined in <code>SenderBean</code>, creates a consumer, receives the message, and creates a <code>FacesMessage</code> to display on the Facelets page:</p>
            <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Inject
private JMSContext context;
@Resource(lookup = "java:comp/jms/webappQueue")
private Queue queue;
...
public void getMessage() {
    try {
        JMSConsumer receiver = context.createConsumer(queue);
        String text = receiver.receiveBody(String.class);

        if (text != null) {
            FacesMessage facesMessage = 
                    new FacesMessage("Reading message: " + text);
            FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        } else {
            FacesMessage facesMessage =
                    new FacesMessage("No message received after 1 second");
            FacesContext.getCurrentInstance().addMessage(null, facesMessage);
        }
    } catch (Throwable t) {
        logger.log(Level.SEVERE,
                "ReceiverBean.getMessage: Exception: {0}",
                t.toString());
    }
}</pre>
          </li>
        </ul>
      </div>

      <div class="sect2">
        <a id="sthref2427"></a>

        <h2 class="sect2"><span class="secnum">46.5.3</span> Running the websimplemessage Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, package, deploy, and run the <code>websimplemessage</code> application.</p>

        <div class="sect3">
          <a id="sthref2428"></a>

          <h3 class="sect3"><span class="secnum">46.5.3.1</span> Creating Resources for the websimplemessage Example</h3>

          <p>This example uses an annotation-defined queue and the preconfigured default connection factory <code>java:comp/DefaultJMSConnectionFactory</code>.</p>
        </div>

        <div class="sect3">
          <a id="sthref2429"></a>

          <h3 class="sect3"><span class="secnum">46.5.3.2</span> To Package and Deploy websimplemessage Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms</pre>
            </li>

            <li>
              <p>Select the <code>websimplemessage</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>websimplemessage</code> project and select <span class="gui-object-action">Build</span>.</p>

              <p>This command builds and deploys the project.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2430"></a>

          <h3 class="sect3"><span class="secnum">46.5.3.3</span> To Package and Deploy websimplemessage Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/websimplemessage/</pre>
            </li>

            <li>
              <p>To compile the source files and package and deploy the application, use the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2431"></a>

          <h3 class="sect3"><span class="secnum">46.5.3.4</span> To Run the websimplemessage Example</h3>

          <ol>
            <li>
              <p>In a web browser, enter the following URL:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">http://localhost:8080/websimplemessage</pre>
            </li>

            <li>
              <p>Enter a message in the text field and click <span class="gui-object-action">Send Message</span>.</p>

              <p>If, for example, you enter "Hello, Duke", the following appears below the buttons:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Sent message: Message from producer: Hello, Duke</pre>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Go to Receive Page</span>.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Receive Message</span>.</p>

              <p>The following appears below the buttons:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Reading message: Message from producer: Hello, Duke</pre>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Send Another Message</span> to return to the sending page.</p>
            </li>

            <li>
              <p>After you have finished running the application, undeploy it using either the <span class="gui-object-action">Services</span> tab of NetBeans IDE or the <code>mvn cargo:undeploy</code> command.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNBPK"></a><a id="JEETT00088"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.6</span> <a id="sthref2432"></a><a id="sthref2433"></a><a id="sthref2434"></a>Receiving Messages Asynchronously Using a Message-Driven Bean</h1>

      <p>If you are writing an application to run in the Java EE application client container or on the Java SE platform, and you want to receive messages asynchronously, you need to define a class that implements the <code>MessageListener</code> interface, create a <code>JMSConsumer</code>, and call the method <code>setMessageListener</code>.</p>

      <p>If you're writing an application to run in the Java EE web or EJB container and want it to receive messages asynchronously, you also need to need to define a class that implements the <code>MessageListener</code> interface. However, instead of creating a <code>JMSConsumer</code> and calling the method <code>setMessageListener</code>, you must configure your message listener class to be a message-driven bean. The application server will then take care of the rest.</p>

      <p>Message-driven beans can implement any messaging type. Most commonly, however, they implement the Java Message Service (JMS) technology.</p>

      <p>This section describes a simple message-driven bean example. Before proceeding, you should read the basic conceptual information in the section <a href="../Text/ejb-intro.xhtml#GIPKO">What Is a Message-Driven Bean?</a> as well as <a href="../Text/jms-concepts.xhtml#BNCGQ">Using Message-Driven Beans to Receive Messages Asynchronously</a>.</p><a id="BNBPL"></a><a id="JEETT00453"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.6.1</span> Overview of the simplemessage Example</h2>

        <p>The <code>simplemessage</code> application has the following components:</p>

        <ul>
          <li>
            <p><code>SimpleMessageClient</code>: An application client that sends several messages to a queue</p>
          </li>

          <li>
            <p><code>SimpleMessageBean</code>: A message-driven bean that asynchronously processes the messages that are sent to the queue</p>
          </li>
        </ul>

        <p><a href="../Text/jms-examples.xhtml#BNBPM">Figure 46-3</a> illustrates the structure of this application. The application client sends messages to the queue, which was created administratively using the Administration Console. The JMS provider (in this case, GlassFish Server) delivers the messages to the instances of the message-driven bean, which then processes the messages.</p>

        <div class="figure">
          <a id="BNBPM"></a><a id="JEETT00028"></a>

          <p class="titleinfigure">Figure 46-3 The simplemessage Application</p>

          <div style="text-align: center;"><img alt="Description of Figure 46-3 follows" longdesc="img_text/jeett_dt_036.htm" src="../Images/jeett_dt_036.png" style="line-height: 1.6em;" title="Description of Figure 46-3 follows" /></div>
        </div>

        <div class="figure">
          Description of "Figure 46-3 The simplemessage Application"<br />
          <br />
        </div>

        <p>The source code for this application is in the <span class="variable">tut-install</span><code>/examples/jms/simplemessage/</code> directory.</p>
      </div><a id="BNBPN"></a><a id="JEETT00454"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.6.2</span> <a id="sthref2436"></a><a id="sthref2437"></a><a id="sthref2438"></a><a id="sthref2439"></a><a id="sthref2440"></a>The simplemessage Application Client</h2>

        <p>The <code>SimpleMessageClient</code> sends messages to the queue that the <code>SimpleMessageBean</code> listens to. The client starts by injecting the connection factory and queue resources:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Resource(lookup = "java:comp/DefaultJMSConnectionFactory")
private static ConnectionFactory connectionFactory;

@Resource(lookup = "jms/MyQueue")
private static Queue queue;</pre>

        <p>Next, the client creates the <code>JMSContext</code> in a <code>try</code>-with-resources block:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">String text;
final int NUM_MSGS = 3;

try (JMSContext context = connectionFactory.createContext();) {</pre>

        <p>Finally, the client sends several text messages to the queue:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">for (int i = 0; i &lt; NUM_MSGS; i++) {
    text = "This is message " + (i + 1);
    System.out.println("Sending message: " + text);
    context.createProducer().send(queue, text);
}</pre>
      </div><a id="BNBPO"></a><a id="JEETT00455"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.6.3</span> <a id="sthref2441"></a><a id="sthref2442"></a>The simplemessage Message-Driven Bean Class</h2>

        <p>The code for the <code>SimpleMessageBean</code> class illustrates the requirements of a message-driven bean class described in <a href="../Text/jms-examples.xhtml#BNCGQ">Using Message-Driven Beans to Receive Messages Asynchronously</a>.</p>

        <p>The first few lines of the <code>SimpleMessageBean</code> class use the <code>@MessageDriven</code> annotation's <code>activationConfig</code> attribute to specify configuration properties:</p>
        <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationLookup",
            propertyValue = "jms/MyQueue"),
    @ActivationConfigProperty(propertyName = "destinationType",
            propertyValue = "javax.jms.Queue")
})</pre>

        <p>See <a href="../Text/jms-examples.xhtml#GJKOH">Table 45-3</a> for a list of the available properties.</p>

        <p>See <a href="../Text/jms-examples.xhtml#BNCGW">Sending Messages from a Session Bean to an MDB</a> for examples of the <code>subscriptionDurability</code>, <code>clientId</code>, <code>subscriptionName</code>, and <code>messageSelector</code> properties.</p><a id="BNBPP"></a><a id="JEETT01113"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.6.3.1</span> <a id="sthref2443"></a><a id="sthref2444"></a><a id="sthref2445"></a>The onMessage Method</h3>

          <p>When the queue receives a message, the EJB container invokes the message listener method or methods. For a bean that uses JMS, this is the <code>onMessage</code> method of the <code>MessageListener</code> interface.</p>

          <p>In the <code>SimpleMessageBean</code> class, the <code>onMessage</code> method casts the incoming message to a <code>TextMessage</code> and displays the text:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">public void onMessage(Message inMessage) {

    try {
        if (inMessage instanceof TextMessage) {
            logger.log(Level.INFO,
                    "MESSAGE BEAN: Message received: {0}",
                    inMessage.getBody(String.class));
        } else {
            logger.log(Level.WARNING,
                    "Message of wrong type: {0}",
                    inMessage.getClass().getName());
        }
    } catch (JMSException e) {
        logger.log(Level.SEVERE,
                "SimpleMessageBean.onMessage: JMSException: {0}",
                e.toString());
        mdc.setRollbackOnly();
    }
}</pre>
        </div>
      </div><a id="BNBPQ"></a><a id="JEETT00456"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.6.4</span> Running the simplemessage Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, deploy, and run the <code>simplemessage</code> example.</p><a id="BNBPR"></a><a id="JEETT01114"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.6.4.1</span> <a id="sthref2446"></a><a id="sthref2447"></a>Creating Resources for the simplemessage Example</h3>

          <p>This example uses the queue named <code>jms/MyQueue</code> and the preconfigured default connection factory <code>java:comp/DefaultJMSConnectionFactory</code>.</p>

          <p>If you have run the simple JMS examples in <a href="../Text/jms-examples.xhtml#BNCFA">Writing Simple JMS Applications</a> and have not deleted the resources, you already have the queue. Otherwise, follow the instructions in <a href="../Text/jms-examples.xhtml#BABHEFCB">To Create Resources for the Simple Examples</a> to create it.</p>

          <p>For more information on creating JMS resources, see <a href="../Text/jms-examples.xhtml#GKTJS">Creating JMS Administered Objects</a>.</p>
        </div>

        <div class="sect3">
          <a id="sthref2448"></a>

          <h3 class="sect3"><span class="secnum">46.6.4.2</span> To Run the simplemessage Example Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/simplemessage</pre>
            </li>

            <li>
              <p>Select the <code>simplemessage</code> folder.</p>
            </li>

            <li>
              <p>Make sure that the <span class="gui-object-action">Open Required Projects</span> check box is selected, then click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>simplemessage</code> project and select <span class="gui-object-action">Build</span>. (If NetBeans IDE suggests that you run a priming build, click the box to do so.)</p>

              <p>This command packages the application client and the message-driven bean, then creates a file named <code>simplemessage.ear</code> in the <code>simplemessage-ear/target/</code> directory. It then deploys the <code>simplemessage-ear</code> module, retrieves the client stubs, and runs the application client.</p>

              <p>The output in the output window looks like this (preceded by application client container output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Sending message: This is message 1
Sending message: This is message 2
Sending message: This is message 3
To see if the bean received the messages,
 check &lt;install_dir&gt;/domains/domain1/logs/server.log.</pre>

              <p>In the server log file, lines similar to the following appear:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">MESSAGE BEAN: Message received: This is message 1
MESSAGE BEAN: Message received: This is message 2
MESSAGE BEAN: Message received: This is message 3</pre>

              <p>The received messages may appear in a different order from the order in which they were sent.</p>
            </li>

            <li>
              <p>After you have finished running the application, undeploy it using the <span class="gui-object-action">Services</span> tab.</p>
            </li>
          </ol>
        </div><a id="BNBPT"></a><a id="JEETT00208"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.6.4.3</span> To Run the simplemessage Example Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/simplemessage/</pre>
            </li>

            <li>
              <p>To compile the source files and package the application, use the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>

              <p>This target packages the application client and the message-driven bean, then creates a file named <code>simplemessage.ear</code> in the <code>simplemessage-ear/target/</code> directory. It then deploys the <code>simplemessage-ear</code> module, retrieves the client stubs, and runs the application client.</p>

              <p>The output in the terminal window looks like this (preceded by application client container output):</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">Sending message: This is message 1
Sending message: This is message 2
Sending message: This is message 3
To see if the bean received the messages,
 check &lt;install_dir&gt;/domains/domain1/logs/server.log.</pre>

              <p>In the server log file, lines similar to the following appear:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">MESSAGE BEAN: Message received: This is message 1
MESSAGE BEAN: Message received: This is message 2
MESSAGE BEAN: Message received: This is message 3</pre>

              <p>The received messages may appear in a different order from the order in which they were sent.</p>
            </li>

            <li>
              <p>After you have finished running the application, undeploy it using the <code>mvn cargo:undeploy</code> command.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNCGW"></a><a id="JEETT00556"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.7</span> <a id="sthref2449"></a><a id="sthref2450"></a><a id="sthref2451"></a><a id="sthref2452"></a><a id="sthref2453"></a>Sending Messages from a Session Bean to an MDB</h1>

      <p>This section explains how to write, compile, package, deploy, and run an application that uses the JMS API in conjunction with a session bean. The application contains the following components:</p>

      <ul>
        <li>
          <p>An application client that invokes a session bean</p>
        </li>

        <li>
          <p>A session bean that publishes several messages to a topic</p>
        </li>

        <li>
          <p>A message-driven bean that receives and processes the messages using a durable topic subscription and a message selector</p>
        </li>
      </ul>

      <p>You will find the source files for this section in the <span class="variable">tut-install</span><code>/examples/jms/clientsessionmdb/</code> directory. Path names in this section are relative to this directory.</p><a id="BNCGX"></a><a id="JEETT01299"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.7.1</span> Writing the Application Components for the clientsessionmdb Example</h2>

        <p>This application demonstrates how to send messages from an enterprise bean (in this case, a session bean) rather than from an application client, as in the example in <a href="../Text/jms-examples.xhtml#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a>. <a href="../Text/jms-examples.xhtml#BNCGY">Figure 46-4</a> illustrates the structure of this application. Sending messages from an enterprise bean is very similar to sending messages from a managed bean, which was shown in <a href="../Text/jms-examples.xhtml#BABBABFC">Sending and Receiving Messages Using a Simple Web Application</a>.</p>

        <div class="figure">
          <a id="BNCGY"></a><a id="JEETT00057"></a>

          <p class="titleinfigure">Figure 46-4 An Enterprise Bean Application: Client to Session Bean to Message-Driven Bean</p>

          <div style="text-align: center;"><img alt="Description of Figure 46-4 follows" longdesc="img_text/jeett_dt_037.htm" src="../Images/jeett_dt_037.png" style="line-height: 1.6em;" title="Description of Figure 46-4 follows" /></div>
        </div>

        <div class="figure">
          Description of "Figure 46-4 An Enterprise Bean Application: Client to Session Bean to Message-Driven Bean"<br />
          <br />
        </div>

        <p>The Publisher enterprise bean in this example is the enterprise-application equivalent of a wire-service news feed that categorizes news events into six news categories. The message-driven bean could represent a newsroom, where the sports desk, for example, would set up a subscription for all news events pertaining to sports.</p>

        <p>The application client in the example injects the Publisher enterprise bean's remote home interface and then calls the bean's business method. The enterprise bean creates 18 text messages. For each message, it sets a <code>String</code> property randomly to one of six values representing the news categories and then publishes the message to a topic. The message-driven bean uses a message selector for the property to limit which of the published messages will be delivered to it.</p><a id="BNCGZ"></a><a id="JEETT00829"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.7.1.1</span> Coding the Application Client: MyAppClient.java</h3>

          <p>The application client, <code>MyAppClient.java</code>, found under <code>clientsessionmdb-app-client</code>, performs no JMS API operations and so is simpler than the client in <a href="../Text/jms-examples.xhtml#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a>. The client uses dependency injection to obtain the Publisher enterprise bean's business interface:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@EJB(name="PublisherRemote")
private static PublisherRemote publisher;</pre>

          <p>The client then calls the bean's business method twice.</p>
        </div><a id="BNCHA"></a><a id="JEETT00830"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.7.1.2</span> Coding the Publisher Session Bean</h3>

          <p>The Publisher bean is a stateless session bean that has one business method. The Publisher bean uses a remote interface rather than a local interface because it is accessed from the application client.</p>

          <p>The remote interface, <code>PublisherRemote.java</code>, found under <code>clientsessionmdb-ejb</code>, declares a single business method, <code>publishNews</code>.</p>

          <p>The bean class, <code>PublisherBean.java</code>, also found under <code>clientsessionmdb-ejb</code>, implements the <code>publishNews</code> method and its helper method <code>chooseType</code>. The bean class injects <code>SessionContext</code> and <code>Topic</code> resources (the topic is defined in the message-driven bean). It then injects a <code>JMSContext</code>, which uses the preconfigured default connection factory unless you specify otherwise. The bean class begins as follows:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Stateless
@Remote({
    PublisherRemote.class
})
public class PublisherBean implements PublisherRemote {

    @Resource
    private SessionContext sc;
    @Resource(lookup = "java:module/jms/newsTopic")
    private Topic topic;
    @Inject
    private JMSContext context;
    ...</pre>

          <p>The business method <code>publishNews</code> creates a <code>JMSProducer</code> and publishes the messages.</p>
        </div><a id="BNCHB"></a><a id="JEETT00831"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.7.1.3</span> <a id="sthref2455"></a><a id="sthref2456"></a>Coding the Message-Driven Bean: MessageBean.java</h3>

          <p>The message-driven bean class, <code>MessageBean.java</code>, found under <code>clientsessionmdb-ejb</code>, is almost identical to the one in <a href="../Text/jms-examples.xhtml#BNBPK">Receiving Messages Asynchronously Using a Message-Driven Bean</a>. However, the <code>@MessageDriven</code> annotation is different, because instead of a queue, the bean is using a topic, a durable subscription, and a message selector. The bean defines a topic for the use of the application; the definition uses the <code>java:module</code> scope because both the session bean and the message-driven bean are in the same module. Because the destination is defined in the message-driven bean, the <code>@MessageDriven</code> annotation uses the <code>destinationLookup</code> activation config property. (See <a href="../Text/jms-concepts.xhtml#BABHFBDH">Creating Resources for Java EE Applications</a> for more information.) The annotation also sets the activation config properties <code>messageSelector</code>, <code>subscriptionDurability</code>, <code>clientId</code>, and <code>subscriptionName</code>, as follows:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@JMSDestinationDefinition(
        name = "java:module/jms/newsTopic",
        interfaceName = "javax.jms.Topic",
        destinationName = "PhysicalNewsTopic")
@MessageDriven(activationConfig = {
    @ActivationConfigProperty(propertyName = "destinationLookup",
            propertyValue = "java:module/jms/newsTopic"),
    @ActivationConfigProperty(propertyName = "destinationType",
            propertyValue = "javax.jms.Topic"),
    @ActivationConfigProperty(propertyName = "messageSelector",
            propertyValue = "NewsType = 'Sports' OR NewsType = 'Opinion'"),
    @ActivationConfigProperty(propertyName = "subscriptionDurability",
            propertyValue = "Durable"),
    @ActivationConfigProperty(propertyName = "clientId",
            propertyValue = "MyID"),
    @ActivationConfigProperty(propertyName = "subscriptionName",
            propertyValue = "MySub")
})</pre>

          <p>The topic is the one defined in the <code>PublisherBean</code>. The message selector in this case represents both the sports and opinion desks, just to demonstrate the syntax of message selectors.</p>

          <p>The JMS resource adapter uses these properties to create a connection factory for the message-driven bean that allows the bean to use a durable subscription.</p>
        </div>
      </div>

      <div class="sect2">
        <a id="sthref2457"></a>

        <h2 class="sect2"><span class="secnum">46.7.2</span> Running the clientsessionmdb Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, deploy, and run the <code>simplemessage</code> example.</p>

        <p>This example uses an annotation-defined topic and the preconfigured default connection factory <code>java:comp/DefaultJMSConnectionFactory</code>, so you do not have to create resources for it.</p>

        <div class="sect3">
          <a id="sthref2458"></a>

          <h3 class="sect3"><span class="secnum">46.7.2.1</span> To Run clientsessionmdb Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/clientsessionmdb</pre>
            </li>

            <li>
              <p>Select the <code>clientsessionmdb</code> folder.</p>
            </li>

            <li>
              <p>Make sure that the <span class="gui-object-action">Open Required Projects</span> check box is selected, then click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>clientsessionmdb</code> project and select <span class="gui-object-action">Build</span>. (If NetBeans IDE suggests that you run a priming build, click the box to do so.)</p>

              <p>This command creates the following:</p>

              <ul>
                <li>
                  <p>An application client JAR file that contains the client class file and the session bean's remote interface, along with a manifest file that specifies the main class and places the EJB JAR file in its classpath</p>
                </li>

                <li>
                  <p>An EJB JAR file that contains both the session bean and the message-driven bean</p>
                </li>

                <li>
                  <p>An application EAR file that contains the two JAR files</p>
                </li>
              </ul>

              <p>The <code>clientsessionmdb.ear</code> file is created in the <code>clientsessionmdb-ear/target/</code> directory.</p>

              <p>The command then deploys the EAR file, retrieves the client stubs, and runs the client.</p>

              <p>The client displays these lines:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">To view the bean output,
 check &lt;install_dir&gt;/domains/domain1/logs/server.log.</pre>

              <p>The output from the enterprise beans appears in the server log file. The Publisher session bean sends two sets of 18 messages numbered 0 through 17. Because of the message selector, the message-driven bean receives only the messages whose <code>NewsType</code> property is <code>Sports</code> or <code>Opinion</code>.</p>
            </li>

            <li>
              <p>Use the <span class="gui-object-action">Services</span> tab to undeploy the application after you have finished running it.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2459"></a>

          <h3 class="sect3"><span class="secnum">46.7.2.2</span> To Run clientsessionmdb Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>).</p>
            </li>

            <li>
              <p>Go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/clientsessionmdb/</pre>
            </li>

            <li>
              <p>To compile the source files and package, deploy, and run the application, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>

              <p>This command creates the following:</p>

              <ul>
                <li>
                  <p>An application client JAR file that contains the client class file and the session bean's remote interface, along with a manifest file that specifies the main class and places the EJB JAR file in its classpath</p>
                </li>

                <li>
                  <p>An EJB JAR file that contains both the session bean and the message-driven bean</p>
                </li>

                <li>
                  <p>An application EAR file that contains the two JAR files</p>
                </li>
              </ul>

              <p>The <code>clientsessionmdb.ear</code> file is created in the <code>clientsessionmdb-ear/target/</code> directory.</p>

              <p>The command then deploys the EAR file, retrieves the client stubs, and runs the client.</p>

              <p>The client displays these lines:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">To view the bean output,
 check &lt;install_dir&gt;/domains/domain1/logs/server.log.</pre>

              <p>The output from the enterprise beans appears in the server log file. The Publisher session bean sends two sets of 18 messages numbered 0 through 17. Because of the message selector, the message-driven bean receives only the messages whose <code>NewsType</code> property is <code>Sports</code> or <code>Opinion</code>.</p>
            </li>

            <li>
              <p>Undeploy the application after you have finished running it:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn cargo:undeploy</pre>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNCHF"></a><a id="JEETT00557"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.8</span> <a id="sthref2460"></a><a id="sthref2461"></a><a id="sthref2462"></a><a id="sthref2463"></a>Using an Entity to Join Messages from Two MDBs</h1>

      <p>This section explains how to write, compile, package, deploy, and run an application that uses the JMS API with an entity. The application uses the following components:</p>

      <ul>
        <li>
          <p>An application client that both sends and receives messages</p>
        </li>

        <li>
          <p>Two message-driven beans</p>
        </li>

        <li>
          <p>An entity class</p>
        </li>
      </ul>

      <p>You will find the source files for this section in the <span class="variable">tut-install</span><code>/examples/jms/clientmdbentity/</code> directory. Path names in this section are relative to this directory.</p><a id="BNCHG"></a><a id="JEETT01301"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.8.1</span> Overview of the clientmdbentity Example Application</h2>

        <p>This application simulates, in a simplified way, the work flow of a company's human resources (HR) department when it processes a new hire. This application also demonstrates how to use the Java EE platform to accomplish a task that many JMS applications need to perform.</p>

        <p>A messaging client must often wait for several messages from various sources. It then uses the information in all these messages to assemble a message that it then sends to another destination. The common term for this design pattern (which is not specific to JMS) is <span class="glossaryterm">joining messages</span>. Such a task must be transactional, with all the receives and the send as a single transaction. If not all the messages are received successfully, the transaction can be rolled back. For an application client example that illustrates this task, see <a href="../Text/jms-examples.xhtml#BNCGJ">Using Local Transactions</a>.</p>

        <p>A message-driven bean can process only one message at a time in a transaction. To provide the ability to join messages, an application can have the message-driven bean store the interim information in a Java Persistence API entity. The entity can then determine whether all the information has been received; when it has, the entity can report this back to one of the message-driven beans, which then creates and sends the message to the other destination. After it has completed its task, the entity can be removed.</p>

        <p>The basic steps of the application are as follows.</p>

        <ol>
          <li>
            <p>The HR department's application client generates an employee ID for each new hire and then publishes a message (M1) containing the new hire's name, employee ID, and position. It publishes the message to a topic because the message needs to be consumed by two message-driven beans. The client then creates a temporary queue, <code>ReplyQueue</code>, with a message listener that waits for a reply to the message. (See <a href="../Text/jms-concepts.xhtml#BNCGB">Creating Temporary Destinations</a> for more information.)</p>
          </li>

          <li>
            <p>Two message-driven beans process each message: One bean, <code>OfficeMDB</code>, assigns the new hire's office number, and the other bean, <code>EquipmentMDB</code>, assigns the new hire's equipment. The first bean to process the message creates and persists an entity named <code>SetupOffice</code>, then calls a business method of the entity to store the information it has generated. The second bean locates the existing entity and calls another business method to add its information.</p>
          </li>

          <li>
            <p>When both the office and the equipment have been assigned, the entity business method returns a value of <code>true</code> to the message-driven bean that called the method. The message-driven bean then sends to the reply queue a message (M2) describing the assignments. Then it removes the entity. The application client's message listener retrieves the information.</p>
          </li>
        </ol>

        <p><a href="../Text/jms-examples.xhtml#BNCHH">Figure 46-5</a> illustrates the structure of this application. Of course, an actual HR application would have more components; other beans could set up payroll and benefits records, schedule orientation, and so on.</p>

        <p><a href="../Text/jms-examples.xhtml#BNCHH">Figure 46-5</a> assumes that <code>OfficeMDB</code> is the first message-driven bean to consume the message from the client. <code>OfficeMDB</code> then creates and persists the <code>SetupOffice</code> entity and stores the office information. <code>EquipmentMDB</code> then finds the entity, stores the equipment information, and learns that the entity has completed its work. <code>EquipmentMDB</code> then sends the message to the reply queue and removes the entity.</p>

        <div class="figure">
          <a id="BNCHH"></a><a id="JEETT00058"></a>

          <p class="titleinfigure">Figure 46-5 An Enterprise Bean Application: Client to Message-Driven Beans to Entity</p>

          <div style="text-align: center;"><img alt="Description of Figure 46-5 follows" longdesc="img_text/jeett_dt_038.htm" src="../Images/jeett_dt_038.png" style="line-height: 1.6em;" title="Description of Figure 46-5 follows" /></div>
        </div>

        <div class="figure">
          Description of "Figure 46-5 An Enterprise Bean Application: Client to Message-Driven Beans to Entity"<br />
          <br />
        </div>
      </div><a id="BNCHI"></a><a id="JEETT01302"></a>

      <div class="sect2">
        <h2 class="sect2"><span class="secnum">46.8.2</span> Writing the Application Components for the clientmdbentity Example</h2>

        <p>Writing the components of the application involves coding the application client, the message-driven beans, and the entity class.</p><a id="BNCHJ"></a><a id="JEETT00832"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.8.2.1</span> <a id="sthref2465"></a><a id="sthref2466"></a><a id="sthref2467"></a><a id="sthref2468"></a>Coding the Application Client: HumanResourceClient.java</h3>

          <p>The application client, <code>HumanResourceClient.java</code>, found under <code>clientmdbentity-app-client</code>, performs the following steps:</p>

          <ol>
            <li>
              <p>Defines a topic for the application, using the <code>java:app</code> namespace because the topic is used in both the application client and the EJB module</p>
            </li>

            <li>
              <p>Injects <code>ConnectionFactory</code> and <code>Topic</code> resources</p>
            </li>

            <li>
              <p>Creates a <code>TemporaryQueue</code> to receive notification of processing that occurs, based on new-hire events it has published</p>
            </li>

            <li>
              <p>Creates a <code>JMSConsumer</code> for the <code>TemporaryQueue</code>, sets the <code>JMSConsumer</code>'s message listener, and starts the connection</p>
            </li>

            <li>
              <p>Creates a <code>MapMessage</code></p>
            </li>

            <li>
              <p>Creates five new employees with randomly generated names, positions, and ID numbers (in sequence) and publishes five messages containing this information</p>
            </li>
          </ol>

          <p>The message listener, <code>HRListener</code>, waits for messages that contain the assigned office and equipment for each employee. When a message arrives, the message listener displays the information received and determines whether all five messages have arrived. When they have, the message listener notifies the <code>main</code> method, which then exits.</p>
        </div><a id="BNCHK"></a><a id="JEETT00833"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.8.2.2</span> <a id="sthref2469"></a>Coding the Message-Driven Beans for the clientmdbentity Example</h3>

          <p>This example uses two message-driven beans, both under <code>clientmdbentity-ejb</code>:</p>

          <ul>
            <li>
              <p><code>EquipmentMDB.java</code></p>
            </li>

            <li>
              <p><code>OfficeMDB.java</code></p>
            </li>
          </ul>

          <p>The beans take the following steps.</p>

          <ol>
            <li>
              <p>They inject a <code>MessageDrivenContext</code> resource, an <code>EntityManager</code>, and a <code>JMSContext</code>.</p>
            </li>

            <li>
              <p>The <code>onMessage</code> method retrieves the information in the message. The <code>EquipmentMDB</code>'s <code>onMessage</code> method chooses equipment, based on the new hire's position; the <code>OfficeMDB</code>'s <code>onMessage</code> method randomly generates an office number.</p>
            </li>

            <li>
              <p>After a slight delay to simulate real world processing hitches, the <code>onMessage</code> method calls a helper method, <code>compose</code>.</p>
            </li>

            <li>
              <p>The <code>compose</code> method takes the following steps.</p>

              <ol>
                <li>
                  <p>It either creates and persists the <code>SetupOffice</code> entity or finds it by primary key.</p>
                </li>

                <li>
                  <p>It uses the entity to store the equipment or the office information in the database, calling either the <code>doEquipmentList</code> or the <code>doOfficeNumber</code> business method.</p>
                </li>

                <li>
                  <p>If the business method returns <code>true</code>, meaning that all of the information has been stored, it retrieves the reply destination information from the message, creates a <code>JMSProducer</code>, and sends a reply message that contains the information stored in the entity.</p>
                </li>

                <li>
                  <p>It removes the entity.</p>
                </li>
              </ol>
            </li>
          </ol>
        </div><a id="BNCHL"></a><a id="JEETT00834"></a>

        <div class="sect3">
          <h3 class="sect3"><span class="secnum">46.8.2.3</span> Coding the Entity Class for the clientmdbentity Example</h3>

          <p>The <code>SetupOffice.java</code> class, also under <code>clientmdbentity-ejb</code>, is an entity class. The entity and the message-driven beans are packaged together in an EJB JAR file. The entity class is declared as follows:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Entity
public class SetupOffice implements Serializable {</pre>

          <p>The class contains a no-argument constructor and a constructor that takes two arguments, the employee ID and name. It also contains getter and setter methods for the employee ID, name, office number, and equipment list. The getter method for the employee ID has the <code>@Id</code> annotation to indicate that this field is the primary key:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">@Id
public String getEmployeeId() {
    return id;
}</pre>

          <p>The class also implements the two business methods, <code>doEquipmentList</code> and <code>doOfficeNumber</code>, and their helper method, <code>checkIfSetupComplete</code>.</p>

          <p>The message-driven beans call the business methods and the getter methods.</p>

          <p>The <code>persistence.xml</code> file for the entity specifies the most basic settings:</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;persistence version="2.1" 
             xmlns="http://xmlns.jcp.org/xml/ns/persistence" 
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence 
               http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd"&gt;
  &lt;persistence-unit name="clientmdbentity-ejbPU" transaction-type="JTA"&gt;
    &lt;provider&gt;org.eclipse.persistence.jpa.PersistenceProvider&lt;/provider&gt;
    &lt;jta-data-source&gt;java:comp/DefaultDataSource&lt;/jta-data-source&gt;
    &lt;properties&gt;
      &lt;property name="eclipselink.ddl-generation" 
                value="drop-and-create-tables"/&gt;
    &lt;/properties&gt;
  &lt;/persistence-unit&gt;
&lt;/persistence&gt;</pre>
        </div>
      </div>

      <div class="sect2">
        <a id="sthref2470"></a>

        <h2 class="sect2"><span class="secnum">46.8.3</span> Running the clientmdbentity Example</h2>

        <p>You can use either NetBeans IDE or Maven to build, deploy, and run the <code>clientmdbentity</code> example.</p>

        <p>Because the example defines its own application-private topic and uses the preconfigured default connection factory <code>java:comp/DefaultJMSConnectionFactory</code> and the preconfigured default JDBC resource <code>java:comp/DefaultDataSource</code>, you do not need to create resources for it.</p>

        <div class="sect3">
          <a id="sthref2471"></a>

          <h3 class="sect3"><span class="secnum">46.8.3.1</span> To Run clientmdbentity Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>), as well as the database server (see <a href="../Text/usingexamples.xhtml#BNADK">Starting and Stopping the Java DB Server</a>).</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/clientmdbentity</pre>
            </li>

            <li>
              <p>Select the <code>clientmdbentity</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>clientmdbentity</code> project and select <span class="gui-object-action">Build</span>.</p>

              <p>This command creates the following:</p>

              <ul>
                <li>
                  <p>An application client JAR file that contains the client class and listener class files, along with a manifest file that specifies the main class</p>
                </li>

                <li>
                  <p>An EJB JAR file that contains the message-driven beans and the entity class, along with the <code>persistence.xml</code> file</p>
                </li>

                <li>
                  <p>An application EAR file that contains the two JAR files along with an <code>application.xml</code> file</p>

                  <p>The <code>clientmdbentity.ear</code> file is created in the <code>clientmdbentity-ear/target/</code> directory.</p>
                </li>
              </ul>

              <p>The command then deploys the EAR file, retrieves the client stubs, and runs the application client.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2472"></a>

          <h3 class="sect3"><span class="secnum">46.8.3.2</span> To Run clientmdbentity Using Maven</h3>

          <ol>
            <li>
              <p>Make sure that GlassFish Server has been started (see <a href="../Text/usingexamples.xhtml#BNADI">Starting and Stopping GlassFish Server</a>), as well as the database server (see <a href="../Text/usingexamples.xhtml#BNADK">Starting and Stopping the Java DB Server</a>).</p>
            </li>

            <li>
              <p>Go to the following directory:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace"><span class="variable">tut-install</span>/examples/jms/clientmdbentity/</pre>
            </li>

            <li>
              <p>To compile the source files and package, deploy, and run the application, enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">mvn install</pre>

              <p>This command creates the following:</p>

              <ul>
                <li>
                  <p>An application client JAR file that contains the client class and listener class files, along with a manifest file that specifies the main class</p>
                </li>

                <li>
                  <p>An EJB JAR file that contains the message-driven beans and the entity class, along with the <code>persistence.xml</code> file</p>
                </li>

                <li>
                  <p>An application EAR file that contains the two JAR files along with an <code>application.xml</code> file</p>
                </li>
              </ul>

              <p>The command then deploys the application, retrieves the client stubs, and runs the application client.</p>
            </li>
          </ol>
        </div>

        <div class="sect3">
          <a id="sthref2473"></a>

          <h3 class="sect3"><span class="secnum">46.8.3.3</span> Viewing the Application Output</h3>

          <p>The output in the NetBeans IDE output window or in the terminal window looks something like this (preceded by application client container output and Maven output):</p>
          <pre class="oac_no_warn" xml:space="preserve" xmlns:xml="http://www.w3.org/XML/1998/namespace">SENDER: Setting hire ID to 50, name Bill Tudor, position Programmer
SENDER: Setting hire ID to 51, name Carol Jones, position Senior Programmer
SENDER: Setting hire ID to 52, name Mark Wilson, position Manager
SENDER: Setting hire ID to 53, name Polly Wren, position Senior Programmer
SENDER: Setting hire ID to 54, name Joe Lawrence, position Director
Waiting for 5 message(s)
New hire event processed:
  Employee ID: 52
  Name: Mark Wilson
  Equipment: Tablet
  Office number: 294
Waiting for 4 message(s)
New hire event processed:
  Employee ID: 53
  Name: Polly Wren
  Equipment: Laptop
  Office number: 186
Waiting for 3 message(s)
New hire event processed:
  Employee ID: 54
  Name: Joe Lawrence
  Equipment: Mobile Phone
  Office number: 135
Waiting for 2 message(s)
New hire event processed:
  Employee ID: 50
  Name: Bill Tudor
  Equipment: Desktop System
  Office number: 200
Waiting for 1 message(s)
New hire event processed:
  Employee ID: 51
  Name: Carol Jones
  Equipment: Laptop
  Office number: 262</pre>

          <p>The output from the message-driven beans and the entity class appears in the server log.</p>

          <p>For each employee, the application first creates the entity and then finds it. You may see runtime errors in the server log, and transaction rollbacks may occur. The errors occur if both of the message-driven beans discover at the same time that the entity does not yet exist, so they both try to create it. The first attempt succeeds, but the second fails because the bean already exists. After the rollback, the second message-driven bean tries again and succeeds in finding the entity. Container-managed transactions allow the application to run correctly, in spite of these errors, with no special programming.</p>

          <p>To undeploy the application after you have finished running it, use the <span class="gui-object-action">Services</span> tab or issue the <code>mvn cargo:undeploy</code> command.</p>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BABDFDJC"></a>

    <div class="sect1">
      <h1 class="sect1"><span class="secnum">46.9</span> Using NetBeans IDE to Create JMS Resources</h1>

      <p>When you write your own JMS applications, you will need to create resources for them. This section explains how to use NetBeans IDE to create <code>src/main/setup/glassfish-resources.xml</code> files similar to those used in the examples in this chapter. It also explains how to use NetBeans IDE to delete the resources.</p>

      <p>You can also create, list, and delete JMS resources using the Administration Console or the <code>asadmin create-jms-resource</code>, <code>asadmin list-jms-resources</code>, and <code>asadmin delete-jms-resources</code> commands. For information, consult the GlassFish Server documentation or enter <code>asadmin help</code> <span class="variable">command-name</span>.</p>

      <div class="sect2">
        <a id="sthref2474"></a>

        <h2 class="sect2"><span class="secnum">46.9.1</span> <a id="sthref2475"></a><a id="sthref2476"></a><a id="sthref2477"></a><a id="sthref2478"></a>To Create JMS Resources Using NetBeans IDE</h2>

        <p>Follow these steps to create a JMS resource in GlassFish Server using NetBeans IDE. Repeat these steps for each resource you need.</p>

        <ol>
          <li>
            <p>Right-click the project for which you want to create resources and select <span class="gui-object-action">New</span>, then select <span class="gui-object-action">Other</span>.</p>
          </li>

          <li>
            <p>In the <span class="gui-object-title">New File</span> wizard, under <span class="gui-object-action">Categories</span>, select <span class="gui-object-action">GlassFish</span>.</p>
          </li>

          <li>
            <p>Under <span class="gui-object-action">File Types</span>, select <span class="gui-object-action">JMS Resource</span>.</p>
          </li>

          <li>
            <p>On the <span class="gui-object-title">General Attributes - JMS Resource</span> page, in the <span class="gui-object-action">JNDI Name</span> field, enter the name of the resource.</p>

            <p>By convention, JMS resource names begin with <code>jms/</code>.</p>
          </li>

          <li>
            <p>Select the option for the resource type.</p>

            <p>Normally, this is either <code>javax.jms.Queue</code>, <code>javax.jms.Topic</code>, or <code>javax.jms.ConnectionFactory</code>.</p>
          </li>

          <li>
            <p>Click <span class="gui-object-action">Next</span>.</p>
          </li>

          <li>
            <p>On the <span class="gui-object-title">JMS Properties</span> page, for a queue or topic, enter a name for a physical queue in the <span class="gui-object-action">Value</span> field for the <span class="gui-object-action">Name</span> property.</p>

            <p>You can enter any value for this required field.</p>

            <p>Connection factories have no required properties. In a few situations, you may need to specify a property.</p>
          </li>

          <li>
            <p>Click <span class="gui-object-action">Finish</span>.</p>

            <p>A file named <code>glassfish-resources.xml</code> is created in your Maven project, in a directory named <code>src/main/setup/</code>. In the <span class="gui-object-action">Projects</span> tab, you can find it under the <span class="gui-object-action">Other Sources</span> node. You will need to run the <code>asadmin add-resources</code> command to create the resources in GlassFish Server.</p>
          </li>
        </ol>
      </div>

      <div class="sect2">
        <a id="sthref2479"></a>

        <h2 class="sect2"><span class="secnum">46.9.2</span> To Delete JMS Resources Using NetBeans IDE</h2>

        <ol>
          <li>
            <p>In the <span class="gui-object-action">Services</span> tab, expand the <span class="gui-object-action">Servers</span> node, then expand the <span class="gui-object-action">GlassFish Server</span> node.</p>
          </li>

          <li>
            <p>Expand the <span class="gui-object-action">Resources</span> node, then expand the <span class="gui-object-action">Connector Resources</span> node.</p>
          </li>

          <li>
            <p>Expand the <span class="gui-object-action">Admin Object Resources</span> node.</p>
          </li>

          <li>
            <p>Right-click any destination you want to remove and select <span class="gui-object-action">Unregister</span>.</p>
          </li>

          <li>
            <p>Expand the <span class="gui-object-action">Connector Connection Pools</span> node.</p>
          </li>

          <li>
            <p>Right-click the connection pool that corresponds to the connection factory you removed and select <span class="gui-object-action">Unregister</span>.</p>

            <p>When you remove a connector connection pool, the associated connector resource is also deleted. This action removes the connection factory.</p>
          </li>
        </ol>
      </div>
    </div>
  </div>
</body>
</html>
