<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="CHDGJIIA"></a>

    <h1 class="chapter"><span class="secnum">21</span> <a id="sthref1334"></a><a id="sthref1335"></a>Introduction to Bean Validation</h1>

    <p>Validating input received from the user to maintain data integrity is an important part of application logic. Validation of data can take place at different layers in even the simplest of applications, as shown in <a href="../Text/jsf-facelets.xhtml#GIPOB">Developing a Simple Facelets Application: The guessnumber-jsf Example Application</a>. The <code>guessnumber-jsf</code> example application validates the user input (in the <code>h:inputText</code> tag) for numerical data at the presentation layer and for a valid range of numbers at the business layer.</p>

    <p>The Java API for JavaBean Validation ("Bean Validation") provides a facility for validating objects, object members, methods, and constructors. In Java EE environments, Bean Validation integrates with Java EE containers and services to allow developers to easily define and enforce validation constraints. Bean Validation is available as part of the Java EE 7 platform.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/bean-validation.xhtml#GIRCZ">Using Bean Validation Constraints</a></p>
      </li>

      <li>
        <p><a href="../Text/bean-validation.xhtml#GKCRG">Validating Null and Empty Strings</a></p>
      </li>

      <li>
        <p><a href="../Text/bean-validation.xhtml#CACJIBEJ">Validating Constructors and Methods</a></p>
      </li>

      <li>
        <p><a href="../Text/bean-validation.xhtml#CACDECFE">Further Information about Bean Validation</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="GIRCZ"></a><a id="JEETT00357"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_47"><span class="secnum">21.1</span> <a id="sthref1336"></a><a id="sthref1337"></a>Using Bean Validation Constraints</h1>

      <p>The Bean Validation model is supported by constraints in the form of annotations placed on a field, method, or class of a JavaBeans component, such as a managed bean.</p>

      <p>Constraints can be built in or user defined. User-defined constraints are called custom constraints. Several built-in constraints are available in the <code>javax.validation.constraints</code> package. <a href="../Text/bean-validation.xhtml#GKAGK">Table 21-1</a> lists all the built-in constraints. See <a href="../Text/bean-validation-advanced.xhtml#GKFGX">Creating Custom Constraints</a> for information on creating custom constraints.</p>

      <div class="tblhruleformal">
        <a id="sthref1338"></a><a id="GKAGK"></a>

        <p class="titleintable">Table 21-1 Built-In Bean Validation Constraints</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the built-in bean validation constraints and provides examples of each." title="Built-In Bean Validation Constraints" width="100%">
          <col width="16%" />
          <col width="29%" />
          <col width="*" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t2" valign="bottom">Constraint</th>

              <th align="left" id="r1c2-t2" valign="bottom">Description</th>

              <th align="left" id="r1c3-t2" valign="bottom">Example</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r2c1-t2">
                <p><code>@AssertFalse</code></p>
              </td>

              <td align="left" headers="r2c1-t2 r1c2-t2">
                <p>The value of the field or property must be <code>false</code>.</p>
              </td>

              <td align="left" headers="r2c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@AssertFalse
boolean isUnsupported;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r3c1-t2">
                <p><code>@AssertTrue</code></p>
              </td>

              <td align="left" headers="r3c1-t2 r1c2-t2">
                <p>The value of the field or property must be <code>true</code>.</p>
              </td>

              <td align="left" headers="r3c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@AssertTrue
boolean isActive;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r4c1-t2">
                <p><code>@DecimalMax</code></p>
              </td>

              <td align="left" headers="r4c1-t2 r1c2-t2">
                <p>The value of the field or property must be a decimal value lower than or equal to the number in the value element.</p>
              </td>

              <td align="left" headers="r4c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@DecimalMax("30.00")
BigDecimal discount;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r5c1-t2">
                <p><code>@DecimalMin</code></p>
              </td>

              <td align="left" headers="r5c1-t2 r1c2-t2">
                <p>The value of the field or property must be a decimal value greater than or equal to the number in the value element.</p>
              </td>

              <td align="left" headers="r5c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@DecimalMin("5.00")
BigDecimal discount;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r6c1-t2">
                <p><code>@Digits</code></p>
              </td>

              <td align="left" headers="r6c1-t2 r1c2-t2">
                <p>The value of the field or property must be a number within a specified range. The <code>integer</code> element specifies the maximum integral digits for the number, and the <code>fraction</code> element specifies the maximum fractional digits for the number.</p>
              </td>

              <td align="left" headers="r6c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Digits(integer=6, fraction=2)
BigDecimal price;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r7c1-t2">
                <p><code>@Future</code></p>
              </td>

              <td align="left" headers="r7c1-t2 r1c2-t2">
                <p>The value of the field or property must be a date in the future.</p>
              </td>

              <td align="left" headers="r7c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Future
Date eventDate;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r8c1-t2">
                <p><code>@Max</code></p>
              </td>

              <td align="left" headers="r8c1-t2 r1c2-t2">
                <p>The value of the field or property must be an integer value lower than or equal to the number in the value element.</p>
              </td>

              <td align="left" headers="r8c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Max(10)
int quantity;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r9c1-t2">
                <p><code>@Min</code></p>
              </td>

              <td align="left" headers="r9c1-t2 r1c2-t2">
                <p>The value of the field or property must be an integer value greater than or equal to the number in the value element.</p>
              </td>

              <td align="left" headers="r9c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Min(5)
int quantity;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r10c1-t2">
                <p><code>@NotNull</code></p>
              </td>

              <td align="left" headers="r10c1-t2 r1c2-t2">
                <p>The value of the field or property must not be null.</p>
              </td>

              <td align="left" headers="r10c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@NotNull
String username;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r11c1-t2">
                <p><code>@Null</code></p>
              </td>

              <td align="left" headers="r11c1-t2 r1c2-t2">
                <p>The value of the field or property must be null.</p>
              </td>

              <td align="left" headers="r11c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Null
String unusedString;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r12c1-t2">
                <p><code>@Past</code></p>
              </td>

              <td align="left" headers="r12c1-t2 r1c2-t2">
                <p>The value of the field or property must be a date in the past.</p>
              </td>

              <td align="left" headers="r12c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Past
Date birthday;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r13c1-t2">
                <p><code>@Pattern</code></p>
              </td>

              <td align="left" headers="r13c1-t2 r1c2-t2">
                <p>The value of the field or property must match the regular expression defined in the <code>regexp</code> element.</p>
              </td>

              <td align="left" headers="r13c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Pattern(regexp="\\(\\d{3}\\)\\d{3}-\\d{4}")
String phoneNumber;
</pre>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t2" id="r14c1-t2">
                <p><code>@Size</code></p>
              </td>

              <td align="left" headers="r14c1-t2 r1c2-t2">
                <p>The size of the field or property is evaluated and must match the specified boundaries. If the field or property is a <code>String</code>, the size of the string is evaluated. If the field or property is a <code>Collection</code>, the size of the <code>Collection</code> is evaluated. If the field or property is a <code>Map</code>, the size of the <code>Map</code> is evaluated. If the field or property is an array, the size of the array is evaluated. Use one of the optional <code>max</code> or <code>min</code> elements to specify the boundaries.</p>
              </td>

              <td align="left" headers="r14c1-t2 r1c3-t2">
                <pre class="oac_no_warn" xml:space="preserve">
@Size(min=2, max=240)
String briefMessage;
</pre>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>

      <p>In the following example, a constraint is placed on a field using the built-in <code>@NotNull</code> constraint:</p>
      <pre class="oac_no_warn" xml:space="preserve">
public class Name {
    @NotNull 
    private String firstname;

    @NotNull 
    private String lastname;
    ...
}
</pre>

      <p>You can also place more than one constraint on a single JavaBeans component object. For example, you can place an additional constraint for size of field on the <code>firstname</code> and the <code>lastname</code> fields:</p>
      <pre class="oac_no_warn" xml:space="preserve">
public class Name {
    @NotNull
    @Size(min=1, max=16)
    private String firstname;

    @NotNull 
    @Size(min=1, max=16)
    private String lastname;
    ...
}
</pre>

      <p>The following example shows a method with a user-defined constraint that checks for a predefined email address pattern, such as a corporate email account:</p>
      <pre class="oac_no_warn" xml:space="preserve">
@ValidEmail 
public String getEmailAddress() {
    return emailAddress;
}
</pre>

      <p>For a built-in constraint, a default implementation is available. A user-defined or custom constraint needs a validation implementation. In the preceding example, the <code>@ValidEmail</code> custom constraint needs an implementation class.</p>

      <p>Any validation failures are gracefully handled and can be displayed by the <code>h:messages</code> tag.</p>

      <p>Any managed bean that contains Bean Validation annotations automatically gets validation constraints placed on the fields on a JavaServer Faces application's web pages.</p>

      <p>For more information on using validation constraints, see the following:</p>

      <ul>
        <li>
          <p><a href="../Text/bean-validation-advanced.xhtml#GKAHP">Chapter 22, "Bean Validation: Advanced Topics"</a></p>
        </li>

        <li>
          <p><a href="../Text/jaxrs-advanced.xhtml#BABCJEDF">Validating Resource Data with Bean Validation</a></p>
        </li>

        <li>
          <p><a href="../Text/persistence-intro.xhtml#GKAHQ">Validating Persistent Fields and Properties</a></p>
        </li>
      </ul>
    </div>
  </div>

  <div class="ind">
    <a id="GKCRG"></a><a id="JEETT00951"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_48"><span class="secnum">21.2</span> <a id="sthref1339"></a><a id="sthref1340"></a>Validating Null and Empty Strings</h1>

      <p>The Java programming language distinguishes between null and empty strings. An empty string is a string instance of zero length, whereas a null string has no value at all.</p>

      <p>An empty string is represented as <code>""</code>. It is a character sequence of zero characters. A null string is represented by <code>null</code>. It can be described as the absence of a string instance.</p>

      <p>Managed bean elements represented as a JavaServer Faces text component such as <code>inputText</code> are initialized with the value of the empty string by the JavaServer Faces implementation. Validating these strings can be an issue when user input for such fields is not required. Consider the following example, in which the string <code>testString</code> is a bean variable that will be set using input entered by the user. In this case, the user input for the field is not required.</p>
      <pre class="oac_no_warn" xml:space="preserve">
if (testString==null) {
    doSomething();
} else {
    doAnotherThing();
}
</pre>

      <p>By default, the <code>doAnotherThing</code> method is called even when the user enters no data, because the <code>testString</code> element has been initialized with the value of an empty string.</p>

      <p>In order for the Bean Validation model to work as intended, you must set the context parameter <code>javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL</code> to <code>true</code> in the web deployment descriptor file, <code>web.xml</code>:</p>
      <pre class="oac_no_warn" xml:space="preserve">
&lt;context-param&gt;
    &lt;param-name&gt;
        javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL
    &lt;/param-name&gt;
    &lt;param-value&gt;true&lt;/param-value&gt;
&lt;/context-param&gt;
</pre>

      <p>This parameter enables the JavaServer Faces implementation to treat empty strings as null.</p>

      <p>Suppose, on the other hand, that you have a <code>@NotNull</code> constraint on an element, meaning that input is required. In this case, an empty string will pass this validation constraint. However, if you set the context parameter <code>javax.faces.INTERPRET_EMPTY_STRING_SUBMITTED_VALUES_AS_NULL</code> to <code>true</code>, the value of the managed bean attribute is passed to the Bean Validation runtime as a null value, causing the <code>@NotNull</code> constraint to fail.</p>
    </div>
  </div>

  <div class="ind">
    <a id="CACJIBEJ"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_49"><span class="secnum">21.3</span> <a id="sthref1341"></a><a id="sthref1342"></a>Validating Constructors and Methods</h1>

      <p>Bean Validation constraints may be placed on the <a id="sthref1343"></a>parameters of nonstatic methods and constructors and on the return values of nonstatic methods. <a id="sthref1344"></a>Static methods and <a id="sthref1345"></a>constructors will not be validated.</p>
      <pre class="oac_no_warn" xml:space="preserve">
public class Employee {
...
  public Employee (@NotNull String name) { ... }

  public void setSalary(
      @NotNull 
      @Digits(integer=6, fraction=2) BigDecimal salary,
      @NotNull
      @ValidCurrency
      String currencyType) {
    ...
  }
...
}
</pre>

      <p>In this example, the <code>Employee</code> class has a constructor constraint requiring a name and has two sets of method parameter constraints. The amount of the salary for the employee must not be null, cannot be greater than six digits to the left of the decimal point, and cannot have more than two digits to the right of the decimal place. The currency type must not be null and is validated using a custom constraint.</p>

      <p>If you add method constraints to classes in an object hierarchy, special care must be taken to avoid unintended behavior by subtypes. See <a href="../Text/bean-validation-advanced.xhtml#CIHGJBGI">Using Method Constraints in Type Hierarchies</a> for more information.</p>

      <div class="sect2">
        <a id="sthref1346"></a>

        <h2 class="sect2" id="sigil_toc_id_50"><span class="secnum">21.3.1</span> <a id="sthref1347"></a>Cross-Parameter Constraints</h2>

        <p>Constraints that apply to multiple parameters are called <span class="glossaryterm">cross-parameter constraints</span>, and may be applied at the method or constructor level.</p>
        <pre class="oac_no_warn" xml:space="preserve">
@ConsistentPhoneParameters
@NotNull
public Employee (String name, String officePhone, String mobilePhone) {
  ...
}
</pre>

        <p>In this example, a custom cross-parameter constraint, <code>@ConsistentPhoneParameters</code>, validates that the format of the phone numbers passed into the constructor match. The <code>@NotNull</code> constraint applies to all the parameters in the constructor.</p>

        <div align="center">
          <div class="inftblnotealso">
            <br />

            <table border="1" cellpadding="3" cellspacing="0" class="NoteAlso oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
              <tbody>
                <tr>
                  <td align="left">
                    <p class="notep1">Tip:</p>

                    <p>Cross-parameter constraint annotations are applied directly to the method or constructor. Return value constraints are also applied directly to the method or constructor. To avoid confusion as to where the constraint applies, parameter or return value, choose a name for any custom constraints that identifies where the constraint applies. For instance, the preceding example applies a custom constraint, <code>@ConsistentPhoneParameters</code>, that indicates that it applies to the parameters of the method or constructor.</p>

                    <p>When you create a custom constraint that applies to both method parameters and return values, the <code>validationAppliesTo</code> element of the constraint annotation may be set to <code>ConstraintTarget.RETURN_VALUE</code> or <code>ConstraintTarget.PARAMETERS</code> to explicitly set the target of the validation constraint.</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>
        </div>
      </div>

      <div class="sect2">
        <a id="sthref1348"></a>

        <h2 class="sect2" id="sigil_toc_id_51"><span class="secnum">21.3.2</span> Identifying Parameter Constraint Violations</h2>

        <p>If a <a id="sthref1349"></a><a id="sthref1350"></a><a id="sthref1351"></a><code>ConstraintViolationException</code> occurs during a method call, the Bean Validation runtime returns a parameter index to identify which parameter caused the constraint violation. The parameter index is in the form <code>arg</code><span class="variable">PARAMETER_INDEX</span>, where <span class="variable">PARAMETER_INDEX</span> is an integer that starts at 0 for the first parameter of the method or constructor.</p>
      </div>

      <div class="sect2">
        <a id="sthref1352"></a>

        <h2 class="sect2" id="sigil_toc_id_52"><span class="secnum">21.3.3</span> <a id="sthref1353"></a>Adding Constraints to Method Return Values</h2>

        <p>To validate the return value for a method, you can apply constraints directly to the method or constructor declaration.</p>
        <pre class="oac_no_warn" xml:space="preserve">
@NotNull
public Employee getEmployee() { ... }
</pre>

        <p>Cross-parameter constraints are also applied at the method level. Custom constraints that could be applied to both the return value and the method parameters have an ambiguous constraint target. To avoid this ambiguity, add a <code>validationAppliesTo</code> element to the constraint annotation definition with the default set to either <code>ConstraintTarget.RETURN_VALUE</code> or <code>ConstraintTarget.PARAMETERS</code> to explicitly set the target of the validation constraint.</p>
        <pre class="oac_no_warn" xml:space="preserve">
@Manager(validationAppliesTo=ConstraintTarget.RETURN_VALUE)
public Employee getManager(Employee employee) { ... }
</pre>

        <p>See <a href="../Text/bean-validation-advanced.xhtml#CIHCICAI">Removing Ambiguity in Constraint Targets</a> for more information.</p>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="CACDECFE"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_53"><span class="secnum">21.4</span> Further Information about Bean Validation</h1>

      <p>For more information on Bean Validation, see</p>

      <ul>
        <li>
          <p>Bean Validation 1.1 Specification:</p>

          <p><code><a href="../Text/http://www.jcp.org/en/jsr/detail?id=.xhtml#http://www.jcp.org/en/jsr/detail?id=349">http://www.jcp.org/en/jsr/detail?id=349</a></code></p>
        </li>

        <li>
          <p>Bean Validation Specification website:</p>

          <p><code><a href="../Text/http://beanvalidation.org/.xhtml#http://beanvalidation.org/">http://beanvalidation.org/</a></code></p>
        </li>
      </ul>
    </div>
  </div>
</body>
</html>
