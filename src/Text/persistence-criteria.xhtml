<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="GJITV"></a><a id="JEETT00098"></a>

    <h1 class="chapter"><span class="secnum">40</span> <a id="sthref2128"></a><a id="sthref2129"></a><a id="sthref2130"></a>Using the Criteria API to Create Queries</h1>

    <p>The Criteria API is used to define queries for entities and their persistent state by creating query-defining objects. Criteria queries are written using Java programming language APIs, are typesafe, and are portable. Such queries work regardless of the underlying data store.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/persistence-criteria.xhtml#GJRIJ">Overview of the Criteria and Metamodel APIs</a></p>
      </li>

      <li>
        <p><a href="../Text/persistence-criteria.xhtml#GJIUP">Using the Metamodel API to Model Entity Classes</a></p>
      </li>

      <li>
        <p><a href="../Text/persistence-criteria.xhtml#GJIVM">Using the Criteria API and Metamodel API to Create Basic Typesafe Queries</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="GJRIJ"></a><a id="JEETT00501"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_715"><span class="secnum">40.1</span> <a id="sthref2131"></a>Overview of the Criteria and Metamodel APIs</h1>

      <p>Similar to JPQL, the Criteria API is based on the abstract schema of persistent entities, their relationships, and embedded objects. The Criteria API operates on this abstract schema to allow developers to find, modify, and delete persistent entities by invoking Java Persistence API entity operations. The Metamodel API works in concert with the Criteria API to model persistent entity classes for Criteria queries.</p>

      <p>The Criteria API and JPQL are closely related and are designed to allow similar operations in their queries. Developers familiar with JPQL syntax will find equivalent object-level operations in the Criteria API.</p>

      <p>The following simple Criteria query returns all instances of the <code>Pet</code> entity in the data source:</p>
      <pre class="oac_no_warn" xml:space="preserve">
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.select(pet);
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
List&lt;Pet&gt; allPets = q.getResultList();
</pre>

      <p>The equivalent JPQL query is</p>
      <pre class="oac_no_warn" xml:space="preserve">
SELECT p
FROM Pet p
</pre>

      <p>This query demonstrates the basic steps to create a Criteria query.</p>

      <ol>
        <li>
          <p>Use an <code>EntityManager</code> instance to create a <code>CriteriaBuilder</code> object.</p>
        </li>

        <li>
          <p>Create a query object by creating an instance of the <code>CriteriaQuery</code> interface. This query object's attributes will be modified with the details of the query.</p>
        </li>

        <li>
          <p>Set the query root by calling the <code>from</code> method on the <code>CriteriaQuery</code> object.</p>
        </li>

        <li>
          <p>Specify what the type of the query result will be by calling the <code>select</code> method of the <code>CriteriaQuery</code> object.</p>
        </li>

        <li>
          <p>Prepare the query for execution by creating a <code>TypedQuery&lt;T&gt;</code> instance, specifying the type of the query result.</p>
        </li>

        <li>
          <p>Execute the query by calling the <code>getResultList</code> method on the <code>TypedQuery&lt;T&gt;</code> object. Because this query returns a collection of entities, the result is stored in a <code>List</code>.</p>
        </li>
      </ol>

      <p>The tasks associated with each step are discussed in detail in this chapter.</p>

      <p>To create a <code>CriteriaBuilder</code> instance, call the <code>getCriteriaBuilder</code> method on the <code>EntityManager</code> instance:</p>
      <pre class="oac_no_warn" xml:space="preserve">
CriteriaBuilder cb = em.getCriteriaBuilder();
</pre>

      <p>Use the <code>CriteriaBuilder</code> instance to create a query object:</p>
      <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
</pre>

      <p>The query will return instances of the <code>Pet</code> entity. To create a typesafe query, specify the type of the query when you create the <code>CriteriaQuery</code> object.</p>

      <p>Call the <code>from</code> method of the query object to set the <code>FROM</code> clause of the query and to specify the root of the query:</p>
      <pre class="oac_no_warn" xml:space="preserve">
Root&lt;Pet&gt; pet = cq.from(Pet.class);
</pre>

      <p>Call the <code>select</code> method of the query object, passing in the query root, to set the <code>SELECT</code> clause of the query:</p>
      <pre class="oac_no_warn" xml:space="preserve">
cq.select(pet);
</pre>

      <p>Now, use the query object to create a <code>TypedQuery&lt;T&gt;</code> object that can be executed against the data source. The modifications to the query object are captured to create a ready-to-execute query:</p>
      <pre class="oac_no_warn" xml:space="preserve">
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
</pre>

      <p>Execute this typed query object by calling its <code>getResultList</code> method, because this query will return multiple entity instances. The following statement stores the results in a <code>List&lt;Pet&gt;</code> collection-valued object:</p>
      <pre class="oac_no_warn" xml:space="preserve">
List&lt;Pet&gt; allPets = q.getResultList();
</pre>
    </div>
  </div>

  <div class="ind">
    <a id="GJIUP"></a><a id="JEETT00502"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_716"><span class="secnum">40.2</span> <a id="sthref2132"></a>Using the Metamodel API to Model Entity Classes</h1>

      <p>Use the Metamodel API to create a metamodel of the managed entities in a particular persistence unit. For each entity class in a particular package, a metamodel class is created with a trailing underscore and with attributes that correspond to the persistent fields or properties of the entity class.</p>

      <p>The following entity class, <code>com.example.Pet</code>, has four persistent fields: <code>id</code>, <code>name</code>, <code>color</code>, and <code>owners</code>:</p>
      <pre class="oac_no_warn" xml:space="preserve">
package com.example;
...
@Entity
public class Pet {
    @Id
    protected Long id;
    protected String name;
    protected String color;
    @ManyToOne
    protected Set&lt;Person&gt; owners;
    ...
}
</pre>

      <p>The corresponding Metamodel class is as follows:</p>
      <pre class="oac_no_warn" xml:space="preserve">
package com.example;
...
@Static Metamodel(Pet.class)
public class Pet_ {

    public static volatile SingularAttribute&lt;Pet, Long&gt; id;
    public static volatile SingularAttribute&lt;Pet, String&gt; name;
    public static volatile SingularAttribute&lt;Pet, String&gt; color;
    public static volatile SetAttribute&lt;Pet, Person&gt; owners;
}
</pre>

      <p>Criteria queries use the metamodel class and its attributes to refer to the managed entity classes and their persistent state and relationships.</p><a id="GJIVL"></a><a id="JEETT01196"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_717"><span class="secnum">40.2.1</span> Using Metamodel Classes</h2>

        <p>Metamodel classes that correspond to entity classes are of the following type:</p>
        <pre class="oac_no_warn" xml:space="preserve">
<code>javax.persistence.metamodel.EntityType&lt;T&gt;</code>
</pre>

        <p>Annotation processors typically generate metamodel classes either at development time or at runtime. Developers of applications that use Criteria queries may do either of the following:</p>

        <ul>
          <li>
            <p>Generate static metamodel classes by using the persistence provider's annotation processor</p>
          </li>

          <li>
            <p>Obtain the metamodel class by doing one of the following:</p>

            <ul>
              <li>
                <p>Call the <code>getModel</code> method on the query root object</p>
              </li>

              <li>
                <p>Obtain an instance of the <code>Metamodel</code> interface and then pass the entity type to the instance's <code>entity</code> method</p>
              </li>
            </ul>
          </li>
        </ul>

        <p>The following code snippet shows how to obtain the <code>Pet</code> entity's metamodel class by calling <code>Root&lt;T&gt;.getModel</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve">
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
EntityType&lt;Pet&gt; Pet_ = pet.getModel();
</pre>

        <p>The following code snippet shows how to obtain the <code>Pet</code> entity's metamodel class by first obtaining a metamodel instance by using <code>EntityManager.getMetamodel</code> and then calling <code>entity</code> on the metamodel instance:</p>
        <pre class="oac_no_warn" xml:space="preserve">
EntityManager em = ...;
Metamodel m = em.getMetamodel();
EntityType&lt;Pet&gt; Pet_ = m.entity(Pet.class);
</pre>

        <div align="center">
          <div class="inftblnote">
            <br />

            <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
              <tbody>
                <tr>
                  <td align="left">
                    <p class="notep1">Note:</p>

                    <p>The most common use case is to generate typesafe static metamodel classes at development time. Obtaining the metamodel classes dynamically, by calling <code>Root&lt;T&gt;.getModel</code> or <code>EntityManager.getMetamodel</code> and then the <code>entity</code> method, doesn't allow for type safety and doesn't allow the application to call persistent field or property names on the metamodel class.</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="GJIVM"></a><a id="JEETT00503"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_718"><span class="secnum">40.3</span> Using the Criteria API and Metamodel API to Create Basic Typesafe Queries</h1>

      <p>The basic semantics of a Criteria query consists of a <code>SELECT</code> clause, a <code>FROM</code> clause, and an optional <code>WHERE</code> clause, similar to a JPQL query. Criteria queries set these clauses by using Java programming language objects, so the query can be created in a typesafe manner.</p><a id="GJIVS"></a><a id="JEETT01197"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_719"><span class="secnum">40.3.1</span> <a id="sthref2133"></a><a id="sthref2134"></a>Creating a Criteria Query</h2>

        <p>The <code>javax.persistence.criteria.CriteriaBuilder</code> interface is used to construct</p>

        <ul>
          <li>
            <p>Criteria queries</p>
          </li>

          <li>
            <p>Selections</p>
          </li>

          <li>
            <p>Expressions</p>
          </li>

          <li>
            <p>Predicates</p>
          </li>

          <li>
            <p>Ordering</p>
          </li>
        </ul>

        <p>To obtain an instance of the <code>CriteriaBuilder</code> interface, call the <code>getCriteriaBuilder</code> method on either an <code>EntityManager</code> or an <code>EntityManagerFactory</code> instance.</p>

        <p>The following code shows how to obtain a <code>CriteriaBuilder</code> instance by using the <code>EntityManager.getCriteriaBuilder</code> method:</p>
        <pre class="oac_no_warn" xml:space="preserve">
EntityManager em = ...;
CriteriaBuilder cb = em.getCriteriaBuilder();
</pre>

        <p>Criteria queries are constructed by obtaining an instance of the following interface:</p>
        <pre class="oac_no_warn" xml:space="preserve">
<code>javax.persistence.criteria.CriteriaQuery</code>
</pre>

        <p><code>CriteriaQuery</code> objects define a particular query that will navigate over one or more entities. Obtain <code>CriteriaQuery</code> instances by calling one of the <code>CriteriaBuilder.createQuery</code> methods. To create typesafe queries, call the <code>CriteriaBuilder.createQuery</code> method as follows:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
</pre>

        <p>The <code>CriteriaQuery</code> object's type should be set to the expected result type of the query. In the preceding code, the object's type is set to <code>CriteriaQuery&lt;Pet&gt;</code> for a query that will find instances of the <code>Pet</code> entity.</p>

        <p>The following code snippet creates a <code>CriteriaQuery</code> object for a query that returns a <code>String</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;String&gt; cq = cb.createQuery(String.class);
</pre>
      </div><a id="GJIVQ"></a><a id="JEETT01198"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_720"><span class="secnum">40.3.2</span> <a id="sthref2135"></a>Query Roots</h2>

        <p>For a particular <code>CriteriaQuery</code> object, the root entity of the query, from which all navigation originates, is called the <span class="glossaryterm">query root</span>. It is similar to the <code>FROM</code> clause in a JPQL query.</p>

        <p>Create the query root by calling the <code>from</code> method on the <code>CriteriaQuery</code> instance. The argument to the <code>from</code> method is either the entity class or an <code>EntityType&lt;T&gt;</code> instance for the entity.</p>

        <p>The following code sets the query root to the <code>Pet</code> entity:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
</pre>

        <p>The following code sets the query root to the <code>Pet</code> class by using an <code>EntityType&lt;T&gt;</code> instance:</p>
        <pre class="oac_no_warn" xml:space="preserve">
EntityManager em = ...;
Metamodel m = em.getMetamodel();
EntityType&lt;Pet&gt; Pet_ = m.entity(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet_);
</pre>

        <p>Criteria queries may have more than one query root. This usually occurs when the query navigates from several entities.</p>

        <p>The following code has two <code>Root</code> instances:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet1 = cq.from(Pet.class);
Root&lt;Pet&gt; pet2 = cq.from(Pet.class);
</pre>
      </div><a id="GJIUV"></a><a id="JEETT01199"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_721"><span class="secnum">40.3.3</span> <a id="sthref2136"></a>Querying Relationships Using Joins</h2>

        <p>For queries that navigate to related entity classes, the query must define a join to the related entity by calling one of the <code>From.join</code> methods on the query root object or another join object. The <code>join</code> methods are similar to the <code>JOIN</code> keyword in JPQL.</p>

        <p>The target of the join uses the Metamodel class of type <code>EntityType&lt;T&gt;</code> to specify the persistent field or property of the joined entity.</p>

        <p>The <code>join</code> methods return an object of type <code>Join&lt;X, Y&gt;</code>, where <code>X</code> is the source entity and <code>Y</code> is the target of the join. In the following code snippet, <code>Pet</code> is the source entity, <code>Owner</code> is the target, and <code>Pet_</code> is a statically generated metamodel class:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Pet, Owner&gt; owner = pet.join(Pet_.owners);
</pre>

        <p>You can chain joins together to navigate to related entities of the target entity without having to create a <code>Join&lt;X, Y&gt;</code> instance for each join:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Owner, Address&gt; address = pet.join(Pet_.owners).join(Owner_.addresses);
</pre>
      </div><a id="GJIVE"></a><a id="JEETT01200"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_722"><span class="secnum">40.3.4</span> <a id="sthref2137"></a><a id="sthref2138"></a>Path Navigation in Criteria Queries</h2>

        <p><code>Path</code> objects, which are used in the <code>SELECT</code> and <code>WHERE</code> clauses of a Criteria query, can be query root entities, join entities, or other <code>Path</code> objects. Use the <code>Path.get</code> method to navigate to attributes of the entities of a query.</p>

        <p>The argument to the <code>get</code> method is the corresponding attribute of the entity's Metamodel class. The attribute can be either a single-valued attribute, specified by <code>@SingularAttribute</code> in the Metamodel class, or a collection-valued attribute, specified by one of <code>@CollectionAttribute</code>, <code>@SetAttribute</code>, <code>@ListAttribute</code>, or <code>@MapAttribute</code>.</p>

        <p>The following query returns the names of all the pets in the data store. The <code>get</code> method is called on the query root, <code>pet</code>, with the <code>name</code> attribute of the <code>Pet</code> entity's Metamodel class, <code>Pet_</code>, as the argument:</p>
        <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;String&gt; cq = cb.createQuery(String.class);

Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.select(pet.get(Pet_.name));
</pre>
      </div><a id="GJIVI"></a><a id="JEETT01201"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_723"><span class="secnum">40.3.5</span> <a id="sthref2139"></a><a id="sthref2140"></a>Restricting Criteria Query Results</h2>

        <p>Conditions that are set by calling the <code>CriteriaQuery.where</code> method can restrict the results of a query on the <code>CriteriaQuery</code> object. Calling the <code>where</code> method is analogous to setting the <code>WHERE</code> clause in a JPQL query.</p>

        <p>The <code>where</code> method evaluates instances of the <code>Expression</code> interface to restrict the results according to the conditions of the expressions. To create <code>Expression</code> instances, use methods defined in the <code>Expression</code> and <code>CriteriaBuilder</code> interfaces.</p><a id="GJIWN"></a><a id="JEETT00747"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.5.1</span> <a id="sthref2141"></a><a id="sthref2142"></a>The Expression Interface Methods</h3>

          <p>An <code>Expression</code> object is used in a query's <code>SELECT</code>, <code>WHERE</code>, or <code>HAVING</code> clause. <a href="../Text/persistence-criteria.xhtml#GJIWW">Table 40-1</a> shows conditional methods you can use with <code>Expression</code> objects.</p>

          <div class="tblhruleformal">
            <a id="sthref2143"></a><a id="GJIWW"></a>

            <p class="titleintable">Table 40-1 Conditional Methods in the Expression Interface</p>

            <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the conditional methods used with Expression objects." title="Conditional Methods in the Expression Interface" width="100%">
              <col width="20%" />
              <col width="*" />

              <thead>
                <tr align="left" valign="top">
                  <th align="left" id="r1c1-t3" valign="bottom">Method</th>

                  <th align="left" id="r1c2-t3" valign="bottom">Description</th>
                </tr>
              </thead>

              <tbody>
                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t3" id="r2c1-t3">
                    <p><code>isNull</code></p>
                  </td>

                  <td align="left" headers="r2c1-t3 r1c2-t3">
                    <p>Tests whether an expression is null</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t3" id="r3c1-t3">
                    <p><code>isNotNull</code></p>
                  </td>

                  <td align="left" headers="r3c1-t3 r1c2-t3">
                    <p>Tests whether an expression is not null</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t3" id="r4c1-t3">
                    <p><code>in</code></p>
                  </td>

                  <td align="left" headers="r4c1-t3 r1c2-t3">
                    <p>Tests whether an expression is within a list of values</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>

          <p>The following query uses the <code>Expression.isNull</code> method to find all pets where the <code>color</code> attribute is null:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(pet.get(Pet_.color).isNull());
</pre>

          <p>The following query uses the <code>Expression.in</code> method to find all brown and black pets:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(pet.get(Pet_.color).in("brown", "black"));
</pre>

          <p>The <code>in</code> method can also check whether an attribute is a member of a collection.</p>
        </div><a id="GJIXA"></a><a id="JEETT00748"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.5.2</span> <a id="sthref2144"></a><a id="sthref2145"></a>Expression Methods in the CriteriaBuilder Interface</h3>

          <p>The <code>CriteriaBuilder</code> interface defines additional methods for creating expressions. These methods correspond to the arithmetic, string, date, time, and case operators and functions of JPQL. <a href="../Text/persistence-criteria.xhtml#GJIXL">Table 40-2</a> shows conditional methods you can use with <code>CriteriaBuilder</code> objects.</p>

          <div class="tblhruleformal">
            <a id="sthref2146"></a><a id="GJIXL"></a>

            <p class="titleintable">Table 40-2 Conditional Methods in the CriteriaBuilder Interface</p>

            <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the conditional methods used with CriteriaBuilder objects." title="Conditional Methods in the CriteriaBuilder Interface" width="100%">
              <col width="20%" />
              <col width="*" />

              <thead>
                <tr align="left" valign="top">
                  <th align="left" id="r1c1-t4" valign="bottom">Conditional Method</th>

                  <th align="left" id="r1c2-t4" valign="bottom">Description</th>
                </tr>
              </thead>

              <tbody>
                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r2c1-t4">
                    <p><code>equal</code></p>
                  </td>

                  <td align="left" headers="r2c1-t4 r1c2-t4">
                    <p>Tests whether two expressions are equal</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r3c1-t4">
                    <p><code>notEqual</code></p>
                  </td>

                  <td align="left" headers="r3c1-t4 r1c2-t4">
                    <p>Tests whether two expressions are not equal</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r4c1-t4">
                    <p><code>gt</code></p>
                  </td>

                  <td align="left" headers="r4c1-t4 r1c2-t4">
                    <p>Tests whether the first numeric expression is greater than the second numeric expression</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r5c1-t4">
                    <p><code>ge</code></p>
                  </td>

                  <td align="left" headers="r5c1-t4 r1c2-t4">
                    <p>Tests whether the first numeric expression is greater than or equal to the second numeric expression</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r6c1-t4">
                    <p><code>lt</code></p>
                  </td>

                  <td align="left" headers="r6c1-t4 r1c2-t4">
                    <p>Tests whether the first numeric expression is less than the second numeric expression</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r7c1-t4">
                    <p><code>le</code></p>
                  </td>

                  <td align="left" headers="r7c1-t4 r1c2-t4">
                    <p>Tests whether the first numeric expression is less than or equal to the second numeric expression</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r8c1-t4">
                    <p><code>between</code></p>
                  </td>

                  <td align="left" headers="r8c1-t4 r1c2-t4">
                    <p>Tests whether the first expression is between the second and third expression in value</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t4" id="r9c1-t4">
                    <p><code>like</code></p>
                  </td>

                  <td align="left" headers="r9c1-t4 r1c2-t4">
                    <p>Tests whether the expression matches a given pattern</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>

          <p>The following code uses the <code>CriteriaBuilder.equal</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.equal(pet.get(Pet_.name), "Fido"));
</pre>

          <p>The following code uses the <code>CriteriaBuilder.gt</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Date someDate = new Date(...);
cq.where(cb.gt(pet.get(Pet_.birthday), date));
</pre>

          <p>The following code uses the <code>CriteriaBuilder.between</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Date firstDate = new Date(...);
Date secondDate = new Date(...);
cq.where(cb.between(pet.get(Pet_.birthday), firstDate, secondDate));
</pre>

          <p>The following code uses the <code>CriteriaBuilder.like</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.like(pet.get(Pet_.name), "*do"));
</pre>

          <p>To specify multiple conditional predicates, use the compound predicate methods of the <code>CriteriaBuilder</code> interface, as shown in <a href="../Text/persistence-criteria.xhtml#GJIWU">Table 40-3</a>.</p>

          <div class="tblhruleformal">
            <a id="sthref2147"></a><a id="GJIWU"></a>

            <p class="titleintable">Table 40-3 Compound Predicate Methods in the CriteriaBuilder Interface</p>

            <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormal" dir="ltr" frame="hsides" rules="rows" summary="This table lists and describes the compound predicate methods used with CriteriaBuilder objects." title="Compound Predicate Methods in the CriteriaBuilder Interface" width="100%">
              <col width="20%" />
              <col width="*" />

              <thead>
                <tr align="left" valign="top">
                  <th align="left" id="r1c1-t5" valign="bottom">Method</th>

                  <th align="left" id="r1c2-t5" valign="bottom">Description</th>
                </tr>
              </thead>

              <tbody>
                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t5" id="r2c1-t5">
                    <p><code>and</code></p>
                  </td>

                  <td align="left" headers="r2c1-t5 r1c2-t5">
                    <p>A logical conjunction of two Boolean expressions</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t5" id="r3c1-t5">
                    <p><code>or</code></p>
                  </td>

                  <td align="left" headers="r3c1-t5 r1c2-t5">
                    <p>A logical disjunction of two Boolean expressions</p>
                  </td>
                </tr>

                <tr align="left" valign="top">
                  <td align="left" headers="r1c1-t5" id="r4c1-t5">
                    <p><code>not</code></p>
                  </td>

                  <td align="left" headers="r4c1-t5 r1c2-t5">
                    <p>A logical negation of the given Boolean expression</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>

          <p>The following code shows the use of compound predicates in queries:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.where(cb.equal(pet.get(Pet_.name), "Fido")
        .and(cb.equal(pet.get(Pet_.color), "brown")));
</pre>
        </div>
      </div><a id="GJIXE"></a><a id="JEETT01202"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_724"><span class="secnum">40.3.6</span> <a id="sthref2148"></a><a id="sthref2149"></a>Managing Criteria Query Results</h2>

        <p>For queries that return more than one result, it is often helpful to organize those results. The <code>CriteriaQuery</code> interface defines the following ordering and grouping methods:</p>

        <ul>
          <li>
            <p>The <code>orderBy</code> method orders query results according to attributes of an entity</p>
          </li>

          <li>
            <p>The <code>groupBy</code> method groups the results of a query together according to attributes of an entity, and the <code>having</code> method restricts those groups according to a condition</p>
          </li>
        </ul><a id="GJIWO"></a><a id="JEETT00749"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.6.1</span> Ordering Results</h3>

          <p>To order the results of a query, call the <code>CriteriaQuery.orderBy</code> method, passing in an <code>Order</code> object. To create an <code>Order</code> object, call either the <code>CriteriaBuilder.asc</code> or the <code>CriteriaBuilder.desc</code> method. The <code>asc</code> method is used to order the results by ascending value of the passed expression parameter. The <code>desc</code> method is used to order the results by descending value of the passed expression parameter. The following query shows the use of the <code>desc</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.select(pet);
cq.orderBy(cb.desc(pet.get(Pet_.birthday)));
</pre>

          <p>In this query, the results will be ordered by the pet's birthday from highest to lowest. That is, pets born in December will appear before pets born in May.</p>

          <p>The following query shows the use of the <code>asc</code> method:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Owner, Address&gt; address = pet.join(Pet_.owners).join(Owner_.address);
cq.select(pet);
cq.orderBy(cb.asc(address.get(Address_.postalCode)));
</pre>

          <p>In this query, the results will be ordered by the pet owner's postal code from lowest to highest. That is, pets whose owner lives in the 10001 zip code will appear before pets whose owner lives in the 91000 zip code.</p>

          <p>If more than one <code>Order</code> object is passed to <code>orderBy</code>, the precedence is determined by the order in which they appear in the argument list of <code>orderBy</code>. The first <code>Order</code> object has precedence.</p>

          <p>The following code orders results by multiple criteria:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
Join&lt;Pet, Owner&gt; owner = pet.join(Pet_.owners);
cq.select(pet);
cq.orderBy(cb.asc(owner.get(Owner_.lastName)), owner.get(Owner_.firstName)));
</pre>

          <p>The results of this query will be ordered alphabetically by the pet owner's last name, then first name.</p>
        </div><a id="GJIXG"></a><a id="JEETT00750"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.6.2</span> Grouping Results</h3>

          <p>The <code>CriteriaQuery.groupBy</code> method partitions the query results into groups. To set these groups, pass an expression to <code>groupBy</code>:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.groupBy(pet.get(Pet_.color));
</pre>

          <p>This query returns all <code>Pet</code> entities and groups the results by the pet's color.</p>

          <p>Use the <code>CriteriaQuery.having</code> method in conjunction with <code>groupBy</code> to filter over the groups. The <code>having</code> method, which takes a conditional expression as a parameter, restricts the query result according to the conditional expression:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
Root&lt;Pet&gt; pet = cq.from(Pet.class);
cq.groupBy(pet.get(Pet_.color));
cq.having(cb.in(pet.get(Pet_.color)).value("brown").value("blonde"));
</pre>

          <p>In this example, the query groups the returned <code>Pet</code> entities by color, as in the preceding example. However, the only returned groups will be <code>Pet</code> entities where the <code>color</code> attribute is set to <code>brown</code> or <code>blonde</code>. That is, no gray-colored pets will be returned in this query.</p>
        </div>
      </div><a id="GJIVY"></a><a id="JEETT01203"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_725"><span class="secnum">40.3.7</span> <a id="sthref2150"></a><a id="sthref2151"></a>Executing Queries</h2>

        <p>To prepare a query for execution, create a <code>TypedQuery&lt;T&gt;</code> object with the type of the query result, passing the <code>CriteriaQuery</code> object to <code>EntityManager.createQuery</code>.</p>

        <p>To execute a query, call either <code>getSingleResult</code> or <code>getResultList</code> on the <code>TypedQuery&lt;T&gt;</code> object.</p><a id="GJIUR"></a><a id="JEETT00751"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.7.1</span> Single-Valued Query Results</h3>

          <p>Use the <code>TypedQuery&lt;T&gt;.getSingleResult</code> method to execute queries that return a single result:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
...
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
Pet result = q.getSingleResult();
</pre>
        </div><a id="GJIVP"></a><a id="JEETT00752"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">40.3.7.2</span> <a id="sthref2152"></a>Collection-Valued Query Results</h3>

          <p>Use the <code>TypedQuery&lt;T&gt;.getResultList</code> method to execute queries that return a collection of objects:</p>
          <pre class="oac_no_warn" xml:space="preserve">
CriteriaQuery&lt;Pet&gt; cq = cb.createQuery(Pet.class);
...
TypedQuery&lt;Pet&gt; q = em.createQuery(cq);
List&lt;Pet&gt; results = q.getResultList();
</pre>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
