<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="GJDDD"></a><a id="JEETT00069"></a>

    <h1 class="chapter"><span class="secnum">9</span> <a id="sthref401"></a>Expression Language</h1>

    <p>This chapter introduces the Expression Language (also referred to as the EL), which provides an important mechanism for enabling the presentation layer (web pages) to communicate with the application logic (managed beans). The EL is used by several JavaEE technologies, such as JavaServer Faces technology, JavaServer Pages (JSP) technology, and Contexts and Dependency Injection for Java EE (CDI). The EL can also be used in stand-alone environments. This chapter only covers the use of the EL in Java EE containers.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAHQ">Overview of the EL</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAHR">Immediate and Deferred Evaluation Syntax</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAHU">Value and Method Expressions</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#CIHGABHD">Operations on Collection Objects</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAIK">Operators</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAIL">Reserved Words</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#BNAIM">Examples of EL Expressions</a></p>
      </li>

      <li>
        <p><a href="../Text/jsf-el.xhtml#CIHGBBHA">Further Information about the Expression Language</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="BNAHQ"></a><a id="JEETT00339"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_517"><span class="secnum">9.1</span> <a id="sthref402"></a>Overview of the EL</h1>

      <p>The EL allows page authors to use simple expressions to dynamically access data from JavaBeans components. For example, the <code>test</code> attribute of the following conditional tag is supplied with an EL expression that compares 0 with the number of items in the session-scoped bean named <code>cart</code>.</p>
      <pre class="oac_no_warn" xml:space="preserve">
&lt;c:if test="${sessionScope.cart.numberOfItems &gt; 0}"&gt;
  ...
&lt;/c:if&gt;
</pre>

      <p>See <a href="../Text/jsf-develop.xhtml#BNAQP">Using the EL to Reference Managed Beans</a> for more information on how to use the EL in JavaServer Faces applications.</p>

      <p>To summarize, the EL provides a way to use simple expressions to perform the following tasks:</p>

      <ul>
        <li>
          <p>Dynamically read application data stored in JavaBeans components, various data structures, and implicit objects</p>
        </li>

        <li>
          <p>Dynamically write data, such as user input into forms, to JavaBeans components</p>
        </li>

        <li>
          <p>Invoke arbitrary static and public methods</p>
        </li>

        <li>
          <p>Dynamically perform arithmetic, boolean, and string operations</p>
        </li>

        <li>
          <p>Dynamically construct collection objects and perform operations on collections</p>
        </li>
      </ul>

      <p>In a JavaServer Faces page, an EL expression can be used either in static text or in the attribute of a custom tag or standard action.</p>

      <p>Finally, the EL provides a pluggable API for resolving expressions so that custom resolvers that can handle expressions not already supported by the EL can be implemented.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BNAHR"></a><a id="JEETT00340"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_518"><span class="secnum">9.2</span> Immediate and Deferred Evaluation Syntax</h1>

      <p><a id="sthref403"></a><a id="sthref404"></a>The EL supports both immediate and deferred evaluation of expressions. <span class="glossaryterm">Immediate evaluation</span> means that the expression is evaluated and the result returned as soon as the page is first rendered. <span class="glossaryterm">Deferred evaluation</span> means that the technology using the expression language can use its own machinery to evaluate the expression sometime later during the page's lifecycle, whenever it is appropriate to do so.</p>

      <p>Those expressions that are evaluated immediately use the <code>${}</code> syntax. Expressions whose evaluation is deferred use the <code>#{}</code> syntax.</p>

      <p>Because of its multiphase lifecycle, JavaServer Faces technology uses mostly deferred evaluation expressions. During the lifecycle, component events are handled, data is validated, and other tasks are performed in a particular order. Therefore, a JavaServer Faces implementation must defer evaluation of expressions until the appropriate point in the lifecycle.</p>

      <p>Other technologies using the EL might have different reasons for using deferred expressions.</p><a id="BNAHS"></a><a id="JEETT00912"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_519"><span class="secnum">9.2.1</span> Immediate Evaluation</h2>

        <p>All expressions using the <code>${}</code> syntax are evaluated immediately. These expressions can appear as part of a template (static) text or as the value of a tag attribute that can accept runtime expressions.</p>

        <p>The following example shows a tag whose <code>value</code> attribute references an immediate evaluation expression that updates the quantity of books retrieved from the backing bean named <code>catalog</code>:</p>
        <pre class="oac_no_warn" xml:space="preserve">
&lt;h:outputText value="${catalog.bookQuantity}" /&gt;
</pre>

        <p>The JavaServer Faces implementation evaluates the expression <code>${catalog.bookQuantity}</code>, converts it, and passes the returned value to the tag handler. The value is updated on the page.</p>
      </div><a id="BNAHT"></a><a id="JEETT00913"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_520"><span class="secnum">9.2.2</span> Deferred Evaluation</h2>

        <p>Deferred evaluation expressions take the form <code>#{expr}</code> and can be evaluated at other phases of a page lifecycle as defined by whatever technology is using the expression. In the case of JavaServer Faces technology, its controller can evaluate the expression at different phases of the lifecycle, depending on how the expression is being used in the page.</p>

        <p>The following example shows a JavaServer Faces <code>h:inputText</code> tag, which represents a field component into which a user enters a value. The <code>h:inputText</code> tag's <code>value</code> attribute references a deferred evaluation expression that points to the <code>name</code> property of the <code>customer</code> bean:</p>
        <pre class="oac_no_warn" xml:space="preserve">
&lt;h:inputText id="name" value="#{customer.name}" /&gt;
</pre>

        <p>For an initial request of the page containing this tag, the JavaServer Faces implementation evaluates the <code>#{customer.name}</code> expression during the render-response phase of the lifecycle. During this phase, the expression merely accesses the value of <code>name</code> from the <code>customer</code> bean, as is done in immediate evaluation.</p>

        <p>For a postback request, the JavaServer Faces implementation evaluates the expression at different phases of the lifecycle, during which the value is retrieved from the request, validated, and propagated to the <code>customer</code> bean.</p>

        <p>As shown in this example, deferred evaluation expressions can be</p>

        <ul>
          <li>
            <p>Value expressions that can be used to both read and write data</p>
          </li>

          <li>
            <p>Method expressions</p>
          </li>
        </ul>

        <p>Value expressions (both immediate and deferred) and method expressions are explained in the next section.</p>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="BNAHU"></a><a id="JEETT00341"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_521"><span class="secnum">9.3</span> Value and Method Expressions</h1>

      <p>The EL defines two kinds of expressions: value expressions and method expressions. <span class="glossaryterm">Value expressions</span> can be evaluated to yield a value, and <span class="glossaryterm">method expressions</span> are used to reference a method.</p><a id="BNAHV"></a><a id="JEETT00914"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_522"><span class="secnum">9.3.1</span> Value Expressions</h2>

        <p><a id="sthref405"></a><a id="sthref406"></a><a id="sthref407"></a>Value expressions can be further categorized into <span class="glossaryterm">rvalue</span> and <span class="glossaryterm">lvalue</span> expressions. An lvalue expression can specify a target, such as an object, a bean property, or elements of a collection, that can be assigned a value. An rvalue expression cannot specify such a target.</p>

        <p>All expressions that are evaluated immediately use the <code>${}</code> delimiters, and although the expression can be an lvalue expression, no assignments will ever happen. Expressions whose evaluation can be deferred use the <code>#{}</code> delimiters and can act as both rvalue and lvalue expressions; if the expression is an lvalue expression, it can be assigned a new value. Consider the following two value expressions:</p>
        <pre class="oac_no_warn" xml:space="preserve">
${customer.name}

#{customer.name}
</pre>

        <p>The former uses immediate evaluation syntax, whereas the latter uses deferred evaluation syntax. The first expression accesses the <code>name</code> property, gets its value, and passes the value to the tag handler. With the second expression, the tag handler can defer the expression evaluation to a later time in the page lifecycle if the technology using this tag allows.</p>

        <p>In the case of JavaServer Faces technology, the latter tag's expression is evaluated immediately during an initial request for the page. During a postback request, this expression can be used to set the value of the <code>name</code> property with user input.</p><a id="BNAHW"></a><a id="JEETT00590"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">9.3.1.1</span> Referencing Objects</h3>

          <p>A top-level identifier (such as <code>customer</code> in the expression <code>customer.name</code>) can refer to the following objects:</p>

          <ul>
            <li>
              <p>Lambda parameters</p>
            </li>

            <li>
              <p>EL variables</p>
            </li>

            <li>
              <p>Managed beans</p>
            </li>

            <li>
              <p>Implicit objects</p>
            </li>

            <li>
              <p>Classes of static fields and methods</p>
            </li>
          </ul>

          <p>To refer to these objects, you write an expression using a variable that is the name of the object. The following expression references a managed bean called <code>customer</code>:</p>
          <pre class="oac_no_warn" xml:space="preserve">
${customer}
</pre>

          <p>You can use a custom EL resolver to alter the way variables are resolved. For instance, you can provide an EL resolver that intercepts objects with the name <code>customer</code>, so that <code>${customer}</code> returns a value in the EL resolver instead. (JavaServer Faces technology uses an EL resolver to handle managed beans.)</p>

          <p>An <code>enum</code> constant is a special case of a static field, and you can reference such a constant directly. For example, consider this <code>enum</code> class:</p>
          <pre class="oac_no_warn" xml:space="preserve">
public enum Suit {hearts, spades, diamonds, clubs}
</pre>

          <p>In the following expression, in which <code>mySuit</code> is an instance of <code>Suit</code>, you can compare <code>suit.hearts</code> to the instance:</p>
          <pre class="oac_no_warn" xml:space="preserve">
${mySuit == suit.hearts}
</pre>
        </div><a id="BNAHX"></a><a id="JEETT00591"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">9.3.1.2</span> Referencing Object Properties or Collection Elements</h3>

          <p>To refer to properties of a bean, static fields or methods of a class, or items of a collection, you use the <code>.</code> or <code>[]</code> notation. The same syntax can be used for attributes of an implicit object, because attributes are placed in a map.</p>

          <p>To reference the <code>name</code> property of the <code>customer</code> bean, use either the expression <code>${customer.name}</code> or the expression <code>${customer["name"]}</code>. Here, the part inside the brackets is a <code>String</code> literal that is the name of the property to reference. The <code>[]</code> syntax is more general than the <code>.</code> syntax, because the part inside the brackets can be any <code>String</code> expression, not just literals.</p>

          <p>You can use double or single quotes for the <code>String</code> literal. You can also combine the <code>[]</code> and <code>.</code> notations, as shown here:</p>
          <pre class="oac_no_warn" xml:space="preserve">
${customer.address["street"]}
</pre>

          <p>You can reference a static field or method using the syntax <span class="variable">classname</span>.<span class="variable">field</span>, as in the following example:</p>
          <pre class="oac_no_warn" xml:space="preserve">
Boolean.FALSE
</pre>

          <p>The <span class="variable">classname</span> is the name of the class without the package name. By default, all the <code>java.lang</code> packages are imported. You can import other packages, classes, and static fields as needed.</p>

          <p>If you are accessing an item in an array or list, you must use the <code>[]</code> notation and specify an index in the array or list. The index is an expression that can be converted to <code>int</code>. The following example references the first of the customer orders, assuming that <code>customer.orders</code> is a <code>List</code>:</p>
          <pre class="oac_no_warn" xml:space="preserve">
${customer.orders[1]}
</pre>

          <p>If you are accessing an item in a <code>Map</code>, you must specify the key for the <code>Map</code>. If the key is a <code>String</code> literal, the dot (<code>.)</code> notation can be used. Assuming that <code>customer.orders</code> is a <code>Map</code> with a <code>String</code> key, the following examples reference the item with the key <code>"socks"</code>:</p>
          <pre class="oac_no_warn" xml:space="preserve">
${customer.orders["socks"]}

${customer.orders.socks}
</pre>
        </div>

        <div class="sect3">
          <a id="sthref408"></a>

          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">9.3.1.3</span> Referencing Literals</h3>

          <p><a id="sthref409"></a>The EL defines the following literals:</p>

          <ul>
            <li>
              <p><span class="bold">Boolean</span>: <code>true</code> and <code>false</code></p>
            </li>

            <li>
              <p><span class="bold">Integer</span>: As in Java</p>
            </li>

            <li>
              <p><span class="bold">Floating-point</span>: As in Java</p>
            </li>

            <li>
              <p><span class="bold">String</span>: With single and double quotes; <code>"</code> is escaped as <code>\"</code>, <code>'</code> is escaped as <code>\'</code>, and <code>\</code> is escaped as <code>\\</code></p>
            </li>

            <li>
              <p><span class="bold">Null</span>: <code>null</code></p>
            </li>
          </ul>

          <p>Here are some examples:</p>

          <ul>
            <li>
              <p><code>${"literal"}</code></p>
            </li>

            <li>
              <p><code>${true}</code></p>
            </li>

            <li>
              <p><code>${57}</code></p>
            </li>
          </ul>
        </div><a id="GJHBZ"></a><a id="JEETT00593"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">9.3.1.4</span> <a id="sthref410"></a>Parameterized Method Calls</h3>

          <p>The EL offers support for parameterized method calls.</p>

          <p>Both the <code>.</code> and <code>[]</code> operators can be used for invoking method calls with parameters, as shown in the following expression syntax:</p>

          <ul>
            <li>
              <p><span class="variable">expr-a</span><code>[</code><span class="variable">expr-b</span><code>](</code><span class="variable">parameters</span><code>)</code></p>
            </li>

            <li>
              <p><span class="variable">expr-a</span><code>.</code><span class="variable">identifier-b</span><code>(</code><span class="variable">parameters</span><code>)</code></p>
            </li>
          </ul>

          <p>In the first expression syntax, <span class="variable">expr-a</span> is evaluated to represent a bean object. The expression <span class="variable">expr-b</span> is evaluated and cast to a string that represents a method in the bean represented by <span class="variable">expr-a</span>. In the second expression syntax, <span class="variable">expr-a</span> is evaluated to represent a bean object, and <span class="variable">identifier-b</span> is a string that represents a method in the bean object. The <span class="variable">parameters</span> in parentheses are the arguments for the method invocation. Parameters can be zero or more values of expressions, separated by commas.</p>

          <p>Parameters are supported for both value expressions and method expressions. In the following example, which is a modified tag from the <code>guessnumber</code> application, a random number is provided as an argument rather than from user input to the method call:</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;h:inputText value="#{userNumberBean.userNumber('5')}"&gt;
</pre>

          <p>The preceding example uses a value expression.</p>

          <p>Consider the following example of a JavaServer Faces component tag that uses a method expression:</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;h:commandButton action="#{trader.buy}" value="buy"/&gt;
</pre>

          <p>The EL expression <code>trader.buy</code> calls the <code>trader</code> bean's <code>buy</code> method. You can modify the tag to pass on a parameter. Here is the revised tag in which a parameter is passed:</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;h:commandButton action="#{trader.buy('SOMESTOCK')}" value="buy"/&gt;
</pre>

          <p>In the preceding example, you are passing the string <code>'SOMESTOCK'</code> (a stock symbol) as a parameter to the <code>buy</code> method.</p>
        </div><a id="BNAHY"></a><a id="JEETT00592"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">9.3.1.5</span> Where Value Expressions Can Be Used</h3>

          <p>Value expressions using the <code>${}</code> delimiters can be used</p>

          <ul>
            <li>
              <p>In static text</p>
            </li>

            <li>
              <p>In any standard or custom tag attribute that can accept an expression</p>
            </li>
          </ul>

          <p>The value of an expression in static text is computed and inserted into the current output. Here is an example of an expression embedded in static text:</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag&gt;
    some text ${expr} some text
&lt;/some:tag&gt;
</pre>

          <p>A tag attribute can be set in the following ways.</p>

          <ul>
            <li>
              <p>With a single expression construct:</p>
              <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="${expr}"/&gt;

&lt;another:tag value="#{expr}"/&gt;
</pre>

              <p>These expressions are evaluated, and the result is converted to the attribute's expected type.</p>
            </li>

            <li>
              <p>With one or more expressions separated or surrounded by text:</p>
              <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="some${expr}${expr}text${expr}"/&gt;

&lt;another:tag value="some#{expr}#{expr}text#{expr}"/&gt;
</pre>

              <p><a id="sthref411"></a>These kinds of expression, called <span class="glossaryterm">composite expressions</span>, are evaluated from left to right. Each expression embedded in the composite expression is converted to a <code>String</code> and then concatenated with any intervening text. The resulting <code>String</code> is then converted to the attribute's expected type.</p>
            </li>

            <li>
              <p>With text only:</p>
              <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="sometext"/&gt;
</pre>

              <p>The attribute's <code>String</code> value is converted to the attribute's expected type.</p>
            </li>
          </ul>

          <p>You can use the string concatenation operator += to create a single expression from what would otherwise be a composite expression. For example, you could change the composite expression</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="sometext ${expr} moretext"/&gt;
</pre>

          <p>to</p>
          <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="${sometext += expr += moretext}"/&gt;
</pre>

          <p><a id="sthref412"></a>All expressions used to set attribute values are evaluated in the context of an expected type. If the result of the expression evaluation does not match the expected type exactly, a type conversion will be performed. For example, the expression <code>${1.2E4}</code> provided as the value of an attribute of type <code>float</code> will result in the following conversion:</p>
          <pre class="oac_no_warn" xml:space="preserve">
Float.valueOf("1.2E4").floatValue()
</pre>
        </div>
      </div><a id="BNAHZ"></a><a id="JEETT00915"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_523"><span class="secnum">9.3.2</span> Method Expressions</h2>

        <p><a id="sthref413"></a>Another feature of the EL is its support of deferred method expressions. A method expression is used to refer to a public method of a bean and has the same syntax as an lvalue expression.</p>

        <p>In JavaServer Faces technology, a component tag represents a component on a page. The component tag uses method expressions to specify methods that can be invoked to perform some processing for the component. These methods are necessary for handling events that the components generate and for validating component data, as shown in this example:</p>
        <pre class="oac_no_warn" xml:space="preserve">
&lt;h:form&gt;
    &lt;h:inputText id="name"
                 value="#{customer.name}"
                 validator="#{customer.validateName}"/&gt;
    &lt;h:commandButton id="submit"
                     action="#{customer.submit}" /&gt;
&lt;/h:form&gt;
</pre>

        <p>The <code>h:inputText</code> tag displays as a field. The <code>validator</code> attribute of this <code>h:inputText</code> tag references a method, called <code>validateName</code>, in the bean, called <code>customer</code>.</p>

        <p>Because a method can be invoked during different phases of the lifecycle, method expressions must always use the deferred evaluation syntax.</p>

        <p>Like lvalue expressions, method expressions can use the <code>.</code> and the <code>[]</code> operators. For example, <code>#{object.method}</code> is equivalent to <code>#{object["method"]}</code>. The literal inside the <code>[]</code> is converted to <code>String</code> and is used to find the name of the method that matches it.</p>

        <p>Method expressions can be used only in tag attributes and only in the following ways:</p>

        <ul>
          <li>
            <p>With a single expression construct, where <span class="variable">bean</span> refers to a JavaBeans component and <span class="variable">method</span> refers to a method of the JavaBeans component:</p>
            <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="#{<span class="variable">bean</span>.<span class="variable">method</span>}"/&gt;
</pre>

            <p>The expression is evaluated to a method expression, which is passed to the tag handler. The method represented by the method expression can then be invoked later.</p>
          </li>

          <li>
            <p>With text only:</p>
            <pre class="oac_no_warn" xml:space="preserve">
&lt;some:tag value="sometext"/&gt;
</pre>

            <p>Method expressions support literals primarily to support <code>action</code> attributes in JavaServer Faces technology. When the method referenced by this method expression is invoked, the method returns the <code>String</code> literal, which is then converted to the expected return type, as defined in the tag's tag library descriptor.</p>
          </li>
        </ul>
      </div>

      <div class="sect2">
        <a id="sthref414"></a>

        <h2 class="sect2" id="sigil_toc_id_524"><span class="secnum">9.3.3</span> Lambda Expressions</h2>

        <p>A lambda expression is a value expression with parameters. The syntax is similar to that of the lambda expression in the Java programming language, except that in the EL, the body of the lambda expression is an EL expression.</p>

        <p>For basic information on lambda expressions, see <code><a href="../Text/http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.xhtml#http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">http://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></code>.</p>

        <div align="center">
          <div class="inftblnote">
            <br />

            <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
              <tbody>
                <tr>
                  <td align="left">
                    <p class="notep1">Note:</p>

                    <p>Lambda expressions are part of Java SE 8, but you can use them in EL expressions with Java SE 7, the Java version associated with the Java EE 7 platform.</p>
                  </td>
                </tr>
              </tbody>
            </table><br />
          </div>
        </div>

        <p>A lambda expression uses the arrow token (<code>-&gt;)</code> operator. The identifiers to the left of the operator are called lambda parameters. The body, to the right of the operator, must be an EL expression. The lambda parameters are enclosed in parentheses; the parentheses can be omitted if there is only one parameter. Here are some examples:</p>
        <pre class="oac_no_warn" xml:space="preserve">
x -&gt; x+1
(x, y) -&gt; x + y
() -&gt; 64
</pre>

        <p>A lambda expression behaves like a function. It can be invoked immediately. For example, the following invocation evaluates to 7:</p>
        <pre class="oac_no_warn" xml:space="preserve">
((x, y) -&gt; x + y)(3, 4)
</pre>

        <p>You can use a lambda expression in conjunction with the assignment and semicolon operators. For example, the following code assigns the previous lambda expression to a variable and then invokes it. The result is again 7:</p>
        <pre class="oac_no_warn" xml:space="preserve">
v = (x, y) -&gt; x + y; v(3, 4)
</pre>

        <p>A lambda expression can also be passed as an argument to a method and be invoked in the method. It can also be nested in another lambda expression.</p>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="CIHGABHD"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_525"><span class="secnum">9.4</span> Operations on Collection Objects</h1>

      <p>The EL supports operations on collection objects: sets, lists, and maps. It allows the dynamic creation of collection objects, which can then be operated on using streams and pipelines.</p>

      <div align="center">
        <div class="inftblnote">
          <br />

          <table border="1" cellpadding="3" cellspacing="0" class="Note oac_no_warn" frame="hsides" rules="groups" summary="" width="80%">
            <tbody>
              <tr>
                <td align="left">
                  <p class="notep1">Note:</p>

                  <p>Like lambda expressions, operations on collection objects are part of Java SE 8, but you can use them in EL expressions with Java SE 7, the Java version associated with the Java EE 7 platform.</p>
                </td>
              </tr>
            </tbody>
          </table><br />
        </div>
      </div>

      <p>For example, you can construct a set as follows:</p>
      <pre class="oac_no_warn" xml:space="preserve">
{1,2,3}
</pre>

      <p>You can construct a list as follows; a list can contain various types of items:</p>
      <pre class="oac_no_warn" xml:space="preserve">
[1,2,3]
[1, "two", [three,four]]
</pre>

      <p>You can construct a map by using a colon to define the entries, as follows:</p>
      <pre class="oac_no_warn" xml:space="preserve">
{"one":1, "two":2, "three":3}
</pre>

      <p>You operate on collection objects using method calls to the stream of elements derived from the collection. Some operations return another stream, which allows additional operations. Therefore, you can chain these operations together in a pipeline.</p>

      <p>A stream pipeline consists of the following:</p>

      <ul>
        <li>
          <p>A source (the <code>Stream</code> object)</p>
        </li>

        <li>
          <p>Any number of intermediate operations that return a stream (for example, <code>filter</code> and <code>map</code>)</p>
        </li>

        <li>
          <p>A terminal operation that does not return a stream (for example, <code>toList()</code>)</p>
        </li>
      </ul>

      <p>The <code>stream</code> method obtains a <code>Stream</code> from a <code>java.util.Collection</code> or a Java array. The stream operations do not modify the original collection object.</p>

      <p>For example, you might generate a list of titles of history books as follows:</p>
      <pre class="oac_no_warn" xml:space="preserve">
books.stream().filter(b-&gt;b.category == 'history')
              .map(b-&gt;b.title)
              .toList()
</pre>

      <p>The following simpler example returns a sorted version of the original list:</p>
      <pre class="oac_no_warn" xml:space="preserve">
[1,3,5,2].stream().sorted().toList()
</pre>

      <p>Streams and stream operations are documented in the Java SE 8 API documentation, available at <code><a href="../Text/http://docs.oracle.com/javase/8/docs/api/.xhtml#http://docs.oracle.com/javase/8/docs/api/">http://docs.oracle.com/javase/8/docs/api/</a></code>. The following subset of operations is supported by the EL:</p><br />
      <code>allMatch</code><br />
      <code>anyMatch</code><br />
      <code>average</code><br />
      <code>count</code><br />
      <code>distinct</code><br />
      <code>filter</code><br />
      <code>findFirst</code><br />
      <code>flatMap</code><br />
      <code>forEach</code><br />
      <code>iterator</code><br />
      <code>limit</code><br />
      <code>map</code><br />
      <code>max</code><br />
      <code>min</code><br />
      <code>noneMatch</code><br />
      <code>peek</code><br />
      <code>reduce</code><br />
      <code>sorted</code><br />
      <code>substream</code><br />
      <code>sum</code><br />
      <code>toArray</code><br />
      <code>toList</code><br />

      <p>See the EL specification at <code><a href="../Text/http://www.jcp.org/en/jsr/detail?id=.xhtml#http://www.jcp.org/en/jsr/detail?id=341">http://www.jcp.org/en/jsr/detail?id=341</a></code> for details on these operations.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BNAIK"></a><a id="JEETT00344"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_526"><span class="secnum">9.5</span> Operators</h1>

      <p><a id="sthref415"></a>In addition to the <code>.</code> and <code>[]</code> operators discussed in <a href="../Text/jsf-el.xhtml#BNAHU">Value and Method Expressions</a>, the EL provides the following operators, which can be used in rvalue expressions only.</p>

      <ul>
        <li>
          <p><span class="bold">Arithmetic</span>: <code>+</code>, <code>-</code> (binary), <code>*</code>, <code>/</code> and <code>div</code>, <code>%</code> and <code>mod</code>, <code>-</code> (unary).</p>
        </li>

        <li>
          <p><span class="bold">String concatenation</span>: <code>+=</code>.</p>
        </li>

        <li>
          <p><span class="bold">Logical</span>: <code>and</code>, <code>&amp;&amp;</code>, <code>or</code>, <code>||</code>, <code>not</code>, <code>!</code>.</p>
        </li>

        <li>
          <p><span class="bold">Relational</span>: <code>==</code>, <code>eq</code>, <code>!=</code>, <code>ne</code>, <code>&lt;</code>, <code>lt</code>, <code>&gt;</code>, <code>gt</code>, <code>&lt;=</code>, <code>ge</code>, <code>&gt;=</code>, <code>le</code>. Comparisons can be made against other values or against Boolean, string, integer, or floating-point literals.</p>
        </li>

        <li>
          <p><span class="bold">Empty</span>: The <code>empty</code> operator is a prefix operation that can be used to determine whether a value is <code>null</code> or empty.</p>
        </li>

        <li>
          <p><span class="bold">Conditional</span>: <code>A ? B : C</code>. Evaluate <code>B</code> or <code>C</code>, depending on the result of the evaluation of <code>A</code>.</p>
        </li>

        <li>
          <p><span class="bold">Lambda expression</span>: <code>-&gt;</code>, the arrow token.</p>
        </li>

        <li>
          <p><span class="bold">Assignment</span>: <code>=</code>.</p>
        </li>

        <li>
          <p><span class="bold">Semicolon</span>: <code>;</code>.</p>
        </li>
      </ul>

      <p>The precedence of operators, highest to lowest, left to right, is as follows:</p>

      <ul>
        <li>
          <p><code>[] .</code></p>
        </li>

        <li>
          <p><code>()</code> (used to change the precedence of operators)</p>
        </li>

        <li>
          <p><code>-</code> (unary) <code>not ! empty</code></p>
        </li>

        <li>
          <p><code>* / div % mod</code></p>
        </li>

        <li>
          <p><code>+ -</code> (binary)</p>
        </li>

        <li>
          <p><code>+=</code></p>
        </li>

        <li>
          <p><code>&lt;&gt; &lt;= &gt;= lt gt le ge</code></p>
        </li>

        <li>
          <p><code>== != eq ne</code></p>
        </li>

        <li>
          <p><code>&amp;&amp; and</code></p>
        </li>

        <li>
          <p><code>|| or</code></p>
        </li>

        <li>
          <p><code>? :</code></p>
        </li>

        <li>
          <p><code>-&gt;</code></p>
        </li>

        <li>
          <p><code>=</code></p>
        </li>

        <li>
          <p><code>;</code></p>
        </li>
      </ul>
    </div>
  </div>

  <div class="ind">
    <a id="BNAIL"></a><a id="JEETT00345"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_527"><span class="secnum">9.6</span> Reserved Words</h1>

      <p><a id="sthref416"></a>The following words are reserved for the EL and should not be used as identifiers:</p><br />
      <code>and</code><br />
      <code>or</code><br />
      <code>not</code><br />
      <code>eq</code><br />
      <code>ne</code><br />
      <code>lt</code><br />
      <code>gt</code><br />
      <code>le</code><br />
      <code>ge</code><br />
      <code>true</code><br />
      <code>false</code><br />
      <code>null</code><br />
      <code>instanceof</code><br />
      <code>empty</code><br />
      <code>div</code><br />
      <code>mod</code>
    </div>
  </div>

  <div class="ind">
    <a id="BNAIM"></a><a id="JEETT00346"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_528"><span class="secnum">9.7</span> Examples of EL Expressions</h1>

      <p><a id="sthref417"></a><a href="../Text/jsf-el.xhtml#BNAIN">Table 9-1</a> contains example EL expressions and the result of evaluating them.</p>

      <div class="tblhruleformalwide">
        <a id="sthref418"></a><a id="BNAIN"></a>

        <p class="titleintable">Table 9-1 Example Expressions</p>

        <table border="1" cellpadding="3" cellspacing="0" class="HRuleFormalWide" dir="ltr" frame="hsides" rules="rows" summary="This table provides examples of EL expressions and their results." title="Example Expressions" width="100%">
          <col width="*" />
          <col width="45%" />

          <thead>
            <tr align="left" valign="top">
              <th align="left" id="r1c1-t4" valign="bottom">EL Expression</th>

              <th align="left" id="r1c2-t4" valign="bottom">Result</th>
            </tr>
          </thead>

          <tbody>
            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r2c1-t4">
                <p><code>${1&gt; (4/2)}</code></p>
              </td>

              <td align="left" headers="r2c1-t4 r1c2-t4">
                <p><code>false</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r3c1-t4">
                <p><code>${4.0&gt;= 3}</code></p>
              </td>

              <td align="left" headers="r3c1-t4 r1c2-t4">
                <p><code>true</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r4c1-t4">
                <p><code>${100.0 == 100}</code></p>
              </td>

              <td align="left" headers="r4c1-t4 r1c2-t4">
                <p><code>true</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r5c1-t4">
                <p><code>${(10*10) ne 100}</code></p>
              </td>

              <td align="left" headers="r5c1-t4 r1c2-t4">
                <p><code>false</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r6c1-t4">
                <p><code>${'a' &gt; 'b'}</code></p>
              </td>

              <td align="left" headers="r6c1-t4 r1c2-t4">
                <p><code>false</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r7c1-t4">
                <p><code>${'hip' lt 'hit'}</code></p>
              </td>

              <td align="left" headers="r7c1-t4 r1c2-t4">
                <p><code>true</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r8c1-t4">
                <p><code>${4&gt; 3}</code></p>
              </td>

              <td align="left" headers="r8c1-t4 r1c2-t4">
                <p><code>true</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r9c1-t4">
                <p><code>${1.2E4 + 1.4}</code></p>
              </td>

              <td align="left" headers="r9c1-t4 r1c2-t4">
                <p><code>12001.4</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r10c1-t4">
                <p><code>${3 div 4}</code></p>
              </td>

              <td align="left" headers="r10c1-t4 r1c2-t4">
                <p><code>0.75</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r11c1-t4">
                <p><code>${10 mod 4}</code></p>
              </td>

              <td align="left" headers="r11c1-t4 r1c2-t4">
                <p><code>2</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r12c1-t4">
                <p><code>${((x, y) -&gt; x + y)(3, 5.5)}</code></p>
              </td>

              <td align="left" headers="r12c1-t4 r1c2-t4">
                <p><code>8.5</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r13c1-t4">
                <p><code>[1,2,3,4].stream().sum()</code></p>
              </td>

              <td align="left" headers="r13c1-t4 r1c2-t4">
                <p><code>10</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r14c1-t4">
                <p>[1,3,5,2].stream().sorted().toList()</p>
              </td>

              <td align="left" headers="r14c1-t4 r1c2-t4">
                <p><code>[1, 2, 3, 5]</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r15c1-t4">
                <p><code>${!empty param.Add}</code></p>
              </td>

              <td align="left" headers="r15c1-t4 r1c2-t4">
                <p><code>False</code> if the request parameter named <code>Add</code> is <code>null</code> or an empty string</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r16c1-t4">
                <p><code>${pageContext.request.contextPath}</code></p>
              </td>

              <td align="left" headers="r16c1-t4 r1c2-t4">
                <p>The context path</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r17c1-t4">
                <p><code>${sessionScope.cart.numberOfItems}</code></p>
              </td>

              <td align="left" headers="r17c1-t4 r1c2-t4">
                <p>The value of the <code>numberOfItems</code> property of the session-scoped attribute named <code>cart</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r18c1-t4">
                <p><code>${param['mycom.productId']}</code></p>
              </td>

              <td align="left" headers="r18c1-t4 r1c2-t4">
                <p>The value of the request parameter named <code>mycom.productId</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r19c1-t4">
                <p><code>${header["host"]}</code></p>
              </td>

              <td align="left" headers="r19c1-t4 r1c2-t4">
                <p>The host</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r20c1-t4">
                <p><code>${departments[deptName]}</code></p>
              </td>

              <td align="left" headers="r20c1-t4 r1c2-t4">
                <p>The value of the entry named <code>deptName</code> in the <code>departments</code> map</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r21c1-t4">
                <pre class="oac_no_warn" xml:space="preserve">
${requestScope['javax.servlet.forward.servlet_path']}
</pre>
              </td>

              <td align="left" headers="r21c1-t4 r1c2-t4">
                <p>The value of the request-scoped attribute named <code>javax.servlet.forward.servlet_path</code></p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r22c1-t4">
                <p><code>#{customer.lName}</code></p>
              </td>

              <td align="left" headers="r22c1-t4 r1c2-t4">
                <p>Gets the value of the property <code>lName</code> from the <code>customer</code> bean during an initial request; sets the value of <code>lName</code> during a postback</p>
              </td>
            </tr>

            <tr align="left" valign="top">
              <td align="left" headers="r1c1-t4" id="r23c1-t4">
                <p><code>#{customer.calcTotal}</code></p>
              </td>

              <td align="left" headers="r23c1-t4 r1c2-t4">
                <p>The return value of the method <code>calcTotal</code> of the <code>customer</code> bean</p>
              </td>
            </tr>
          </tbody>
        </table><br />
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="CIHGBBHA"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_529"><span class="secnum">9.8</span> Further Information about the Expression Language</h1>

      <p>For more information about the EL, see</p>

      <ul>
        <li>
          <p>The Expression Language 3.0 specification:</p>

          <p><code><a href="../Text/http://www.jcp.org/en/jsr/detail?id=.xhtml#http://www.jcp.org/en/jsr/detail?id=341">http://www.jcp.org/en/jsr/detail?id=341</a></code></p>
        </li>

        <li>
          <p>The EL specification website:</p>

          <p><code><a href="../Text/https://java.net/projects/el-spec/.xhtml#https://java.net/projects/el-spec/">https://java.net/projects/el-spec/</a></code></p>
        </li>
      </ul>
    </div>
  </div>
</body>
</html>
