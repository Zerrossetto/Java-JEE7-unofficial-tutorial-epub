<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
  "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <title></title>
  <link href="../Styles/javaee-darb.css" rel="stylesheet" type="text/css" />
</head>

<body>
  <div class="ind">
    <a id="BNBYK"></a><a id="JEETT00104"></a>

    <h1 class="chapter"><span class="secnum">49</span> <a id="sthref2672"></a><a id="sthref2673"></a>Getting Started Securing Enterprise Applications</h1>

    <p>This chapter describes how to administer security for enterprise applications.</p>

    <p>The following topics are addressed here:</p>

    <ul>
      <li>
        <p><a href="../Text/security-javaee.xhtml#CACGIFHJ">Basic Security Tasks for Enterprise Applications</a></p>
      </li>

      <li>
        <p><a href="../Text/security-javaee.xhtml#BNBYL">Securing Enterprise Beans</a></p>
      </li>

      <li>
        <p><a href="../Text/security-javaee.xhtml#GKBSZ">Examples: Securing Enterprise Beans</a></p>
      </li>
    </ul>
  </div>

  <div class="ind">
    <a id="CACGIFHJ"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_841"><span class="secnum">49.1</span> Basic Security Tasks for Enterprise Applications</h1>

      <p>System administrators, application developers, bean providers, and deployers are responsible for administering security for enterprise applications. The basic security tasks are as follows:</p>

      <ul>
        <li>
          <p>Setting up a database of users and assigning them to the proper group</p>
        </li>

        <li>
          <p>Setting up identity propagation</p>
        </li>

        <li>
          <p>Setting GlassFish Server properties that enable the applications to run properly, such as setting default principal-to-role mapping</p>
        </li>

        <li>
          <p>Annotating the classes and methods of an enterprise application to provide information about which methods need to have restricted access</p>
        </li>
      </ul>

      <p>The sections on the security examples in this chapter and the previous chapter explain how to perform these tasks.</p>
    </div>
  </div>

  <div class="ind">
    <a id="BNBYL"></a><a id="JEETT00520"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_842"><span class="secnum">49.2</span> <a id="sthref2674"></a><a id="sthref2675"></a><a id="sthref2676"></a>Securing Enterprise Beans</h1>

      <p>Enterprise beans are Java EE components that implement EJB technology. Enterprise beans run in the EJB container, a runtime environment within GlassFish Server. Although transparent to the application developer, the EJB container provides system-level services, such as transactions and security to its enterprise beans, which form the core of transactional Java EE applications.</p>

      <p>Enterprise bean methods can be secured in either of the following ways.</p>

      <ul>
        <li>
          <p><a id="sthref2677"></a><a id="sthref2678"></a><a id="sthref2679"></a><a id="sthref2680"></a><a id="sthref2681"></a><span class="bold">Declarative security</span> (preferred): Expresses an application component's security requirements using either deployment descriptors or annotations. The presence of an annotation in the business method of an enterprise bean class that specifies method permissions is all that is needed for method protection and authentication in some situations. This section discusses this simple and efficient method of securing enterprise beans.</p>

          <p>Because of some limitations to the simplified method of securing enterprise beans, you would want to continue to use the deployment descriptor to specify security information in some instances. An authentication mechanism must be configured on the server for the simple solution to work. Basic authentication is GlassFish Server's default authentication method.</p>

          <p>This tutorial explains how to invoke user name/password authentication of authorized users by decorating the enterprise application's business methods with annotations that specify method permissions.</p>

          <p>To make the deployer's task easier, the application developer can define security roles. A security role is a grouping of permissions that a given type of application users must have in order to successfully use the application. For example, in a payroll application, some users will want to view their own payroll information (employee), some will need to view others' payroll information (manager), and some will need to be able to change others' payroll information (payrollDept). The application developer would determine the potential users of the application and which methods would be accessible to which users. The application developer would then decorate classes or methods of the enterprise bean with annotations that specify the types of users authorized to access those methods. Using annotations to specify authorized users is described in <a href="../Text/security-javaee.xhtml#GJGCQ">Specifying Authorized Users by Declaring Security Roles</a>.</p>

          <p>When one of the annotations is used to define method permissions, the deployment system will automatically require user name/password authentication. In this type of authentication, a user is prompted to enter a user name and password, which will be compared against a database of known users. If the user is found and the password matches, the roles that the user is assigned will be compared against the roles that are authorized to access the method. If the user is authenticated and found to have a role that is authorized to access that method, the data will be returned to the user.</p>

          <p>Using declarative security is discussed in <a href="../Text/security-javaee.xhtml#GJGDI">Securing an Enterprise Bean Using Declarative Security</a>.</p>
        </li>

        <li>
          <p><a id="sthref2682"></a><a id="sthref2683"></a><span class="bold">Programmatic security</span>: For an enterprise bean, code embedded in a business method that is used to access a caller's identity programmatically and that uses this information to make security decisions. Programmatic security is useful when declarative security alone is not sufficient to express the security model of an application.</p>

          <p>In general, security management should be enforced by the container in a manner that is transparent to the enterprise beans' business methods. The programmatic security APIs described in this chapter should be used only in the less frequent situations in which the enterprise bean business methods need to access the security-context information, such as when you want to grant access based on the time of day or other nontrivial condition checks for a particular role.</p>

          <p>Programmatic security is discussed in <a href="../Text/security-javaee.xhtml#GJGCS">Securing an Enterprise Bean Programmatically</a>.</p>
        </li>
      </ul>

      <p>Some of the material in this chapter assumes that you have already read <a href="../Text/ejb-intro.xhtml#GIJSZ">Chapter 32, "Enterprise Beans"</a>, <a href="../Text/ejb-gettingstarted.xhtml#GIJRE">Chapter 33, "Getting Started with Enterprise Beans"</a>, and <a href="../Text/security-intro.xhtml#BNBWJ">Chapter 47, "Introduction to Security in the Java EE Platform"</a>.</p>

      <p>This section discusses securing a Java EE application where one or more modules, such as EJB JAR files, are packaged into an EAR file, the archive file that holds the application. Security annotations will be used in the Java programming class files to specify authorized users and basic, or user name/password, authentication.</p>

      <p><a id="sthref2684"></a><a id="sthref2685"></a><a id="sthref2686"></a>Enterprise beans often provide the business logic of a web application. In these cases, packaging the enterprise bean within the web application's WAR module simplifies deployment and application organization. Enterprise beans may be packaged within a WAR module as Java class files or within a JAR file that is bundled within the WAR module. When a servlet or JavaServer Faces page handles the web front end and the application is packaged into a WAR module as a Java class file, security for the application can be handled in the application's <code>web.xml</code> file. The EJB in the WAR file can have its own deployment descriptor, <code>ejb-jar.xml</code>, if required. Securing web applications using <code>web.xml</code> is discussed in <a href="../Text/security-webtier.xhtml#BNCAS">Chapter 48, "Getting Started Securing Web Applications"</a>.</p>

      <p>The following sections describe declarative and programmatic security mechanisms that can be used to protect enterprise bean resources. The protected resources include enterprise bean methods that are called from application clients, web components, or other enterprise beans.</p>

      <p>For more information on this topic, read the Enterprise JavaBeans 3.2 specification. This document can be downloaded from <code><a href="../Text/http://jcp.org/en/jsr/detail?id=.xhtml#http://jcp.org/en/jsr/detail?id=345">http://jcp.org/en/jsr/detail?id=345</a></code>. Chapter 12 of this specification, "Security Management," discusses security management for enterprise beans.</p><a id="GJGDI"></a><a id="JEETT01235"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_843"><span class="secnum">49.2.1</span> Securing an Enterprise Bean Using Declarative Security</h2>

        <p>Declarative security enables the application developer to specify which users are authorized to access which methods of the enterprise beans and to authenticate these users with basic, or user name/password, authentication. Frequently, the person who is developing an enterprise application is not the same person who is responsible for deploying the application. An application developer who uses declarative security to define method permissions and authentication mechanisms is passing along to the deployer a security view of the enterprise beans contained in the EJB JAR. When a security view is passed on to the deployer, he or she uses this information to define method permissions for security roles. If you don't define a security view, the deployer will have to determine what each business method does to determine which users are authorized to call each method.</p>

        <p><a id="sthref2687"></a><a id="sthref2688"></a><a id="sthref2689"></a><a id="sthref2690"></a><a id="sthref2691"></a>A security view consists of a set of security roles, a semantic grouping of permissions that a given type of users of an application must have to successfully access the application. Security roles are meant to be logical roles, representing a type of user. You can define method permissions for each security role. A method permission is a permission to invoke a specified group of methods of an enterprise bean's business interface, home interface, component interface, and/or web service endpoints. After method permissions are defined, user name/password authentication will be used to verify the identity of the user.</p>

        <p>It is important to keep in mind that security roles are used to define the logical security view of an application. They should not be confused with the user groups, users, principals, and other concepts that exist in GlassFish Server. An additional step is required to map the roles defined in the application to users, groups, and principals that are the components of the user database in the <code>file</code> realm of GlassFish Server. These steps are outlined in <a href="../Text/security-intro.xhtml#BNBXV">Mapping Roles to Users and Groups</a>.</p>

        <p>The following sections show how an application developer uses declarative security to either secure an application or to create a security view to pass along to the deployer.</p><a id="GJGCQ"></a><a id="JEETT00783"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.2.1.1</span> <a id="sthref2692"></a><a id="sthref2693"></a><a id="sthref2694"></a><a id="sthref2695"></a><a id="sthref2696"></a><a id="sthref2697"></a><a id="sthref2698"></a>Specifying Authorized Users by Declaring Security Roles</h3>

          <p>This section discusses how to use annotations to specify the method permissions for the methods of a bean class. For more information on these annotations, refer to the Common Annotations for the Java Platform specification at <code><a href="../Text/http://jcp.org/en/jsr/detail?id=.xhtml#http://jcp.org/en/jsr/detail?id=250">http://jcp.org/en/jsr/detail?id=250</a></code>.</p>

          <p>Method permissions can be specified on the class, the business methods of the class, or both. Method permissions can be specified on a method of the bean class to override the method permissions value specified on the entire bean class. The following annotations are used to specify method permissions.</p>

          <ul>
            <li>
              <p><a id="sthref2699"></a><code>@DeclareRoles</code>: Specifies all the roles that the application will use, including roles not specifically named in a <code>@RolesAllowed</code> annotation. The set of security roles the application uses is the total of the security roles defined in the <code>@DeclareRoles</code> and <code>@RolesAllowed</code> annotations.</p>

              <p>The <code>@DeclareRoles</code> annotation is specified on a bean class, where it serves to declare roles that can be tested (for example, by calling <code>isCallerInRole</code>) from within the methods of the annotated class. When declaring the name of a role used as a parameter to the <code>isCallerInRole(String roleName)</code> method, the declared name must be the same as the parameter value.</p>

              <p>The following example code demonstrates the use of the <code>@DeclareRoles</code> annotation:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@DeclareRoles("BusinessAdmin")
public class Calculator {
    ...
}
</pre>

              <p>The syntax for declaring more than one role is as shown in the following example:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@DeclareRoles({"Administrator", "Manager", "Employee"})
</pre>
            </li>

            <li>
              <p><a id="sthref2700"></a><code>@RolesAllowed("</code><span class="variable">list-of-roles</span><code>")</code>: Specifies the security roles permitted to access methods in an application. This annotation can be specified on a class or on one or more methods. When specified at the class level, the annotation applies to all methods in the class. When specified on a method, the annotation applies to that method only and overrides any values specified at the class level.</p>

              <p>To specify that no roles are authorized to access methods in an application, use the <code>@DenyAll</code> annotation. To specify that a user in any role is authorized to access the application, use the <code>@PermitAll</code> annotation.</p>

              <p>When used in conjunction with the <code>@DeclareRoles</code> annotation, the combined set of security roles is used by the application.</p>

              <p>The following example code demonstrates the use of the <code>@RolesAllowed</code> annotation:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@DeclareRoles({"Administrator", "Manager", "Employee"})
public class Calculator {

    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        ...
    }
}
</pre>
            </li>

            <li>
              <p><a id="sthref2701"></a><code>@PermitAll</code>: Specifies that <span class="italic">all</span> security roles are permitted to execute the specified method or methods. The user is not checked against a database to ensure that he or she is authorized to access this application.</p>

              <p>This annotation can be specified on a class or on one or more methods. Specifying this annotation on the class means that it applies to all methods of the class. Specifying it at the method level means that it applies to only that method.</p>

              <p>The following example code demonstrates the use of the <code>@PermitAll</code> annotation:</p>
              <pre class="oac_no_warn" xml:space="preserve">
import javax.annotation.security.*;
@RolesAllowed("RestrictedUsers")
public class Calculator {

    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        //...
    }
    @PermitAll
    public long convertCurrency(long amount) {
        //...
    }
}
</pre>
            </li>

            <li>
              <p><a id="sthref2702"></a><code>@DenyAll</code>: Specifies that <span class="italic">no</span> security roles are permitted to execute the specified method or methods. This means that these methods are excluded from execution in the Java EE container.</p>

              <p>The following example code demonstrates the use of the <code>@DenyAll</code> annotation:</p>
              <pre class="oac_no_warn" xml:space="preserve">
import javax.annotation.security.*;
@RolesAllowed("Users")
public class Calculator {
    @RolesAllowed("Administrator")
    public void setNewRate(int rate) {
        //...
    }
    @DenyAll
    public long convertCurrency(long amount) {
        //...
    }
}
</pre>
            </li>
          </ul>

          <p>The following code snippet demonstrates the use of the <code>@DeclareRoles</code> annotation with the <code>isCallerInRole</code> method. In this example, the <code>@DeclareRoles</code> annotation declares a role that the enterprise bean <code>PayrollBean</code> uses to make the security check by using <code>isCallerInRole("payroll")</code> to verify that the caller is authorized to change salary data:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@DeclareRoles("payroll")
@Stateless public class PayrollBean implements Payroll {
    @Resource SessionContext ctx;

    public void updateEmployeeInfo(EmplInfo info) {

        oldInfo = ... read from database;

        // The salary field can be changed only by callers
        // who have the security role "payroll"
        Principal callerPrincipal = ctx.getCallerPrincipal();
        if (info.salary != oldInfo.salary &amp;&amp; !ctx.isCallerInRole("payroll")) {
            throw new SecurityException(...);
        }
        ...
    }
    ...
}
</pre>

          <p>The following example code illustrates the use of the <code>@RolesAllowed</code> annotation:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@RolesAllowed("admin")
public class SomeClass {
    public void aMethod () {...}
    public void bMethod () {...}
    ...
}

@Stateless public class MyBean extends SomeClass implements A  {

    @RolesAllowed("HR")
    public void aMethod () {...}

    public void cMethod () {...}
    ...
}
</pre>

          <p>In this example, assuming that <code>aMethod</code>, <code>bMethod</code>, and <code>cMethod</code> are methods of business interface <code>A</code>, the method permissions values of methods <code>aMethod</code> and <code>bMethod</code> are <code>@RolesAllowed("HR")</code> and <code>@RolesAllowed("admin")</code>, respectively. The method permissions for method <code>cMethod</code> have not been specified.</p>

          <p>To clarify, the annotations are not inherited by the subclass itself. Instead, the annotations apply to methods of the superclass that are inherited by the subclass.</p>
        </div><a id="BNBYU"></a><a id="JEETT00784"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.2.1.2</span> <a id="sthref2703"></a><a id="sthref2704"></a>Specifying an Authentication Mechanism and Secure Connection</h3>

          <p>When method permissions are specified, basic user name/password authentication will be invoked by GlassFish Server.</p>

          <p>To use a different type of authentication or to require a secure connection using SSL, specify this information in an application deployment descriptor.</p>
        </div>
      </div><a id="GJGCS"></a><a id="JEETT01236"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_844"><span class="secnum">49.2.2</span> Securing an Enterprise Bean Programmatically</h2>

        <p>Programmatic security, code that is embedded in a business method, is used to access a caller's identity programmatically and uses this information to make security decisions within the method itself.</p><a id="GJGCR"></a><a id="JEETT00785"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.2.2.1</span> <a id="sthref2705"></a><a id="sthref2706"></a><a id="sthref2707"></a><a id="sthref2708"></a><a id="sthref2709"></a><a id="sthref2710"></a>Accessing an Enterprise Bean Caller's Security Context</h3>

          <p>In general, security management should be enforced by the container in a manner that is transparent to the enterprise bean's business methods. The security API described in this section should be used only in the less frequent situations in which the enterprise bean business methods need to access the security context information, such as when you want to restrict access to a particular time of day.</p>

          <p>The <code>javax.ejb.EJBContext</code> interface provides two methods that allow the bean provider to access security information about the enterprise bean's caller.</p>

          <ul>
            <li>
              <p><code>getCallerPrincipal</code> allows the enterprise bean methods to obtain the current caller principal's name. The methods might, for example, use the name as a key to information in a database.</p>

              <p>The following code sample illustrates the use of the <code>getCallerPrincipal</code> method:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@Stateless public class EmployeeServiceBean implements EmployeeService {
    @Resource SessionContext ctx;
    @PersistenceContext EntityManager em;

    public void changePhoneNumber(...) {
        ...
        // obtain the caller principal
        callerPrincipal = ctx.getCallerPrincipal();

        // obtain the caller principal's name
        callerKey = callerPrincipal.getName();

        // use callerKey as primary key to find EmployeeRecord
        EmployeeRecord myEmployeeRecord =
            em.find(EmployeeRecord.class, callerKey);

        // update phone number
        myEmployeeRecord.setPhoneNumber(...);

        ...
    }
}
</pre>

              <p>In this example, the enterprise bean obtains the principal name of the current caller and uses it as the primary key to locate an <code>EmployeeRecord</code> entity. This example assumes that application has been deployed such that the current caller principal contains the primary key used for the identification of employees (for example, employee number).</p>
            </li>

            <li>
              <p><code>isCallerInRole</code> allows the developer to code the security checks that cannot be easily defined using method permissions. Such a check might impose a role-based limit on a request, or it might depend on information stored in the database.</p>

              <p>The enterprise bean code can use the <code>isCallerInRole</code> method to test whether the current caller has been assigned to a given security role. Security roles are defined by the bean provider or the application assembler and are assigned by the deployer to principals or principal groups that exist in the operational environment.</p>

              <p>The following code sample illustrates the use of the <code>isCallerInRole</code> method:</p>
              <pre class="oac_no_warn" xml:space="preserve">
@Stateless public class PayrollBean implements Payroll {
     @Resource SessionContext ctx;

     public void updateEmployeeInfo(EmplInfo info) {

         oldInfo = ... read from database;

         // The salary field can be changed only by callers
         // who have the security role "payroll"
         if (info.salary != oldInfo.salary &amp;&amp;
             !ctx.isCallerInRole("payroll")) {
                 throw new SecurityException(...);
         }
         ...
     }
     ...
 }
</pre>
            </li>
          </ul>

          <p>You would use programmatic security in this way to dynamically control access to a method, for example, when you want to deny access except during a particular time of day. An example application that uses the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods is described in <a href="../Text/security-javaee.xhtml#BNCAA">The converter-secure Example: Securing an Enterprise Bean with Programmatic Security</a>.</p>
        </div>
      </div><a id="BNBYR"></a><a id="JEETT01237"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_845"><span class="secnum">49.2.3</span> <a id="sthref2711"></a><a id="sthref2712"></a><a id="sthref2713"></a><a id="sthref2714"></a><a id="sthref2715"></a>Propagating a Security Identity (Run-As)</h2>

        <p>You can specify whether a caller's security identity should be used for the execution of specified methods of an enterprise bean or whether a specific run-as identity should be used. <a href="../Text/security-javaee.xhtml#BNBZA">Figure 49-1</a> illustrates this concept.</p>

        <div class="figure">
          <a id="BNBZA"></a><a id="JEETT00039"></a>

          <p class="titleinfigure">Figure 49-1 Security Identity Propagation</p><br />
          <a href="../Text/img_text/jeett_dt_.xhtml#img_text/jeett_dt_047.htm" id="sthref2716">Description of "Figure 49-1 Security Identity Propagation"</a><br />
          <br />
        </div>

        <p>In this illustration, an application client is making a call to an enterprise bean method in one EJB container. This enterprise bean method, in turn, makes a call to an enterprise bean method in another container. The security identity during the first call is the identity of the caller. The security identity during the second call can be any of the following options.</p>

        <ul>
          <li>
            <p>By default, the identity of the caller of the intermediate component is propagated to the target enterprise bean. This technique is used when the target container trusts the intermediate container.</p>
          </li>

          <li>
            <p><a id="sthref2717"></a>A <span class="italic">specific</span> identity is propagated to the target enterprise bean. This technique is used when the target container expects access using a specific identity.</p>
          </li>
        </ul>

        <p>To propagate an identity to the target enterprise bean, configure a run-as identity for the bean, as described in <a href="../Text/security-javaee.xhtml#BNBZB">Configuring a Component's Propagated Security Identity</a>. Establishing a run-as identity for an enterprise bean does not affect the identities of its callers, which are the identities tested for permission to access the methods of the enterprise bean. The run-as identity establishes the identity that the enterprise bean will use when it makes calls.</p>

        <p>The run-as identity applies to the enterprise bean as a whole, including all the methods of the enterprise bean's business interface, local and remote interfaces, component interface, and web service endpoint interfaces, the message listener methods of a message-driven bean, the timeout method of an enterprise bean, and all internal methods of the bean that might be called in turn.</p><a id="BNBZB"></a><a id="JEETT00786"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.2.3.1</span> Configuring a Component's Propagated Security Identity</h3>

          <p>You can configure an enterprise bean's run-as, or propagated, security identity by using the <code>@RunAs</code> annotation, which defines the role of the application during execution in a Java EE container. The annotation can be specified on a class, allowing developers to execute an application under a particular role. The role must map to the user/group information in the container's security realm. The <code>@RunAs</code> annotation specifies the name of a security role as its parameter.</p>

          <p>The following code demonstrates the use of the <code>@RunAs</code> annotation:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@RunAs("Admin")
public class Calculator {
    //....
}
</pre>

          <p>You will have to map the run-as role name to a given principal defined in GlassFish Server if the given roles are associated with more than one user principal.</p>
        </div><a id="BNBZC"></a><a id="JEETT00787"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.2.3.2</span> <a id="sthref2718"></a><a id="sthref2719"></a>Trust between Containers</h3>

          <p>When an enterprise bean is designed so that either the original caller identity or a designated identity is used to call a target bean, the target bean will receive the propagated identity only. The target bean will not receive any authentication data.</p>

          <p>There is no way for the target container to authenticate the propagated security identity. However, because the security identity is used in authorization checks (for example, method permissions or with the <code>isCallerInRole</code> method), it is vitally important that the security identity be authentic. Because no authentication data is available to authenticate the propagated identity, the target must trust that the calling container has propagated an authenticated security identity.</p>

          <p>By default, GlassFish Server is configured to trust identities that are propagated from different containers. Therefore, you do not need to take any special steps to set up a trust relationship.</p>
        </div>
      </div><a id="BNBZG"></a><a id="JEETT01238"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_846"><span class="secnum">49.2.4</span> <a id="sthref2720"></a>Deploying Secure Enterprise Beans</h2>

        <p>The deployer is responsible for ensuring that an assembled application is secure after it has been deployed in the target operational environment. If a security view has been provided to the deployer through the use of security annotations and/or a deployment descriptor, the security view is mapped to the mechanisms and policies used by the security domain in the target operational environment, which in this case is GlassFish Server. If no security view is provided, the deployer must set up the appropriate security policy for the enterprise bean application.</p>

        <p>Deployment information is specific to a web or application server.</p>
      </div>
    </div>
  </div>

  <div class="ind">
    <a id="GKBSZ"></a><a id="JEETT00521"></a>

    <div class="sect1">
      <h1 class="sect1" id="sigil_toc_id_847"><span class="secnum">49.3</span> Examples: Securing Enterprise Beans</h1>

      <p>The following examples show how to secure enterprise beans using declarative and programmatic security.</p><a id="BNBZK"></a><a id="JEETT01239"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_848"><span class="secnum">49.3.1</span> <a id="sthref2721"></a><a id="sthref2722"></a><a id="sthref2723"></a>The cart-secure Example: Securing an Enterprise Bean with Declarative Security</h2>

        <p>This section discusses how to configure an enterprise bean for basic user name/password authentication. When a bean that is constrained in this way is requested, the server requests a user name and password from the client and verifies that the user name and password are valid by comparing them against a database of authorized users in GlassFish Server.</p>

        <p>If the topic of authentication is new to you, see <a href="../Text/security-webtier.xhtml#GKBSA">Specifying Authentication Mechanisms</a>.</p>

        <p>This example demonstrates security by starting with the unsecured enterprise bean application, <code>cart</code>, which is found in the <span class="variable">tut-install</span><code>/examples/ejb/cart/</code> directory and is discussed in <a href="../Text/ejb-basicexamples.xhtml#BNBOD">The cart Example</a>.</p>

        <p>In general, the following steps are necessary to add user name/password authentication to an existing application that contains an enterprise bean. In the example application included with this tutorial, these steps have been completed for you and are listed here simply to show what needs to be done should you wish to create a similar application.</p>

        <ol>
          <li>
            <p>Create an application like the one in <a href="../Text/ejb-basicexamples.xhtml#BNBOD">The cart Example</a>. The example in this tutorial starts with this example and demonstrates adding basic authentication of the client to this application. The example application discussed in this section can be found at <span class="variable">tut-install</span><code>/examples/security/cart-secure/</code>.</p>
          </li>

          <li>
            <p>If you have not already done so, complete the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a> to configure your system for running the tutorial applications.</p>
          </li>

          <li>
            <p>Modify the source code for the enterprise bean, <code>CartBean.java</code>, to specify which roles are authorized to access which protected methods. This step is discussed in <a href="../Text/security-javaee.xhtml#BNBZL">Annotating the Bean</a>.</p>
          </li>

          <li>
            <p>Build, package, and deploy the enterprise bean; then build and run the client application by following the steps in <a href="../Text/security-javaee.xhtml#BNBZN">To Run the cart-secure Example Using NetBeans IDE</a> or <a href="../Text/security-javaee.xhtml#BNBZO">To Run the cart-secure Example Using Maven</a>.</p>
          </li>
        </ol><a id="BNBZL"></a><a id="JEETT00788"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.1.1</span> <a id="sthref2724"></a><a id="sthref2725"></a>Annotating the Bean</h3>

          <p>The source code for the original <code>cart</code> application was modified as shown in the following code snippet (modifications in <span class="bold">bold</span>). The resulting file can be found in the file <span class="variable">tut-install</span><code>/examples/security/cart-secure/cart-secure-ejb/src/main/java/javaeetutorial/cart/ejb/CartBean.java</code>.</p>

          <p>The code snippet is as follows:</p>
          <pre class="oac_no_warn" xml:space="preserve">
package javaeetutorial.cartsecure.ejb;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javaeetutorial.cart.util.BookException;
import javaeetutorial.cart.util.IdVerifier;
import javax.ejb.Remove;
import javax.ejb.Stateful;
<span class="bold">import javax.annotation.security.DeclareRoles;</span>
<span class="bold">import javax.annotation.security.RolesAllowed;</span>

@Stateful
<span class="bold">@DeclareRoles("TutorialUser")</span>
public class CartBean implements Cart, Serializable {
    List&lt;String&gt; contents;
    String customerId;
    String customerName;

    @Override
    public void initialize(String person) throws BookException {
        if (person == null) {
            throw new BookException("Null person not allowed.");
        } else {
            customerName = person;
        }

        customerId = "0";
        contents = new ArrayList&lt;&gt;();
    }

    @Override
    public void initialize(String person, String id) throws BookException {
        if (person == null) {
            throw new BookException("Null person not allowed.");
        } else {
            customerName = person;
        }

        IdVerifier idChecker = new IdVerifier();

        if (idChecker.validate(id)) {
            customerId = id;
        } else {
            throw new BookException("Invalid id: " + id);
        }

        contents = new ArrayList&lt;&gt;();
    }

    @Override
    <span class="bold">@RolesAllowed("TutorialUser")</span>
    public void addBook(String title) {
        contents.add(title);
    }

    @Override
    <span class="bold">@RolesAllowed("TutorialUser")</span>
    public void removeBook(String title) throws BookException {
        boolean result = contents.remove(title);

        if (result == false) {
            throw new BookException("\"" + title + "\" not in cart.");
        }
    }

    @Override
    <span class="bold">@RolesAllowed("TutorialUser")</span>
    public List&lt;String&gt; getContents() {
        return contents;
    }

    @Override
    @Remove()
    <span class="bold">@RolesAllowed("TutorialUser")</span>
    public void remove() {
        contents = null;
    }
}
</pre>

          <p>The <code>@RolesAllowed</code> annotation is specified on methods for which you want to restrict access. In this example, only users in the role of <code>TutorialUser</code> will be allowed to add and remove books from the cart and to list the contents of the cart. A <code>@RolesAllowed</code> annotation implicitly declares a role that will be referenced in the application; therefore, no <code>@DeclareRoles</code> annotation is required. The presence of the <code>@RolesAllowed</code> annotation also implicitly declares that authentication will be required for a user to access these methods. If no authentication method is specified in the deployment descriptor, the type of authentication will be user name/password authentication.</p>
        </div><a id="BNBZN"></a><a id="JEETT00249"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.1.2</span> To Run the cart-secure Example Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Follow the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a>.</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/security
</pre>
            </li>

            <li>
              <p>Select the <code>cart-secure</code> folder.</p>
            </li>

            <li>
              <p>Select the <span class="gui-object-action">Open Required Projects</span> check box.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Projects</span> tab, right-click the <code>cart-secure</code> project and select <span class="gui-object-action">Build</span>.</p>

              <p>This step builds and packages the application into <code>cart-secure.ear</code>, located in the <code>cart-secure-ear/target/</code> directory, and deploys this EAR file to your GlassFish Server instance, retrieves the client stubs, and runs the client.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Login for user:</span> dialog box, enter the user name and password of a <code>file</code> realm user created in GlassFish Server and assigned to the group <code>TutorialUser</code>; then click <span class="gui-object-action">OK</span>.</p>

              <p>If the user name and password you enter are authenticated, the output of the application client appears in the <span class="gui-object-action">Output</span> tab:</p>
              <pre class="oac_no_warn" xml:space="preserve">
...
Retrieving book title from cart: Infinite Jest
Retrieving book title from cart: Bel Canto
Retrieving book title from cart: Kafka on the Shore
Removing "Gravity's Rainbow" from cart.
Caught a BookException: "Gravity's Rainbow" not in cart.
Java Result: 1
...
</pre>

              <p>If the user name and password are not authenticated, the dialog box reappears until you enter correct values.</p>
            </li>
          </ol>
        </div><a id="BNBZO"></a><a id="JEETT00250"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.1.3</span> To Run the cart-secure Example Using Maven</h3>

          <ol>
            <li>
              <p>Follow the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a>.</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/security/cart-secure/
</pre>
            </li>

            <li>
              <p>To build the application, package it into an EAR file in the <code>cart-secure-ear/target</code> subdirectory, deploy it, and run it, enter the following command at the terminal window or command prompt:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>
            </li>

            <li>
              <p>In the <span class="gui-object-action">Login for user:</span> dialog box, enter the user name and password of a <code>file</code> realm user created in GlassFish Server and assigned to the group <code>TutorialUser</code>; then click <span class="gui-object-action">OK</span>.</p>

              <p>If the user name and password you enter are authenticated, the output of the application client appears in the <span class="gui-object-action">Output</span> tab:</p>
              <pre class="oac_no_warn" xml:space="preserve">
...
Retrieving book title from cart: Infinite Jest
Retrieving book title from cart: Bel Canto
Retrieving book title from cart: Kafka on the Shore
Removing "Gravity's Rainbow" from cart.
Caught a BookException: "Gravity's Rainbow" not in cart.
Java Result: 1
...
</pre>

              <p>If the user name and password are not authenticated, the dialog box reappears until you enter correct values.</p>
            </li>
          </ol>
        </div>
      </div><a id="BNCAA"></a><a id="JEETT01240"></a>

      <div class="sect2">
        <h2 class="sect2" id="sigil_toc_id_849"><span class="secnum">49.3.2</span> <a id="sthref2726"></a><a id="sthref2727"></a><a id="sthref2728"></a><a id="sthref2729"></a><a id="sthref2730"></a>The converter-secure Example: Securing an Enterprise Bean with Programmatic Security</h2>

        <p>This example demonstrates how to use the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods with an enterprise bean. This example starts with a very simple EJB application, <code>converter</code>, and modifies the methods of the <code>ConverterBean</code> so that currency conversion will occur only when the requester is in the role of <code>TutorialUser</code>.</p>

        <p>This example can be found in the <span class="variable">tut-install</span><code>/</code><code>examples/security/converter-secure</code> directory. This example is based on the unsecured enterprise bean application, <code>converter</code>, which is discussed in <a href="../Text/ejb-gettingstarted.xhtml#GIJRE">Chapter 33, "Getting Started with Enterprise Beans"</a> and is found in the <span class="variable">tut-install</span><code>/examples/ejb/converter/</code> directory. This section builds on the example by adding the necessary elements to secure the application by using the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods, which are discussed in more detail in <a href="../Text/security-javaee.xhtml#GJGCR">Accessing an Enterprise Bean Caller's Security Context</a>.</p>

        <p>In general, the following steps are necessary when using the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods with an enterprise bean. In the example application included with this tutorial, many of these steps have been completed for you and are listed here simply to show what needs to be done should you wish to create a similar application.</p>

        <ol>
          <li>
            <p>Create a simple enterprise bean application.</p>
          </li>

          <li>
            <p>Set up a user on GlassFish Server in the <code>file</code> realm, in the group <code>TutorialUser</code>, and set up default principal to role mapping. To do this, follow the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a>.</p>
          </li>

          <li>
            <p>Modify the bean to add the <code>getCallerPrincipal</code> and <code>isCallerInRole</code> methods.</p>
          </li>

          <li>
            <p>If the application contains a web client that is a servlet, specify security for the servlet, as described in <a href="../Text/security-webtier.xhtml#GJRMH">Specifying Security for Basic Authentication Using Annotations</a>.</p>
          </li>

          <li>
            <p>Build, package, deploy, and run the application.</p>
          </li>
        </ol><a id="BNCAB"></a><a id="JEETT00789"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.2.1</span> Modifying ConverterBean</h3>

          <p>The source code for the original <code>ConverterBean</code> class was modified to add the <code>if..else</code> clause that tests whether the caller is in the role of <code>TutorialUser</code>. If the user is in the correct role, the currency conversion is computed and displayed. If the user is not in the correct role, the computation is not performed, and the application displays the result as <code>0</code>. The code example can be found in <span class="variable">tut-install</span><code>/examples/security/converter-secure/converter-secure-ejb/src/main/java/javaeetutorial/converter/ejb/ConverterBean.java</code>.</p>

          <p>The code snippet (with modifications shown in <span class="bold">bold</span>) is as follows:</p>
          <pre class="oac_no_warn" xml:space="preserve">
package javaeetutorial.convertersecure.ejb;

import java.math.BigDecimal;
<span class="bold">import java.security.Principal;</span>
import javax.ejb.Stateless;
<span class="bold">import javax.annotation.Resource;</span>
<span class="bold">import javax.ejb.SessionContext;</span>
<span class="bold">import javax.annotation.security.DeclareRoles;</span>
<span class="bold">import javax.annotation.security.RolesAllowed;</span>

@Stateless()
<span class="bold">@DeclareRoles("TutorialUser")</span>
public class ConverterBean{

    <span class="bold">@Resource SessionContext ctx;</span>
    private final BigDecimal yenRate = new BigDecimal("104.34");
    private final BigDecimal euroRate = new BigDecimal("0.007");

    <span class="bold">@RolesAllowed("TutorialUser")</span>
     public BigDecimal dollarToYen(BigDecimal dollars) {
        <span class="bold">BigDecimal result = new BigDecimal("0.0");</span>
        <span class="bold">Principal callerPrincipal = ctx.getCallerPrincipal(); </span>
        <span class="bold">if (ctx.isCallerInRole("TutorialUser")) {</span>
            result = dollars.multiply(yenRate);
            return result.setScale(2, BigDecimal.ROUND_UP);
        <span class="bold">} else {</span>
            <span class="bold">return result.setScale(2, BigDecimal.ROUND_UP); </span>
        <span class="bold">}</span>
    }

    <span class="bold">@RolesAllowed("TutorialUser")</span>
    public BigDecimal yenToEuro(BigDecimal yen) {
        <span class="bold">BigDecimal result = new BigDecimal("0.0");</span>
        <span class="bold">Principal callerPrincipal = ctx.getCallerPrincipal(); </span>
        <span class="bold">if (ctx.isCallerInRole("TutorialUser")) {</span>
             result = yen.multiply(euroRate);
             return result.setScale(2, BigDecimal.ROUND_UP);
        <span class="bold">} else {</span>
             <span class="bold">return result.setScale(2, BigDecimal.ROUND_UP); </span>
        <span class="bold">}</span>
    }
}
</pre>
        </div><a id="GKBSI"></a><a id="JEETT00790"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.2.2</span> Modifying ConverterServlet</h3>

          <p>The following annotations specify security for the <code>converter</code> web client, <code>ConverterServlet</code>:</p>
          <pre class="oac_no_warn" xml:space="preserve">
@WebServlet(urlPatterns = {"/"})
@ServletSecurity(
@HttpConstraint(transportGuarantee = TransportGuarantee.CONFIDENTIAL,
    rolesAllowed = {"TutorialUser"}))
</pre>
        </div><a id="BNCAD"></a><a id="JEETT00251"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.2.3</span> To Run the converter-secure Example Using NetBeans IDE</h3>

          <ol>
            <li>
              <p>Follow the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a>.</p>
            </li>

            <li>
              <p>From the <span class="gui-object-action">File</span> menu, choose <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>In the <span class="gui-object-title">Open Project</span> dialog box, navigate to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/security
</pre>
            </li>

            <li>
              <p>Select the <code>converter-secure</code> folder.</p>
            </li>

            <li>
              <p>Click <span class="gui-object-action">Open Project</span>.</p>
            </li>

            <li>
              <p>Right-click the <code>converter-secure</code> project and select <span class="gui-object-action">Build</span>.</p>

              <p>This command builds and deploys the example application to your GlassFish Server instance.</p>
            </li>
          </ol>
        </div><a id="BNCAE"></a><a id="JEETT00252"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.2.4</span> To Run the converter-secure Example Using Maven</h3>

          <ol>
            <li>
              <p>Follow the steps in <a href="../Text/security-webtier.xhtml#GJJLK">To Set Up Your System for Running the Security Examples</a>.</p>
            </li>

            <li>
              <p>In a terminal window, go to:</p>
              <pre class="oac_no_warn" xml:space="preserve">
<span class="variable">tut-install</span>/examples/security/converter-secure/
</pre>
            </li>

            <li>
              <p>Enter the following command:</p>
              <pre class="oac_no_warn" xml:space="preserve">
mvn install
</pre>

              <p>This command builds and packages the application into a WAR file, <code>converter-secure.war</code>, that is located in the <code>target</code> directory, and deploys the WAR file.</p>
            </li>
          </ol>
        </div><a id="GJTDP"></a><a id="JEETT00253"></a>

        <div class="sect3">
          <h3 class="sect3 sigil_not_in_toc"><span class="secnum">49.3.2.5</span> To Run the converter-secure Example</h3>

          <ol>
            <li>
              <p>Open a web browser to the following URL:</p>
              <pre class="oac_no_warn" xml:space="preserve">
http://localhost:8080/converter-secure
</pre>

              <p>An <span class="gui-object-title">Authentication Required</span> dialog box appears.</p>
            </li>

            <li>
              <p>Enter a user name and password combination that corresponds to a user who has already been created in the <code>file</code> realm of GlassFish Server and has been assigned to the group <code>TutorialUser</code>; then click <span class="gui-object-action">OK</span>.</p>
            </li>

            <li>
              <p>Enter <code>100</code> in the input field and click <span class="gui-object-action">Submit</span>.</p>

              <p>A second page appears, showing the converted values.</p>
            </li>
          </ol>
        </div>
      </div>
    </div>
  </div>
</body>
</html>
